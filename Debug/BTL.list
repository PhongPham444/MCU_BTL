
BTL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039b8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08003ac4  08003ac4  00013ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b4c  08003b4c  000200cc  2**0
                  CONTENTS
  4 .ARM          00000000  08003b4c  08003b4c  000200cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b4c  08003b4c  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b4c  08003b4c  00013b4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b50  08003b50  00013b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  08003b54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  200000cc  08003c20  000200cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08003c20  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010c5e  00000000  00000000  000200f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025c4  00000000  00000000  00030d53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d58  00000000  00000000  00033318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c48  00000000  00000000  00034070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001946c  00000000  00000000  00034cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010d79  00000000  00000000  0004e124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b16d  00000000  00000000  0005ee9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ea00a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a54  00000000  00000000  000ea060  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000cc 	.word	0x200000cc
 8000128:	00000000 	.word	0x00000000
 800012c:	08003aac 	.word	0x08003aac

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000d0 	.word	0x200000d0
 8000148:	08003aac 	.word	0x08003aac

0800014c <KeyInputHandler1>:

static int KeyReg3 = NORMAL_STATE;

static int TimerForKeyPress = 200;

void KeyInputHandler1(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	mode++;
 8000150:	4b37      	ldr	r3, [pc, #220]	; (8000230 <KeyInputHandler1+0xe4>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	3301      	adds	r3, #1
 8000156:	4a36      	ldr	r2, [pc, #216]	; (8000230 <KeyInputHandler1+0xe4>)
 8000158:	6013      	str	r3, [r2, #0]
	if(mode >= 4){
 800015a:	4b35      	ldr	r3, [pc, #212]	; (8000230 <KeyInputHandler1+0xe4>)
 800015c:	681b      	ldr	r3, [r3, #0]
 800015e:	2b03      	cmp	r3, #3
 8000160:	dd03      	ble.n	800016a <KeyInputHandler1+0x1e>
		mode = 0;
 8000162:	4b33      	ldr	r3, [pc, #204]	; (8000230 <KeyInputHandler1+0xe4>)
 8000164:	2200      	movs	r2, #0
 8000166:	601a      	str	r2, [r3, #0]
 8000168:	e006      	b.n	8000178 <KeyInputHandler1+0x2c>
	}
	else if (mode != 0){
 800016a:	4b31      	ldr	r3, [pc, #196]	; (8000230 <KeyInputHandler1+0xe4>)
 800016c:	681b      	ldr	r3, [r3, #0]
 800016e:	2b00      	cmp	r3, #0
 8000170:	d002      	beq.n	8000178 <KeyInputHandler1+0x2c>
		display_timer_flag = 1;
 8000172:	4b30      	ldr	r3, [pc, #192]	; (8000234 <KeyInputHandler1+0xe8>)
 8000174:	2201      	movs	r2, #1
 8000176:	601a      	str	r2, [r3, #0]
	}
	switch(mode){
 8000178:	4b2d      	ldr	r3, [pc, #180]	; (8000230 <KeyInputHandler1+0xe4>)
 800017a:	681b      	ldr	r3, [r3, #0]
 800017c:	2b03      	cmp	r3, #3
 800017e:	d853      	bhi.n	8000228 <KeyInputHandler1+0xdc>
 8000180:	a201      	add	r2, pc, #4	; (adr r2, 8000188 <KeyInputHandler1+0x3c>)
 8000182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000186:	bf00      	nop
 8000188:	08000199 	.word	0x08000199
 800018c:	0800019f 	.word	0x0800019f
 8000190:	080001cd 	.word	0x080001cd
 8000194:	080001fb 	.word	0x080001fb
	case 0:{
		init();
 8000198:	f000 fbc0 	bl	800091c <init>
		break;
 800019c:	e045      	b.n	800022a <KeyInputHandler1+0xde>
	}
	case 1:{
		HAL_GPIO_WritePin(EN_A1_GPIO_Port, EN_A1_Pin, GPIO_PIN_SET);
 800019e:	2201      	movs	r2, #1
 80001a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001a4:	4824      	ldr	r0, [pc, #144]	; (8000238 <KeyInputHandler1+0xec>)
 80001a6:	f001 fb48 	bl	800183a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_A2_GPIO_Port, EN_A2_Pin, GPIO_PIN_SET);
 80001aa:	2201      	movs	r2, #1
 80001ac:	2180      	movs	r1, #128	; 0x80
 80001ae:	4823      	ldr	r0, [pc, #140]	; (800023c <KeyInputHandler1+0xf0>)
 80001b0:	f001 fb43 	bl	800183a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(EN_B1_GPIO_Port, EN_B1_Pin, GPIO_PIN_SET);
 80001b4:	2201      	movs	r2, #1
 80001b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001ba:	481f      	ldr	r0, [pc, #124]	; (8000238 <KeyInputHandler1+0xec>)
 80001bc:	f001 fb3d 	bl	800183a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_B2_GPIO_Port, EN_B2_Pin, GPIO_PIN_SET);
 80001c0:	2201      	movs	r2, #1
 80001c2:	2140      	movs	r1, #64	; 0x40
 80001c4:	481e      	ldr	r0, [pc, #120]	; (8000240 <KeyInputHandler1+0xf4>)
 80001c6:	f001 fb38 	bl	800183a <HAL_GPIO_WritePin>
		break;
 80001ca:	e02e      	b.n	800022a <KeyInputHandler1+0xde>
	}
	case 2:{
		HAL_GPIO_WritePin(EN_A1_GPIO_Port, EN_A1_Pin, GPIO_PIN_RESET);
 80001cc:	2200      	movs	r2, #0
 80001ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001d2:	4819      	ldr	r0, [pc, #100]	; (8000238 <KeyInputHandler1+0xec>)
 80001d4:	f001 fb31 	bl	800183a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_A2_GPIO_Port, EN_A2_Pin, GPIO_PIN_RESET);
 80001d8:	2200      	movs	r2, #0
 80001da:	2180      	movs	r1, #128	; 0x80
 80001dc:	4817      	ldr	r0, [pc, #92]	; (800023c <KeyInputHandler1+0xf0>)
 80001de:	f001 fb2c 	bl	800183a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(EN_B1_GPIO_Port, EN_B1_Pin, GPIO_PIN_SET);
 80001e2:	2201      	movs	r2, #1
 80001e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001e8:	4813      	ldr	r0, [pc, #76]	; (8000238 <KeyInputHandler1+0xec>)
 80001ea:	f001 fb26 	bl	800183a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_B2_GPIO_Port, EN_B2_Pin, GPIO_PIN_SET);
 80001ee:	2201      	movs	r2, #1
 80001f0:	2140      	movs	r1, #64	; 0x40
 80001f2:	4813      	ldr	r0, [pc, #76]	; (8000240 <KeyInputHandler1+0xf4>)
 80001f4:	f001 fb21 	bl	800183a <HAL_GPIO_WritePin>
		break;
 80001f8:	e017      	b.n	800022a <KeyInputHandler1+0xde>
	}
	case 3:{
		HAL_GPIO_WritePin(EN_B1_GPIO_Port, EN_B1_Pin, GPIO_PIN_RESET);
 80001fa:	2200      	movs	r2, #0
 80001fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000200:	480d      	ldr	r0, [pc, #52]	; (8000238 <KeyInputHandler1+0xec>)
 8000202:	f001 fb1a 	bl	800183a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_B2_GPIO_Port, EN_B2_Pin, GPIO_PIN_RESET);
 8000206:	2200      	movs	r2, #0
 8000208:	2140      	movs	r1, #64	; 0x40
 800020a:	480d      	ldr	r0, [pc, #52]	; (8000240 <KeyInputHandler1+0xf4>)
 800020c:	f001 fb15 	bl	800183a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(EN_A1_GPIO_Port, EN_A1_Pin, GPIO_PIN_SET);
 8000210:	2201      	movs	r2, #1
 8000212:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000216:	4808      	ldr	r0, [pc, #32]	; (8000238 <KeyInputHandler1+0xec>)
 8000218:	f001 fb0f 	bl	800183a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_A2_GPIO_Port, EN_A2_Pin, GPIO_PIN_SET);
 800021c:	2201      	movs	r2, #1
 800021e:	2180      	movs	r1, #128	; 0x80
 8000220:	4806      	ldr	r0, [pc, #24]	; (800023c <KeyInputHandler1+0xf0>)
 8000222:	f001 fb0a 	bl	800183a <HAL_GPIO_WritePin>
		break;
 8000226:	e000      	b.n	800022a <KeyInputHandler1+0xde>
	}
	default:{
		break;
 8000228:	bf00      	nop
	}
	}
}
 800022a:	bf00      	nop
 800022c:	bd80      	pop	{r7, pc}
 800022e:	bf00      	nop
 8000230:	200000e8 	.word	0x200000e8
 8000234:	20000104 	.word	0x20000104
 8000238:	40010800 	.word	0x40010800
 800023c:	40011000 	.word	0x40011000
 8000240:	40010c00 	.word	0x40010c00

08000244 <LongKeyInputHandler1>:
void LongKeyInputHandler1(){
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
	KeyInputHandler1();
 8000248:	f7ff ff80 	bl	800014c <KeyInputHandler1>
}
 800024c:	bf00      	nop
 800024e:	bd80      	pop	{r7, pc}

08000250 <getKeyInput1>:

void getKeyInput1(){
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0

	KeyReg0 = KeyReg1;
 8000254:	4b21      	ldr	r3, [pc, #132]	; (80002dc <getKeyInput1+0x8c>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	4a21      	ldr	r2, [pc, #132]	; (80002e0 <getKeyInput1+0x90>)
 800025a:	6013      	str	r3, [r2, #0]
	KeyReg1 = KeyReg2;
 800025c:	4b21      	ldr	r3, [pc, #132]	; (80002e4 <getKeyInput1+0x94>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	4a1e      	ldr	r2, [pc, #120]	; (80002dc <getKeyInput1+0x8c>)
 8000262:	6013      	str	r3, [r2, #0]
	KeyReg2 = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 8000264:	2108      	movs	r1, #8
 8000266:	4820      	ldr	r0, [pc, #128]	; (80002e8 <getKeyInput1+0x98>)
 8000268:	f001 fad0 	bl	800180c <HAL_GPIO_ReadPin>
 800026c:	4603      	mov	r3, r0
 800026e:	461a      	mov	r2, r3
 8000270:	4b1c      	ldr	r3, [pc, #112]	; (80002e4 <getKeyInput1+0x94>)
 8000272:	601a      	str	r2, [r3, #0]
	if((KeyReg0 == KeyReg1) && (KeyReg1 == KeyReg2)){
 8000274:	4b1a      	ldr	r3, [pc, #104]	; (80002e0 <getKeyInput1+0x90>)
 8000276:	681a      	ldr	r2, [r3, #0]
 8000278:	4b18      	ldr	r3, [pc, #96]	; (80002dc <getKeyInput1+0x8c>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	429a      	cmp	r2, r3
 800027e:	d12b      	bne.n	80002d8 <getKeyInput1+0x88>
 8000280:	4b16      	ldr	r3, [pc, #88]	; (80002dc <getKeyInput1+0x8c>)
 8000282:	681a      	ldr	r2, [r3, #0]
 8000284:	4b17      	ldr	r3, [pc, #92]	; (80002e4 <getKeyInput1+0x94>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	429a      	cmp	r2, r3
 800028a:	d125      	bne.n	80002d8 <getKeyInput1+0x88>
		if(KeyReg3 != KeyReg2){
 800028c:	4b17      	ldr	r3, [pc, #92]	; (80002ec <getKeyInput1+0x9c>)
 800028e:	681a      	ldr	r2, [r3, #0]
 8000290:	4b14      	ldr	r3, [pc, #80]	; (80002e4 <getKeyInput1+0x94>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	429a      	cmp	r2, r3
 8000296:	d00d      	beq.n	80002b4 <getKeyInput1+0x64>
			KeyReg3 = KeyReg2;
 8000298:	4b12      	ldr	r3, [pc, #72]	; (80002e4 <getKeyInput1+0x94>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4a13      	ldr	r2, [pc, #76]	; (80002ec <getKeyInput1+0x9c>)
 800029e:	6013      	str	r3, [r2, #0]
			if(KeyReg2 == PRESSED_STATE){
 80002a0:	4b10      	ldr	r3, [pc, #64]	; (80002e4 <getKeyInput1+0x94>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d117      	bne.n	80002d8 <getKeyInput1+0x88>
				KeyInputHandler1();
 80002a8:	f7ff ff50 	bl	800014c <KeyInputHandler1>
				TimerForKeyPress = 200;
 80002ac:	4b10      	ldr	r3, [pc, #64]	; (80002f0 <getKeyInput1+0xa0>)
 80002ae:	22c8      	movs	r2, #200	; 0xc8
 80002b0:	601a      	str	r2, [r3, #0]
				}
				TimerForKeyPress = 200;
			}
		}
	}
}
 80002b2:	e011      	b.n	80002d8 <getKeyInput1+0x88>
			TimerForKeyPress--;
 80002b4:	4b0e      	ldr	r3, [pc, #56]	; (80002f0 <getKeyInput1+0xa0>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	3b01      	subs	r3, #1
 80002ba:	4a0d      	ldr	r2, [pc, #52]	; (80002f0 <getKeyInput1+0xa0>)
 80002bc:	6013      	str	r3, [r2, #0]
			if(TimerForKeyPress == 0){
 80002be:	4b0c      	ldr	r3, [pc, #48]	; (80002f0 <getKeyInput1+0xa0>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d108      	bne.n	80002d8 <getKeyInput1+0x88>
				if(KeyReg2 == PRESSED_STATE){
 80002c6:	4b07      	ldr	r3, [pc, #28]	; (80002e4 <getKeyInput1+0x94>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d101      	bne.n	80002d2 <getKeyInput1+0x82>
					LongKeyInputHandler1();
 80002ce:	f7ff ffb9 	bl	8000244 <LongKeyInputHandler1>
				TimerForKeyPress = 200;
 80002d2:	4b07      	ldr	r3, [pc, #28]	; (80002f0 <getKeyInput1+0xa0>)
 80002d4:	22c8      	movs	r2, #200	; 0xc8
 80002d6:	601a      	str	r2, [r3, #0]
}
 80002d8:	bf00      	nop
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	20000004 	.word	0x20000004
 80002e0:	20000000 	.word	0x20000000
 80002e4:	20000008 	.word	0x20000008
 80002e8:	40010c00 	.word	0x40010c00
 80002ec:	2000000c 	.word	0x2000000c
 80002f0:	20000010 	.word	0x20000010

080002f4 <updateTempValue>:
static int KeyReg2 = NORMAL_STATE;
static int KeyReg3 = NORMAL_STATE; // previous

static int TimerForKeyPress = 100;

void updateTempValue(int increment) {
 80002f4:	b480      	push	{r7}
 80002f6:	b083      	sub	sp, #12
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
	if (mode){
 80002fc:	4b13      	ldr	r3, [pc, #76]	; (800034c <updateTempValue+0x58>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d01d      	beq.n	8000340 <updateTempValue+0x4c>
		temp[mode - 1] += increment;
 8000304:	4b11      	ldr	r3, [pc, #68]	; (800034c <updateTempValue+0x58>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	3b01      	subs	r3, #1
 800030a:	4a11      	ldr	r2, [pc, #68]	; (8000350 <updateTempValue+0x5c>)
 800030c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000310:	4b0e      	ldr	r3, [pc, #56]	; (800034c <updateTempValue+0x58>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	3b01      	subs	r3, #1
 8000316:	687a      	ldr	r2, [r7, #4]
 8000318:	440a      	add	r2, r1
 800031a:	490d      	ldr	r1, [pc, #52]	; (8000350 <updateTempValue+0x5c>)
 800031c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (temp[mode - 1] > 99000) {
 8000320:	4b0a      	ldr	r3, [pc, #40]	; (800034c <updateTempValue+0x58>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	3b01      	subs	r3, #1
 8000326:	4a0a      	ldr	r2, [pc, #40]	; (8000350 <updateTempValue+0x5c>)
 8000328:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800032c:	4a09      	ldr	r2, [pc, #36]	; (8000354 <updateTempValue+0x60>)
 800032e:	4293      	cmp	r3, r2
 8000330:	dd06      	ble.n	8000340 <updateTempValue+0x4c>
			temp[mode - 1] = 0;
 8000332:	4b06      	ldr	r3, [pc, #24]	; (800034c <updateTempValue+0x58>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	3b01      	subs	r3, #1
 8000338:	4a05      	ldr	r2, [pc, #20]	; (8000350 <updateTempValue+0x5c>)
 800033a:	2100      	movs	r1, #0
 800033c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
	}
}
 8000340:	bf00      	nop
 8000342:	370c      	adds	r7, #12
 8000344:	46bd      	mov	sp, r7
 8000346:	bc80      	pop	{r7}
 8000348:	4770      	bx	lr
 800034a:	bf00      	nop
 800034c:	200000e8 	.word	0x200000e8
 8000350:	2000003c 	.word	0x2000003c
 8000354:	000182b8 	.word	0x000182b8

08000358 <KeyInputHandler2>:

void KeyInputHandler2() {
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
    updateTempValue(1000); // Handle short press
 800035c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000360:	f7ff ffc8 	bl	80002f4 <updateTempValue>
}
 8000364:	bf00      	nop
 8000366:	bd80      	pop	{r7, pc}

08000368 <LongKeyInputHandler2>:

void LongKeyInputHandler2() {
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
    updateTempValue(5000); // Handle long press
 800036c:	f241 3088 	movw	r0, #5000	; 0x1388
 8000370:	f7ff ffc0 	bl	80002f4 <updateTempValue>
}
 8000374:	bf00      	nop
 8000376:	bd80      	pop	{r7, pc}

08000378 <getKeyInput2>:

void getKeyInput2() {
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
    KeyReg0 = KeyReg1;
 800037c:	4b21      	ldr	r3, [pc, #132]	; (8000404 <getKeyInput2+0x8c>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	4a21      	ldr	r2, [pc, #132]	; (8000408 <getKeyInput2+0x90>)
 8000382:	6013      	str	r3, [r2, #0]
    KeyReg1 = KeyReg2;
 8000384:	4b21      	ldr	r3, [pc, #132]	; (800040c <getKeyInput2+0x94>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4a1e      	ldr	r2, [pc, #120]	; (8000404 <getKeyInput2+0x8c>)
 800038a:	6013      	str	r3, [r2, #0]
    KeyReg2 = HAL_GPIO_ReadPin(B2_GPIO_Port, B2_Pin);
 800038c:	2120      	movs	r1, #32
 800038e:	4820      	ldr	r0, [pc, #128]	; (8000410 <getKeyInput2+0x98>)
 8000390:	f001 fa3c 	bl	800180c <HAL_GPIO_ReadPin>
 8000394:	4603      	mov	r3, r0
 8000396:	461a      	mov	r2, r3
 8000398:	4b1c      	ldr	r3, [pc, #112]	; (800040c <getKeyInput2+0x94>)
 800039a:	601a      	str	r2, [r3, #0]

    if ((KeyReg0 == KeyReg1) && (KeyReg1 == KeyReg2)) { // Debounced state
 800039c:	4b1a      	ldr	r3, [pc, #104]	; (8000408 <getKeyInput2+0x90>)
 800039e:	681a      	ldr	r2, [r3, #0]
 80003a0:	4b18      	ldr	r3, [pc, #96]	; (8000404 <getKeyInput2+0x8c>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	429a      	cmp	r2, r3
 80003a6:	d12b      	bne.n	8000400 <getKeyInput2+0x88>
 80003a8:	4b16      	ldr	r3, [pc, #88]	; (8000404 <getKeyInput2+0x8c>)
 80003aa:	681a      	ldr	r2, [r3, #0]
 80003ac:	4b17      	ldr	r3, [pc, #92]	; (800040c <getKeyInput2+0x94>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	429a      	cmp	r2, r3
 80003b2:	d125      	bne.n	8000400 <getKeyInput2+0x88>
        if (KeyReg3 != KeyReg2) {
 80003b4:	4b17      	ldr	r3, [pc, #92]	; (8000414 <getKeyInput2+0x9c>)
 80003b6:	681a      	ldr	r2, [r3, #0]
 80003b8:	4b14      	ldr	r3, [pc, #80]	; (800040c <getKeyInput2+0x94>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	429a      	cmp	r2, r3
 80003be:	d00d      	beq.n	80003dc <getKeyInput2+0x64>
            KeyReg3 = KeyReg2;
 80003c0:	4b12      	ldr	r3, [pc, #72]	; (800040c <getKeyInput2+0x94>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	4a13      	ldr	r2, [pc, #76]	; (8000414 <getKeyInput2+0x9c>)
 80003c6:	6013      	str	r3, [r2, #0]
            if (KeyReg2 == PRESSED_STATE) {
 80003c8:	4b10      	ldr	r3, [pc, #64]	; (800040c <getKeyInput2+0x94>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d117      	bne.n	8000400 <getKeyInput2+0x88>
                KeyInputHandler2();
 80003d0:	f7ff ffc2 	bl	8000358 <KeyInputHandler2>
                TimerForKeyPress = 100; // Reset timer for long press
 80003d4:	4b10      	ldr	r3, [pc, #64]	; (8000418 <getKeyInput2+0xa0>)
 80003d6:	2264      	movs	r2, #100	; 0x64
 80003d8:	601a      	str	r2, [r3, #0]
                LongKeyInputHandler2(); // Trigger long press action
                TimerForKeyPress = 100; // Reset timer after long press
            }
        }
    }
}
 80003da:	e011      	b.n	8000400 <getKeyInput2+0x88>
        } else if (KeyReg2 == PRESSED_STATE) { // Button still pressed
 80003dc:	4b0b      	ldr	r3, [pc, #44]	; (800040c <getKeyInput2+0x94>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d10d      	bne.n	8000400 <getKeyInput2+0x88>
            TimerForKeyPress--;
 80003e4:	4b0c      	ldr	r3, [pc, #48]	; (8000418 <getKeyInput2+0xa0>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	3b01      	subs	r3, #1
 80003ea:	4a0b      	ldr	r2, [pc, #44]	; (8000418 <getKeyInput2+0xa0>)
 80003ec:	6013      	str	r3, [r2, #0]
            if (TimerForKeyPress == 0) {
 80003ee:	4b0a      	ldr	r3, [pc, #40]	; (8000418 <getKeyInput2+0xa0>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d104      	bne.n	8000400 <getKeyInput2+0x88>
                LongKeyInputHandler2(); // Trigger long press action
 80003f6:	f7ff ffb7 	bl	8000368 <LongKeyInputHandler2>
                TimerForKeyPress = 100; // Reset timer after long press
 80003fa:	4b07      	ldr	r3, [pc, #28]	; (8000418 <getKeyInput2+0xa0>)
 80003fc:	2264      	movs	r2, #100	; 0x64
 80003fe:	601a      	str	r2, [r3, #0]
}
 8000400:	bf00      	nop
 8000402:	bd80      	pop	{r7, pc}
 8000404:	20000018 	.word	0x20000018
 8000408:	20000014 	.word	0x20000014
 800040c:	2000001c 	.word	0x2000001c
 8000410:	40010c00 	.word	0x40010c00
 8000414:	20000020 	.word	0x20000020
 8000418:	20000024 	.word	0x20000024

0800041c <KeyInputHandler3>:
static int KeyReg3 = NORMAL_STATE;

static int TimerForKeyPress = 200;


void KeyInputHandler3(){
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
	if(mode == 1){
 8000420:	4b28      	ldr	r3, [pc, #160]	; (80004c4 <KeyInputHandler3+0xa8>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	2b01      	cmp	r3, #1
 8000426:	d113      	bne.n	8000450 <KeyInputHandler3+0x34>
		redTime = temp[mode-1];
 8000428:	4b26      	ldr	r3, [pc, #152]	; (80004c4 <KeyInputHandler3+0xa8>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	3b01      	subs	r3, #1
 800042e:	4a26      	ldr	r2, [pc, #152]	; (80004c8 <KeyInputHandler3+0xac>)
 8000430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000434:	4a25      	ldr	r2, [pc, #148]	; (80004cc <KeyInputHandler3+0xb0>)
 8000436:	6013      	str	r3, [r2, #0]
		greenTime = redTime - yellowTime;
 8000438:	4b24      	ldr	r3, [pc, #144]	; (80004cc <KeyInputHandler3+0xb0>)
 800043a:	681a      	ldr	r2, [r3, #0]
 800043c:	4b24      	ldr	r3, [pc, #144]	; (80004d0 <KeyInputHandler3+0xb4>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	1ad3      	subs	r3, r2, r3
 8000442:	4a24      	ldr	r2, [pc, #144]	; (80004d4 <KeyInputHandler3+0xb8>)
 8000444:	6013      	str	r3, [r2, #0]
		temp[2] = greenTime;
 8000446:	4b23      	ldr	r3, [pc, #140]	; (80004d4 <KeyInputHandler3+0xb8>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	4a1f      	ldr	r2, [pc, #124]	; (80004c8 <KeyInputHandler3+0xac>)
 800044c:	6093      	str	r3, [r2, #8]
 800044e:	e02e      	b.n	80004ae <KeyInputHandler3+0x92>
	}
	else if(mode == 2){
 8000450:	4b1c      	ldr	r3, [pc, #112]	; (80004c4 <KeyInputHandler3+0xa8>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	2b02      	cmp	r3, #2
 8000456:	d113      	bne.n	8000480 <KeyInputHandler3+0x64>
		yellowTime = temp[mode-1];
 8000458:	4b1a      	ldr	r3, [pc, #104]	; (80004c4 <KeyInputHandler3+0xa8>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	3b01      	subs	r3, #1
 800045e:	4a1a      	ldr	r2, [pc, #104]	; (80004c8 <KeyInputHandler3+0xac>)
 8000460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000464:	4a1a      	ldr	r2, [pc, #104]	; (80004d0 <KeyInputHandler3+0xb4>)
 8000466:	6013      	str	r3, [r2, #0]
		redTime = yellowTime+greenTime;
 8000468:	4b19      	ldr	r3, [pc, #100]	; (80004d0 <KeyInputHandler3+0xb4>)
 800046a:	681a      	ldr	r2, [r3, #0]
 800046c:	4b19      	ldr	r3, [pc, #100]	; (80004d4 <KeyInputHandler3+0xb8>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	4413      	add	r3, r2
 8000472:	4a16      	ldr	r2, [pc, #88]	; (80004cc <KeyInputHandler3+0xb0>)
 8000474:	6013      	str	r3, [r2, #0]
		temp[0] = redTime;
 8000476:	4b15      	ldr	r3, [pc, #84]	; (80004cc <KeyInputHandler3+0xb0>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	4a13      	ldr	r2, [pc, #76]	; (80004c8 <KeyInputHandler3+0xac>)
 800047c:	6013      	str	r3, [r2, #0]
 800047e:	e016      	b.n	80004ae <KeyInputHandler3+0x92>
	}
	else if(mode == 3){
 8000480:	4b10      	ldr	r3, [pc, #64]	; (80004c4 <KeyInputHandler3+0xa8>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	2b03      	cmp	r3, #3
 8000486:	d112      	bne.n	80004ae <KeyInputHandler3+0x92>
		greenTime = temp[mode-1];
 8000488:	4b0e      	ldr	r3, [pc, #56]	; (80004c4 <KeyInputHandler3+0xa8>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	3b01      	subs	r3, #1
 800048e:	4a0e      	ldr	r2, [pc, #56]	; (80004c8 <KeyInputHandler3+0xac>)
 8000490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000494:	4a0f      	ldr	r2, [pc, #60]	; (80004d4 <KeyInputHandler3+0xb8>)
 8000496:	6013      	str	r3, [r2, #0]
		redTime = yellowTime+greenTime;
 8000498:	4b0d      	ldr	r3, [pc, #52]	; (80004d0 <KeyInputHandler3+0xb4>)
 800049a:	681a      	ldr	r2, [r3, #0]
 800049c:	4b0d      	ldr	r3, [pc, #52]	; (80004d4 <KeyInputHandler3+0xb8>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	4413      	add	r3, r2
 80004a2:	4a0a      	ldr	r2, [pc, #40]	; (80004cc <KeyInputHandler3+0xb0>)
 80004a4:	6013      	str	r3, [r2, #0]
		temp[0] = redTime;
 80004a6:	4b09      	ldr	r3, [pc, #36]	; (80004cc <KeyInputHandler3+0xb0>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	4a07      	ldr	r2, [pc, #28]	; (80004c8 <KeyInputHandler3+0xac>)
 80004ac:	6013      	str	r3, [r2, #0]
	}
	if (mode) {
 80004ae:	4b05      	ldr	r3, [pc, #20]	; (80004c4 <KeyInputHandler3+0xa8>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d004      	beq.n	80004c0 <KeyInputHandler3+0xa4>
		init();
 80004b6:	f000 fa31 	bl	800091c <init>
		mode = 0;
 80004ba:	4b02      	ldr	r3, [pc, #8]	; (80004c4 <KeyInputHandler3+0xa8>)
 80004bc:	2200      	movs	r2, #0
 80004be:	601a      	str	r2, [r3, #0]
	}
}
 80004c0:	bf00      	nop
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	200000e8 	.word	0x200000e8
 80004c8:	2000003c 	.word	0x2000003c
 80004cc:	2000004c 	.word	0x2000004c
 80004d0:	20000050 	.word	0x20000050
 80004d4:	20000054 	.word	0x20000054

080004d8 <LongKeyInputHandler3>:
void LongKeyInputHandler3(){
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	KeyInputHandler3();
 80004dc:	f7ff ff9e 	bl	800041c <KeyInputHandler3>
}
 80004e0:	bf00      	nop
 80004e2:	bd80      	pop	{r7, pc}

080004e4 <getKeyInput3>:

void getKeyInput3(){
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
	KeyReg0 = KeyReg1;
 80004e8:	4b21      	ldr	r3, [pc, #132]	; (8000570 <getKeyInput3+0x8c>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a21      	ldr	r2, [pc, #132]	; (8000574 <getKeyInput3+0x90>)
 80004ee:	6013      	str	r3, [r2, #0]
	KeyReg1 = KeyReg2;
 80004f0:	4b21      	ldr	r3, [pc, #132]	; (8000578 <getKeyInput3+0x94>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a1e      	ldr	r2, [pc, #120]	; (8000570 <getKeyInput3+0x8c>)
 80004f6:	6013      	str	r3, [r2, #0]
	KeyReg2 = HAL_GPIO_ReadPin(B3_GPIO_Port, B3_Pin);
 80004f8:	2110      	movs	r1, #16
 80004fa:	4820      	ldr	r0, [pc, #128]	; (800057c <getKeyInput3+0x98>)
 80004fc:	f001 f986 	bl	800180c <HAL_GPIO_ReadPin>
 8000500:	4603      	mov	r3, r0
 8000502:	461a      	mov	r2, r3
 8000504:	4b1c      	ldr	r3, [pc, #112]	; (8000578 <getKeyInput3+0x94>)
 8000506:	601a      	str	r2, [r3, #0]
	if((KeyReg0 == KeyReg1) && (KeyReg1 == KeyReg2)){
 8000508:	4b1a      	ldr	r3, [pc, #104]	; (8000574 <getKeyInput3+0x90>)
 800050a:	681a      	ldr	r2, [r3, #0]
 800050c:	4b18      	ldr	r3, [pc, #96]	; (8000570 <getKeyInput3+0x8c>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	429a      	cmp	r2, r3
 8000512:	d12b      	bne.n	800056c <getKeyInput3+0x88>
 8000514:	4b16      	ldr	r3, [pc, #88]	; (8000570 <getKeyInput3+0x8c>)
 8000516:	681a      	ldr	r2, [r3, #0]
 8000518:	4b17      	ldr	r3, [pc, #92]	; (8000578 <getKeyInput3+0x94>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	429a      	cmp	r2, r3
 800051e:	d125      	bne.n	800056c <getKeyInput3+0x88>
		if(KeyReg3 != KeyReg2){
 8000520:	4b17      	ldr	r3, [pc, #92]	; (8000580 <getKeyInput3+0x9c>)
 8000522:	681a      	ldr	r2, [r3, #0]
 8000524:	4b14      	ldr	r3, [pc, #80]	; (8000578 <getKeyInput3+0x94>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	429a      	cmp	r2, r3
 800052a:	d00d      	beq.n	8000548 <getKeyInput3+0x64>
			KeyReg3 = KeyReg2;
 800052c:	4b12      	ldr	r3, [pc, #72]	; (8000578 <getKeyInput3+0x94>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a13      	ldr	r2, [pc, #76]	; (8000580 <getKeyInput3+0x9c>)
 8000532:	6013      	str	r3, [r2, #0]
			if(KeyReg2 == PRESSED_STATE){
 8000534:	4b10      	ldr	r3, [pc, #64]	; (8000578 <getKeyInput3+0x94>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d117      	bne.n	800056c <getKeyInput3+0x88>
				KeyInputHandler3();
 800053c:	f7ff ff6e 	bl	800041c <KeyInputHandler3>
				TimerForKeyPress = 200;
 8000540:	4b10      	ldr	r3, [pc, #64]	; (8000584 <getKeyInput3+0xa0>)
 8000542:	22c8      	movs	r2, #200	; 0xc8
 8000544:	601a      	str	r2, [r3, #0]
				}
				TimerForKeyPress = 200;
			}
		}
	}
}
 8000546:	e011      	b.n	800056c <getKeyInput3+0x88>
			TimerForKeyPress--;
 8000548:	4b0e      	ldr	r3, [pc, #56]	; (8000584 <getKeyInput3+0xa0>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	3b01      	subs	r3, #1
 800054e:	4a0d      	ldr	r2, [pc, #52]	; (8000584 <getKeyInput3+0xa0>)
 8000550:	6013      	str	r3, [r2, #0]
			if(TimerForKeyPress == 0){
 8000552:	4b0c      	ldr	r3, [pc, #48]	; (8000584 <getKeyInput3+0xa0>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	2b00      	cmp	r3, #0
 8000558:	d108      	bne.n	800056c <getKeyInput3+0x88>
				if(KeyReg2 == PRESSED_STATE){
 800055a:	4b07      	ldr	r3, [pc, #28]	; (8000578 <getKeyInput3+0x94>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	2b00      	cmp	r3, #0
 8000560:	d101      	bne.n	8000566 <getKeyInput3+0x82>
					LongKeyInputHandler3();
 8000562:	f7ff ffb9 	bl	80004d8 <LongKeyInputHandler3>
				TimerForKeyPress = 200;
 8000566:	4b07      	ldr	r3, [pc, #28]	; (8000584 <getKeyInput3+0xa0>)
 8000568:	22c8      	movs	r2, #200	; 0xc8
 800056a:	601a      	str	r2, [r3, #0]
}
 800056c:	bf00      	nop
 800056e:	bd80      	pop	{r7, pc}
 8000570:	2000002c 	.word	0x2000002c
 8000574:	20000028 	.word	0x20000028
 8000578:	20000030 	.word	0x20000030
 800057c:	40010c00 	.word	0x40010c00
 8000580:	20000034 	.word	0x20000034
 8000584:	20000038 	.word	0x20000038

08000588 <displayContent>:
int mode = 0;
int curState = 0;
int curSideState = 1;


void displayContent() {
 8000588:	b580      	push	{r7, lr}
 800058a:	b08a      	sub	sp, #40	; 0x28
 800058c:	af00      	add	r7, sp, #0
    lcd_clear_display();
 800058e:	f000 fabe 	bl	8000b0e <lcd_clear_display>
    HAL_Delay(10);
 8000592:	200a      	movs	r0, #10
 8000594:	f000 fe84 	bl	80012a0 <HAL_Delay>

    if (mode == 0) {
 8000598:	4b35      	ldr	r3, [pc, #212]	; (8000670 <displayContent+0xe8>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d138      	bne.n	8000612 <displayContent+0x8a>
        int temp_main = timer_counter / 100;
 80005a0:	4b34      	ldr	r3, [pc, #208]	; (8000674 <displayContent+0xec>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a34      	ldr	r2, [pc, #208]	; (8000678 <displayContent+0xf0>)
 80005a6:	fb82 1203 	smull	r1, r2, r2, r3
 80005aa:	1152      	asrs	r2, r2, #5
 80005ac:	17db      	asrs	r3, r3, #31
 80005ae:	1ad3      	subs	r3, r2, r3
 80005b0:	627b      	str	r3, [r7, #36]	; 0x24
        int temp_side = timer_counter_side / 100;
 80005b2:	4b32      	ldr	r3, [pc, #200]	; (800067c <displayContent+0xf4>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4a30      	ldr	r2, [pc, #192]	; (8000678 <displayContent+0xf0>)
 80005b8:	fb82 1203 	smull	r1, r2, r2, r3
 80005bc:	1152      	asrs	r2, r2, #5
 80005be:	17db      	asrs	r3, r3, #31
 80005c0:	1ad3      	subs	r3, r2, r3
 80005c2:	623b      	str	r3, [r7, #32]

        lcd_goto_XY(1, 0);
 80005c4:	2100      	movs	r1, #0
 80005c6:	2001      	movs	r0, #1
 80005c8:	f000 faa8 	bl	8000b1c <lcd_goto_XY>
        lcd_send_string("Main: ");
 80005cc:	482c      	ldr	r0, [pc, #176]	; (8000680 <displayContent+0xf8>)
 80005ce:	f000 fa89 	bl	8000ae4 <lcd_send_string>
        char mainTimeStr[7];
        snprintf(mainTimeStr, sizeof(mainTimeStr), "%d", temp_main);
 80005d2:	f107 0018 	add.w	r0, r7, #24
 80005d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005d8:	4a2a      	ldr	r2, [pc, #168]	; (8000684 <displayContent+0xfc>)
 80005da:	2107      	movs	r1, #7
 80005dc:	f002 fe18 	bl	8003210 <sniprintf>
        lcd_send_string(mainTimeStr);
 80005e0:	f107 0318 	add.w	r3, r7, #24
 80005e4:	4618      	mov	r0, r3
 80005e6:	f000 fa7d 	bl	8000ae4 <lcd_send_string>

        lcd_goto_XY(2, 0);
 80005ea:	2100      	movs	r1, #0
 80005ec:	2002      	movs	r0, #2
 80005ee:	f000 fa95 	bl	8000b1c <lcd_goto_XY>
        lcd_send_string("Side: ");
 80005f2:	4825      	ldr	r0, [pc, #148]	; (8000688 <displayContent+0x100>)
 80005f4:	f000 fa76 	bl	8000ae4 <lcd_send_string>
        char sideTimeStr[7];
        snprintf(sideTimeStr, sizeof(sideTimeStr), "%d", temp_side);
 80005f8:	f107 0010 	add.w	r0, r7, #16
 80005fc:	6a3b      	ldr	r3, [r7, #32]
 80005fe:	4a21      	ldr	r2, [pc, #132]	; (8000684 <displayContent+0xfc>)
 8000600:	2107      	movs	r1, #7
 8000602:	f002 fe05 	bl	8003210 <sniprintf>
        lcd_send_string(sideTimeStr);
 8000606:	f107 0310 	add.w	r3, r7, #16
 800060a:	4618      	mov	r0, r3
 800060c:	f000 fa6a 	bl	8000ae4 <lcd_send_string>
        lcd_send_string("Duration: ");
        char durationStr[7];
        snprintf(durationStr, sizeof(durationStr), "%d", temp[mode - 1]);
        lcd_send_string(durationStr);
    }
}
 8000610:	e029      	b.n	8000666 <displayContent+0xde>
        lcd_goto_XY(1, 0);
 8000612:	2100      	movs	r1, #0
 8000614:	2001      	movs	r0, #1
 8000616:	f000 fa81 	bl	8000b1c <lcd_goto_XY>
        lcd_send_string("Mode: ");
 800061a:	481c      	ldr	r0, [pc, #112]	; (800068c <displayContent+0x104>)
 800061c:	f000 fa62 	bl	8000ae4 <lcd_send_string>
        snprintf(modeStr, sizeof(modeStr), "%d", mode);
 8000620:	4b13      	ldr	r3, [pc, #76]	; (8000670 <displayContent+0xe8>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f107 000c 	add.w	r0, r7, #12
 8000628:	4a16      	ldr	r2, [pc, #88]	; (8000684 <displayContent+0xfc>)
 800062a:	2103      	movs	r1, #3
 800062c:	f002 fdf0 	bl	8003210 <sniprintf>
        lcd_send_string(modeStr);
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	4618      	mov	r0, r3
 8000636:	f000 fa55 	bl	8000ae4 <lcd_send_string>
        lcd_goto_XY(2, 0);
 800063a:	2100      	movs	r1, #0
 800063c:	2002      	movs	r0, #2
 800063e:	f000 fa6d 	bl	8000b1c <lcd_goto_XY>
        lcd_send_string("Duration: ");
 8000642:	4813      	ldr	r0, [pc, #76]	; (8000690 <displayContent+0x108>)
 8000644:	f000 fa4e 	bl	8000ae4 <lcd_send_string>
        snprintf(durationStr, sizeof(durationStr), "%d", temp[mode - 1]);
 8000648:	4b09      	ldr	r3, [pc, #36]	; (8000670 <displayContent+0xe8>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	3b01      	subs	r3, #1
 800064e:	4a11      	ldr	r2, [pc, #68]	; (8000694 <displayContent+0x10c>)
 8000650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000654:	1d38      	adds	r0, r7, #4
 8000656:	4a0b      	ldr	r2, [pc, #44]	; (8000684 <displayContent+0xfc>)
 8000658:	2107      	movs	r1, #7
 800065a:	f002 fdd9 	bl	8003210 <sniprintf>
        lcd_send_string(durationStr);
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	4618      	mov	r0, r3
 8000662:	f000 fa3f 	bl	8000ae4 <lcd_send_string>
}
 8000666:	bf00      	nop
 8000668:	3728      	adds	r7, #40	; 0x28
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	200000e8 	.word	0x200000e8
 8000674:	200000f0 	.word	0x200000f0
 8000678:	51eb851f 	.word	0x51eb851f
 800067c:	200000f8 	.word	0x200000f8
 8000680:	08003ac4 	.word	0x08003ac4
 8000684:	08003acc 	.word	0x08003acc
 8000688:	08003ad0 	.word	0x08003ad0
 800068c:	08003ad8 	.word	0x08003ad8
 8000690:	08003ae0 	.word	0x08003ae0
 8000694:	2000003c 	.word	0x2000003c

08000698 <fsm_run>:

void fsm_run(){
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
	switch(mode){
 800069c:	4b93      	ldr	r3, [pc, #588]	; (80008ec <fsm_run+0x254>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	2b03      	cmp	r3, #3
 80006a2:	f200 8118 	bhi.w	80008d6 <fsm_run+0x23e>
 80006a6:	a201      	add	r2, pc, #4	; (adr r2, 80006ac <fsm_run+0x14>)
 80006a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ac:	080006bd 	.word	0x080006bd
 80006b0:	08000815 	.word	0x08000815
 80006b4:	08000853 	.word	0x08000853
 80006b8:	08000895 	.word	0x08000895
	case 0:{
		if (display_timer_flag) {
 80006bc:	4b8c      	ldr	r3, [pc, #560]	; (80008f0 <fsm_run+0x258>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d007      	beq.n	80006d4 <fsm_run+0x3c>
			display_timer_flag = 0;
 80006c4:	4b8a      	ldr	r3, [pc, #552]	; (80008f0 <fsm_run+0x258>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
			setDisplayTimer(250);
 80006ca:	20fa      	movs	r0, #250	; 0xfa
 80006cc:	f000 fbe2 	bl	8000e94 <setDisplayTimer>
			displayContent();
 80006d0:	f7ff ff5a 	bl	8000588 <displayContent>
		}
		if (timer_flag) {
 80006d4:	4b87      	ldr	r3, [pc, #540]	; (80008f4 <fsm_run+0x25c>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d04c      	beq.n	8000776 <fsm_run+0xde>
			timer_flag = 0;
 80006dc:	4b85      	ldr	r3, [pc, #532]	; (80008f4 <fsm_run+0x25c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]

			switch (curState) {
 80006e2:	4b85      	ldr	r3, [pc, #532]	; (80008f8 <fsm_run+0x260>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	2b02      	cmp	r3, #2
 80006e8:	d030      	beq.n	800074c <fsm_run+0xb4>
 80006ea:	2b02      	cmp	r3, #2
 80006ec:	dc44      	bgt.n	8000778 <fsm_run+0xe0>
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d002      	beq.n	80006f8 <fsm_run+0x60>
 80006f2:	2b01      	cmp	r3, #1
 80006f4:	d015      	beq.n	8000722 <fsm_run+0x8a>
 80006f6:	e03f      	b.n	8000778 <fsm_run+0xe0>
			case 0:
				curState = 1;
 80006f8:	4b7f      	ldr	r3, [pc, #508]	; (80008f8 <fsm_run+0x260>)
 80006fa:	2201      	movs	r2, #1
 80006fc:	601a      	str	r2, [r3, #0]

				HAL_GPIO_WritePin(EN_A1_GPIO_Port, EN_A1_Pin, GPIO_PIN_SET);
 80006fe:	2201      	movs	r2, #1
 8000700:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000704:	487d      	ldr	r0, [pc, #500]	; (80008fc <fsm_run+0x264>)
 8000706:	f001 f898 	bl	800183a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN_B1_GPIO_Port, EN_B1_Pin, GPIO_PIN_RESET);
 800070a:	2200      	movs	r2, #0
 800070c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000710:	487a      	ldr	r0, [pc, #488]	; (80008fc <fsm_run+0x264>)
 8000712:	f001 f892 	bl	800183a <HAL_GPIO_WritePin>

				setTimer(greenTime);
 8000716:	4b7a      	ldr	r3, [pc, #488]	; (8000900 <fsm_run+0x268>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4618      	mov	r0, r3
 800071c:	f000 fb86 	bl	8000e2c <setTimer>
				break;
 8000720:	e02a      	b.n	8000778 <fsm_run+0xe0>

			case 1:
				curState = 2;
 8000722:	4b75      	ldr	r3, [pc, #468]	; (80008f8 <fsm_run+0x260>)
 8000724:	2202      	movs	r2, #2
 8000726:	601a      	str	r2, [r3, #0]

				HAL_GPIO_WritePin(EN_A1_GPIO_Port, EN_A1_Pin, GPIO_PIN_RESET);
 8000728:	2200      	movs	r2, #0
 800072a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800072e:	4873      	ldr	r0, [pc, #460]	; (80008fc <fsm_run+0x264>)
 8000730:	f001 f883 	bl	800183a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN_B1_GPIO_Port, EN_B1_Pin, GPIO_PIN_SET);
 8000734:	2201      	movs	r2, #1
 8000736:	f44f 7100 	mov.w	r1, #512	; 0x200
 800073a:	4870      	ldr	r0, [pc, #448]	; (80008fc <fsm_run+0x264>)
 800073c:	f001 f87d 	bl	800183a <HAL_GPIO_WritePin>

				setTimer(yellowTime);
 8000740:	4b70      	ldr	r3, [pc, #448]	; (8000904 <fsm_run+0x26c>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4618      	mov	r0, r3
 8000746:	f000 fb71 	bl	8000e2c <setTimer>
				break;
 800074a:	e015      	b.n	8000778 <fsm_run+0xe0>

			case 2:
				curState = 0;
 800074c:	4b6a      	ldr	r3, [pc, #424]	; (80008f8 <fsm_run+0x260>)
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]

				HAL_GPIO_WritePin(EN_A1_GPIO_Port, EN_A1_Pin, GPIO_PIN_SET);
 8000752:	2201      	movs	r2, #1
 8000754:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000758:	4868      	ldr	r0, [pc, #416]	; (80008fc <fsm_run+0x264>)
 800075a:	f001 f86e 	bl	800183a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN_B1_GPIO_Port, EN_B1_Pin, GPIO_PIN_SET);
 800075e:	2201      	movs	r2, #1
 8000760:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000764:	4865      	ldr	r0, [pc, #404]	; (80008fc <fsm_run+0x264>)
 8000766:	f001 f868 	bl	800183a <HAL_GPIO_WritePin>

				setTimer(redTime);
 800076a:	4b67      	ldr	r3, [pc, #412]	; (8000908 <fsm_run+0x270>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4618      	mov	r0, r3
 8000770:	f000 fb5c 	bl	8000e2c <setTimer>
				break;
 8000774:	e000      	b.n	8000778 <fsm_run+0xe0>
			}
		}
 8000776:	bf00      	nop

		if (timer_flag_side) {
 8000778:	4b64      	ldr	r3, [pc, #400]	; (800090c <fsm_run+0x274>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d047      	beq.n	8000810 <fsm_run+0x178>
			timer_flag_side = 0;
 8000780:	4b62      	ldr	r3, [pc, #392]	; (800090c <fsm_run+0x274>)
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]

			switch (curSideState) {
 8000786:	4b62      	ldr	r3, [pc, #392]	; (8000910 <fsm_run+0x278>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	2b02      	cmp	r3, #2
 800078c:	d02d      	beq.n	80007ea <fsm_run+0x152>
 800078e:	2b02      	cmp	r3, #2
 8000790:	f300 80a3 	bgt.w	80008da <fsm_run+0x242>
 8000794:	2b00      	cmp	r3, #0
 8000796:	d002      	beq.n	800079e <fsm_run+0x106>
 8000798:	2b01      	cmp	r3, #1
 800079a:	d013      	beq.n	80007c4 <fsm_run+0x12c>

				setTimerSide(redTime);
				break;
			}
		}
		break;
 800079c:	e09d      	b.n	80008da <fsm_run+0x242>
				curSideState = 1;
 800079e:	4b5c      	ldr	r3, [pc, #368]	; (8000910 <fsm_run+0x278>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(EN_A2_GPIO_Port, EN_A2_Pin, GPIO_PIN_SET);
 80007a4:	2201      	movs	r2, #1
 80007a6:	2180      	movs	r1, #128	; 0x80
 80007a8:	485a      	ldr	r0, [pc, #360]	; (8000914 <fsm_run+0x27c>)
 80007aa:	f001 f846 	bl	800183a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN_B2_GPIO_Port, EN_B2_Pin, GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	2140      	movs	r1, #64	; 0x40
 80007b2:	4859      	ldr	r0, [pc, #356]	; (8000918 <fsm_run+0x280>)
 80007b4:	f001 f841 	bl	800183a <HAL_GPIO_WritePin>
				setTimerSide(greenTime);
 80007b8:	4b51      	ldr	r3, [pc, #324]	; (8000900 <fsm_run+0x268>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4618      	mov	r0, r3
 80007be:	f000 fb4f 	bl	8000e60 <setTimerSide>
				break;
 80007c2:	e026      	b.n	8000812 <fsm_run+0x17a>
				curSideState = 2;
 80007c4:	4b52      	ldr	r3, [pc, #328]	; (8000910 <fsm_run+0x278>)
 80007c6:	2202      	movs	r2, #2
 80007c8:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(EN_A2_GPIO_Port, EN_A2_Pin, GPIO_PIN_RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2180      	movs	r1, #128	; 0x80
 80007ce:	4851      	ldr	r0, [pc, #324]	; (8000914 <fsm_run+0x27c>)
 80007d0:	f001 f833 	bl	800183a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN_B2_GPIO_Port, EN_B2_Pin, GPIO_PIN_SET);
 80007d4:	2201      	movs	r2, #1
 80007d6:	2140      	movs	r1, #64	; 0x40
 80007d8:	484f      	ldr	r0, [pc, #316]	; (8000918 <fsm_run+0x280>)
 80007da:	f001 f82e 	bl	800183a <HAL_GPIO_WritePin>
				setTimerSide(yellowTime);
 80007de:	4b49      	ldr	r3, [pc, #292]	; (8000904 <fsm_run+0x26c>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4618      	mov	r0, r3
 80007e4:	f000 fb3c 	bl	8000e60 <setTimerSide>
				break;
 80007e8:	e013      	b.n	8000812 <fsm_run+0x17a>
				curSideState = 0;
 80007ea:	4b49      	ldr	r3, [pc, #292]	; (8000910 <fsm_run+0x278>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(EN_A2_GPIO_Port, EN_A2_Pin, GPIO_PIN_SET);
 80007f0:	2201      	movs	r2, #1
 80007f2:	2180      	movs	r1, #128	; 0x80
 80007f4:	4847      	ldr	r0, [pc, #284]	; (8000914 <fsm_run+0x27c>)
 80007f6:	f001 f820 	bl	800183a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN_B2_GPIO_Port, EN_B2_Pin, GPIO_PIN_SET);
 80007fa:	2201      	movs	r2, #1
 80007fc:	2140      	movs	r1, #64	; 0x40
 80007fe:	4846      	ldr	r0, [pc, #280]	; (8000918 <fsm_run+0x280>)
 8000800:	f001 f81b 	bl	800183a <HAL_GPIO_WritePin>
				setTimerSide(redTime);
 8000804:	4b40      	ldr	r3, [pc, #256]	; (8000908 <fsm_run+0x270>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4618      	mov	r0, r3
 800080a:	f000 fb29 	bl	8000e60 <setTimerSide>
				break;
 800080e:	e000      	b.n	8000812 <fsm_run+0x17a>
		}
 8000810:	bf00      	nop
		break;
 8000812:	e062      	b.n	80008da <fsm_run+0x242>
	}
	case 1:{
		if (display_timer_flag) {
 8000814:	4b36      	ldr	r3, [pc, #216]	; (80008f0 <fsm_run+0x258>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d060      	beq.n	80008de <fsm_run+0x246>
			display_timer_flag = 0;
 800081c:	4b34      	ldr	r3, [pc, #208]	; (80008f0 <fsm_run+0x258>)
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
			setDisplayTimer(250);
 8000822:	20fa      	movs	r0, #250	; 0xfa
 8000824:	f000 fb36 	bl	8000e94 <setDisplayTimer>
			HAL_GPIO_TogglePin(EN_A1_GPIO_Port, EN_A1_Pin);
 8000828:	f44f 7180 	mov.w	r1, #256	; 0x100
 800082c:	4833      	ldr	r0, [pc, #204]	; (80008fc <fsm_run+0x264>)
 800082e:	f001 f81c 	bl	800186a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(EN_A2_GPIO_Port, EN_A2_Pin);
 8000832:	2180      	movs	r1, #128	; 0x80
 8000834:	4837      	ldr	r0, [pc, #220]	; (8000914 <fsm_run+0x27c>)
 8000836:	f001 f818 	bl	800186a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(EN_B1_GPIO_Port, EN_B1_Pin);
 800083a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800083e:	482f      	ldr	r0, [pc, #188]	; (80008fc <fsm_run+0x264>)
 8000840:	f001 f813 	bl	800186a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(EN_B2_GPIO_Port, EN_B2_Pin);
 8000844:	2140      	movs	r1, #64	; 0x40
 8000846:	4834      	ldr	r0, [pc, #208]	; (8000918 <fsm_run+0x280>)
 8000848:	f001 f80f 	bl	800186a <HAL_GPIO_TogglePin>
			displayContent();
 800084c:	f7ff fe9c 	bl	8000588 <displayContent>
		}

		break;
 8000850:	e045      	b.n	80008de <fsm_run+0x246>
	}
	case 2:{
		if (display_timer_flag) {
 8000852:	4b27      	ldr	r3, [pc, #156]	; (80008f0 <fsm_run+0x258>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d043      	beq.n	80008e2 <fsm_run+0x24a>
			display_timer_flag = 0;
 800085a:	4b25      	ldr	r3, [pc, #148]	; (80008f0 <fsm_run+0x258>)
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
			setDisplayTimer(250);
 8000860:	20fa      	movs	r0, #250	; 0xfa
 8000862:	f000 fb17 	bl	8000e94 <setDisplayTimer>
			HAL_GPIO_WritePin(EN_A1_GPIO_Port, EN_A1_Pin, GPIO_PIN_RESET);
 8000866:	2200      	movs	r2, #0
 8000868:	f44f 7180 	mov.w	r1, #256	; 0x100
 800086c:	4823      	ldr	r0, [pc, #140]	; (80008fc <fsm_run+0x264>)
 800086e:	f000 ffe4 	bl	800183a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN_A2_GPIO_Port, EN_A2_Pin, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	2180      	movs	r1, #128	; 0x80
 8000876:	4827      	ldr	r0, [pc, #156]	; (8000914 <fsm_run+0x27c>)
 8000878:	f000 ffdf 	bl	800183a <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(EN_B1_GPIO_Port, EN_B1_Pin);
 800087c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000880:	481e      	ldr	r0, [pc, #120]	; (80008fc <fsm_run+0x264>)
 8000882:	f000 fff2 	bl	800186a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(EN_B2_GPIO_Port, EN_B2_Pin);
 8000886:	2140      	movs	r1, #64	; 0x40
 8000888:	4823      	ldr	r0, [pc, #140]	; (8000918 <fsm_run+0x280>)
 800088a:	f000 ffee 	bl	800186a <HAL_GPIO_TogglePin>
			displayContent();
 800088e:	f7ff fe7b 	bl	8000588 <displayContent>
		}
		break;
 8000892:	e026      	b.n	80008e2 <fsm_run+0x24a>
	}
	case 3:{
		if (display_timer_flag) {
 8000894:	4b16      	ldr	r3, [pc, #88]	; (80008f0 <fsm_run+0x258>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d024      	beq.n	80008e6 <fsm_run+0x24e>
			display_timer_flag = 0;
 800089c:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <fsm_run+0x258>)
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
			setDisplayTimer(250);
 80008a2:	20fa      	movs	r0, #250	; 0xfa
 80008a4:	f000 faf6 	bl	8000e94 <setDisplayTimer>
			HAL_GPIO_WritePin(EN_B1_GPIO_Port, EN_B1_Pin, GPIO_PIN_RESET);
 80008a8:	2200      	movs	r2, #0
 80008aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008ae:	4813      	ldr	r0, [pc, #76]	; (80008fc <fsm_run+0x264>)
 80008b0:	f000 ffc3 	bl	800183a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN_B2_GPIO_Port, EN_B2_Pin, GPIO_PIN_RESET);
 80008b4:	2200      	movs	r2, #0
 80008b6:	2140      	movs	r1, #64	; 0x40
 80008b8:	4817      	ldr	r0, [pc, #92]	; (8000918 <fsm_run+0x280>)
 80008ba:	f000 ffbe 	bl	800183a <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(EN_A1_GPIO_Port, EN_A1_Pin);
 80008be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008c2:	480e      	ldr	r0, [pc, #56]	; (80008fc <fsm_run+0x264>)
 80008c4:	f000 ffd1 	bl	800186a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(EN_A2_GPIO_Port, EN_A2_Pin);
 80008c8:	2180      	movs	r1, #128	; 0x80
 80008ca:	4812      	ldr	r0, [pc, #72]	; (8000914 <fsm_run+0x27c>)
 80008cc:	f000 ffcd 	bl	800186a <HAL_GPIO_TogglePin>
			displayContent();
 80008d0:	f7ff fe5a 	bl	8000588 <displayContent>
		}
		break;
 80008d4:	e007      	b.n	80008e6 <fsm_run+0x24e>
	}
	default:
		break;
 80008d6:	bf00      	nop
 80008d8:	e006      	b.n	80008e8 <fsm_run+0x250>
		break;
 80008da:	bf00      	nop
 80008dc:	e004      	b.n	80008e8 <fsm_run+0x250>
		break;
 80008de:	bf00      	nop
 80008e0:	e002      	b.n	80008e8 <fsm_run+0x250>
		break;
 80008e2:	bf00      	nop
 80008e4:	e000      	b.n	80008e8 <fsm_run+0x250>
		break;
 80008e6:	bf00      	nop
	}
}
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	200000e8 	.word	0x200000e8
 80008f0:	20000104 	.word	0x20000104
 80008f4:	200000f4 	.word	0x200000f4
 80008f8:	200000ec 	.word	0x200000ec
 80008fc:	40010800 	.word	0x40010800
 8000900:	20000054 	.word	0x20000054
 8000904:	20000050 	.word	0x20000050
 8000908:	2000004c 	.word	0x2000004c
 800090c:	200000fc 	.word	0x200000fc
 8000910:	20000048 	.word	0x20000048
 8000914:	40011000 	.word	0x40011000
 8000918:	40010c00 	.word	0x40010c00

0800091c <init>:
void init() {
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN_A1_GPIO_Port, EN_A1_Pin, GPIO_PIN_RESET);
 8000920:	2200      	movs	r2, #0
 8000922:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000926:	4820      	ldr	r0, [pc, #128]	; (80009a8 <init+0x8c>)
 8000928:	f000 ff87 	bl	800183a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_A2_GPIO_Port, EN_A2_Pin, GPIO_PIN_RESET);
 800092c:	2200      	movs	r2, #0
 800092e:	2180      	movs	r1, #128	; 0x80
 8000930:	481e      	ldr	r0, [pc, #120]	; (80009ac <init+0x90>)
 8000932:	f000 ff82 	bl	800183a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(EN_B1_GPIO_Port, EN_B1_Pin, GPIO_PIN_RESET);
 8000936:	2200      	movs	r2, #0
 8000938:	f44f 7100 	mov.w	r1, #512	; 0x200
 800093c:	481a      	ldr	r0, [pc, #104]	; (80009a8 <init+0x8c>)
 800093e:	f000 ff7c 	bl	800183a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_B2_GPIO_Port, EN_B2_Pin, GPIO_PIN_RESET);
 8000942:	2200      	movs	r2, #0
 8000944:	2140      	movs	r1, #64	; 0x40
 8000946:	481a      	ldr	r0, [pc, #104]	; (80009b0 <init+0x94>)
 8000948:	f000 ff77 	bl	800183a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(EN_A1_GPIO_Port, EN_A1_Pin, GPIO_PIN_SET);
 800094c:	2201      	movs	r2, #1
 800094e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000952:	4815      	ldr	r0, [pc, #84]	; (80009a8 <init+0x8c>)
 8000954:	f000 ff71 	bl	800183a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_B1_GPIO_Port, EN_B1_Pin, GPIO_PIN_SET);
 8000958:	2201      	movs	r2, #1
 800095a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800095e:	4812      	ldr	r0, [pc, #72]	; (80009a8 <init+0x8c>)
 8000960:	f000 ff6b 	bl	800183a <HAL_GPIO_WritePin>
    setTimer(redTime);
 8000964:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <init+0x98>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4618      	mov	r0, r3
 800096a:	f000 fa5f 	bl	8000e2c <setTimer>

	HAL_GPIO_WritePin(EN_A2_GPIO_Port, EN_A2_Pin, GPIO_PIN_SET);
 800096e:	2201      	movs	r2, #1
 8000970:	2180      	movs	r1, #128	; 0x80
 8000972:	480e      	ldr	r0, [pc, #56]	; (80009ac <init+0x90>)
 8000974:	f000 ff61 	bl	800183a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_B2_GPIO_Port, EN_B2_Pin, GPIO_PIN_RESET);
 8000978:	2200      	movs	r2, #0
 800097a:	2140      	movs	r1, #64	; 0x40
 800097c:	480c      	ldr	r0, [pc, #48]	; (80009b0 <init+0x94>)
 800097e:	f000 ff5c 	bl	800183a <HAL_GPIO_WritePin>
    setTimerSide(greenTime);
 8000982:	4b0d      	ldr	r3, [pc, #52]	; (80009b8 <init+0x9c>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4618      	mov	r0, r3
 8000988:	f000 fa6a 	bl	8000e60 <setTimerSide>

    setDisplayTimer(250);
 800098c:	20fa      	movs	r0, #250	; 0xfa
 800098e:	f000 fa81 	bl	8000e94 <setDisplayTimer>

    curState = 0;
 8000992:	4b0a      	ldr	r3, [pc, #40]	; (80009bc <init+0xa0>)
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
    curSideState = 1;
 8000998:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <init+0xa4>)
 800099a:	2201      	movs	r2, #1
 800099c:	601a      	str	r2, [r3, #0]

    idx = 0;
 800099e:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <init+0xa8>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	40010800 	.word	0x40010800
 80009ac:	40011000 	.word	0x40011000
 80009b0:	40010c00 	.word	0x40010c00
 80009b4:	2000004c 	.word	0x2000004c
 80009b8:	20000054 	.word	0x20000054
 80009bc:	200000ec 	.word	0x200000ec
 80009c0:	20000048 	.word	0x20000048
 80009c4:	20000108 	.word	0x20000108

080009c8 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD (0x21 << 1) // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af02      	add	r7, sp, #8
 80009ce:	4603      	mov	r3, r0
 80009d0:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80009d2:	79fb      	ldrb	r3, [r7, #7]
 80009d4:	f023 030f 	bic.w	r3, r3, #15
 80009d8:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	011b      	lsls	r3, r3, #4
 80009de:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80009e0:	7bfb      	ldrb	r3, [r7, #15]
 80009e2:	f043 030c 	orr.w	r3, r3, #12
 80009e6:	b2db      	uxtb	r3, r3
 80009e8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80009ea:	7bfb      	ldrb	r3, [r7, #15]
 80009ec:	f043 0308 	orr.w	r3, r3, #8
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80009f4:	7bbb      	ldrb	r3, [r7, #14]
 80009f6:	f043 030c 	orr.w	r3, r3, #12
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80009fe:	7bbb      	ldrb	r3, [r7, #14]
 8000a00:	f043 0308 	orr.w	r3, r3, #8
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000a08:	f107 0208 	add.w	r2, r7, #8
 8000a0c:	2364      	movs	r3, #100	; 0x64
 8000a0e:	9300      	str	r3, [sp, #0]
 8000a10:	2304      	movs	r3, #4
 8000a12:	2142      	movs	r1, #66	; 0x42
 8000a14:	4803      	ldr	r0, [pc, #12]	; (8000a24 <lcd_send_cmd+0x5c>)
 8000a16:	f001 f885 	bl	8001b24 <HAL_I2C_Master_Transmit>
}
 8000a1a:	bf00      	nop
 8000a1c:	3710      	adds	r7, #16
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	20000118 	.word	0x20000118

08000a28 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af02      	add	r7, sp, #8
 8000a2e:	4603      	mov	r3, r0
 8000a30:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	f023 030f 	bic.w	r3, r3, #15
 8000a38:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	011b      	lsls	r3, r3, #4
 8000a3e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000a40:	7bfb      	ldrb	r3, [r7, #15]
 8000a42:	f043 030d 	orr.w	r3, r3, #13
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000a4a:	7bfb      	ldrb	r3, [r7, #15]
 8000a4c:	f043 0309 	orr.w	r3, r3, #9
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000a54:	7bbb      	ldrb	r3, [r7, #14]
 8000a56:	f043 030d 	orr.w	r3, r3, #13
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000a5e:	7bbb      	ldrb	r3, [r7, #14]
 8000a60:	f043 0309 	orr.w	r3, r3, #9
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000a68:	f107 0208 	add.w	r2, r7, #8
 8000a6c:	2364      	movs	r3, #100	; 0x64
 8000a6e:	9300      	str	r3, [sp, #0]
 8000a70:	2304      	movs	r3, #4
 8000a72:	2142      	movs	r1, #66	; 0x42
 8000a74:	4803      	ldr	r0, [pc, #12]	; (8000a84 <lcd_send_data+0x5c>)
 8000a76:	f001 f855 	bl	8001b24 <HAL_I2C_Master_Transmit>
}
 8000a7a:	bf00      	nop
 8000a7c:	3710      	adds	r7, #16
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20000118 	.word	0x20000118

08000a88 <lcd_init>:

void lcd_init (void) {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 8000a8c:	2033      	movs	r0, #51	; 0x33
 8000a8e:	f7ff ff9b 	bl	80009c8 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 8000a92:	2032      	movs	r0, #50	; 0x32
 8000a94:	f7ff ff98 	bl	80009c8 <lcd_send_cmd>
	HAL_Delay(50);
 8000a98:	2032      	movs	r0, #50	; 0x32
 8000a9a:	f000 fc01 	bl	80012a0 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 8000a9e:	2028      	movs	r0, #40	; 0x28
 8000aa0:	f7ff ff92 	bl	80009c8 <lcd_send_cmd>
	HAL_Delay(50);
 8000aa4:	2032      	movs	r0, #50	; 0x32
 8000aa6:	f000 fbfb 	bl	80012a0 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 8000aaa:	2001      	movs	r0, #1
 8000aac:	f7ff ff8c 	bl	80009c8 <lcd_send_cmd>
	HAL_Delay(50);
 8000ab0:	2032      	movs	r0, #50	; 0x32
 8000ab2:	f000 fbf5 	bl	80012a0 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 8000ab6:	2006      	movs	r0, #6
 8000ab8:	f7ff ff86 	bl	80009c8 <lcd_send_cmd>
	HAL_Delay(50);
 8000abc:	2032      	movs	r0, #50	; 0x32
 8000abe:	f000 fbef 	bl	80012a0 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */	
 8000ac2:	200c      	movs	r0, #12
 8000ac4:	f7ff ff80 	bl	80009c8 <lcd_send_cmd>
	HAL_Delay(50);
 8000ac8:	2032      	movs	r0, #50	; 0x32
 8000aca:	f000 fbe9 	bl	80012a0 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 8000ace:	2002      	movs	r0, #2
 8000ad0:	f7ff ff7a 	bl	80009c8 <lcd_send_cmd>
	HAL_Delay(50);
 8000ad4:	2032      	movs	r0, #50	; 0x32
 8000ad6:	f000 fbe3 	bl	80012a0 <HAL_Delay>
	lcd_send_cmd (0x80);
 8000ada:	2080      	movs	r0, #128	; 0x80
 8000adc:	f7ff ff74 	bl	80009c8 <lcd_send_cmd>
}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000aec:	e006      	b.n	8000afc <lcd_send_string+0x18>
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	1c5a      	adds	r2, r3, #1
 8000af2:	607a      	str	r2, [r7, #4]
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	4618      	mov	r0, r3
 8000af8:	f7ff ff96 	bl	8000a28 <lcd_send_data>
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d1f4      	bne.n	8000aee <lcd_send_string+0xa>
}
 8000b04:	bf00      	nop
 8000b06:	bf00      	nop
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <lcd_clear_display>:

void lcd_clear_display (void)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x01); //clear display
 8000b12:	2001      	movs	r0, #1
 8000b14:	f7ff ff58 	bl	80009c8 <lcd_send_cmd>
}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <lcd_goto_XY>:

void lcd_goto_XY (int row, int col)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1) 
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d108      	bne.n	8000b3e <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	b2da      	uxtb	r2, r3
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	4413      	add	r3, r2
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	337f      	adds	r3, #127	; 0x7f
 8000b3a:	73fb      	strb	r3, [r7, #15]
 8000b3c:	e008      	b.n	8000b50 <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	3340      	adds	r3, #64	; 0x40
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	b25b      	sxtb	r3, r3
 8000b48:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b4c:	b25b      	sxtb	r3, r3
 8000b4e:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 8000b50:	7bfb      	ldrb	r3, [r7, #15]
 8000b52:	4618      	mov	r0, r3
 8000b54:	f7ff ff38 	bl	80009c8 <lcd_send_cmd>
}
 8000b58:	bf00      	nop
 8000b5a:	3710      	adds	r7, #16
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b64:	f000 fb3a 	bl	80011dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b68:	f000 f812 	bl	8000b90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b6c:	f000 f8c6 	bl	8000cfc <MX_GPIO_Init>
  MX_TIM2_Init();
 8000b70:	f000 f878 	bl	8000c64 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000b74:	f000 f848 	bl	8000c08 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000b78:	4804      	ldr	r0, [pc, #16]	; (8000b8c <main+0x2c>)
 8000b7a:	f001 ff75 	bl	8002a68 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lcd_init();
 8000b7e:	f7ff ff83 	bl	8000a88 <lcd_init>
  init();
 8000b82:	f7ff fecb 	bl	800091c <init>
  while (1)
  {
    /* USER CODE END WHILE */
	  fsm_run();
 8000b86:	f7ff fd87 	bl	8000698 <fsm_run>
 8000b8a:	e7fc      	b.n	8000b86 <main+0x26>
 8000b8c:	2000016c 	.word	0x2000016c

08000b90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b090      	sub	sp, #64	; 0x40
 8000b94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b96:	f107 0318 	add.w	r3, r7, #24
 8000b9a:	2228      	movs	r2, #40	; 0x28
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f002 fb2e 	bl	8003200 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba4:	1d3b      	adds	r3, r7, #4
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	605a      	str	r2, [r3, #4]
 8000bac:	609a      	str	r2, [r3, #8]
 8000bae:	60da      	str	r2, [r3, #12]
 8000bb0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bba:	2310      	movs	r3, #16
 8000bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bc2:	f107 0318 	add.w	r3, r7, #24
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f001 fb04 	bl	80021d4 <HAL_RCC_OscConfig>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000bd2:	f000 f925 	bl	8000e20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bd6:	230f      	movs	r3, #15
 8000bd8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bde:	2300      	movs	r3, #0
 8000be0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000be2:	2300      	movs	r3, #0
 8000be4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000be6:	2300      	movs	r3, #0
 8000be8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bea:	1d3b      	adds	r3, r7, #4
 8000bec:	2100      	movs	r1, #0
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f001 fd70 	bl	80026d4 <HAL_RCC_ClockConfig>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000bfa:	f000 f911 	bl	8000e20 <Error_Handler>
  }
}
 8000bfe:	bf00      	nop
 8000c00:	3740      	adds	r7, #64	; 0x40
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
	...

08000c08 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c0c:	4b12      	ldr	r3, [pc, #72]	; (8000c58 <MX_I2C1_Init+0x50>)
 8000c0e:	4a13      	ldr	r2, [pc, #76]	; (8000c5c <MX_I2C1_Init+0x54>)
 8000c10:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c12:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <MX_I2C1_Init+0x50>)
 8000c14:	4a12      	ldr	r2, [pc, #72]	; (8000c60 <MX_I2C1_Init+0x58>)
 8000c16:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c18:	4b0f      	ldr	r3, [pc, #60]	; (8000c58 <MX_I2C1_Init+0x50>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c1e:	4b0e      	ldr	r3, [pc, #56]	; (8000c58 <MX_I2C1_Init+0x50>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c24:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <MX_I2C1_Init+0x50>)
 8000c26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c2a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c2c:	4b0a      	ldr	r3, [pc, #40]	; (8000c58 <MX_I2C1_Init+0x50>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c32:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <MX_I2C1_Init+0x50>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c38:	4b07      	ldr	r3, [pc, #28]	; (8000c58 <MX_I2C1_Init+0x50>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <MX_I2C1_Init+0x50>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c44:	4804      	ldr	r0, [pc, #16]	; (8000c58 <MX_I2C1_Init+0x50>)
 8000c46:	f000 fe29 	bl	800189c <HAL_I2C_Init>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c50:	f000 f8e6 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20000118 	.word	0x20000118
 8000c5c:	40005400 	.word	0x40005400
 8000c60:	000186a0 	.word	0x000186a0

08000c64 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b086      	sub	sp, #24
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c6a:	f107 0308 	add.w	r3, r7, #8
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	605a      	str	r2, [r3, #4]
 8000c74:	609a      	str	r2, [r3, #8]
 8000c76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c78:	463b      	mov	r3, r7
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c80:	4b1d      	ldr	r3, [pc, #116]	; (8000cf8 <MX_TIM2_Init+0x94>)
 8000c82:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c86:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000c88:	4b1b      	ldr	r3, [pc, #108]	; (8000cf8 <MX_TIM2_Init+0x94>)
 8000c8a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000c8e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c90:	4b19      	ldr	r3, [pc, #100]	; (8000cf8 <MX_TIM2_Init+0x94>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000c96:	4b18      	ldr	r3, [pc, #96]	; (8000cf8 <MX_TIM2_Init+0x94>)
 8000c98:	2209      	movs	r2, #9
 8000c9a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c9c:	4b16      	ldr	r3, [pc, #88]	; (8000cf8 <MX_TIM2_Init+0x94>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ca2:	4b15      	ldr	r3, [pc, #84]	; (8000cf8 <MX_TIM2_Init+0x94>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ca8:	4813      	ldr	r0, [pc, #76]	; (8000cf8 <MX_TIM2_Init+0x94>)
 8000caa:	f001 fe8d 	bl	80029c8 <HAL_TIM_Base_Init>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000cb4:	f000 f8b4 	bl	8000e20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cbc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cbe:	f107 0308 	add.w	r3, r7, #8
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	480c      	ldr	r0, [pc, #48]	; (8000cf8 <MX_TIM2_Init+0x94>)
 8000cc6:	f002 f811 	bl	8002cec <HAL_TIM_ConfigClockSource>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000cd0:	f000 f8a6 	bl	8000e20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cdc:	463b      	mov	r3, r7
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4805      	ldr	r0, [pc, #20]	; (8000cf8 <MX_TIM2_Init+0x94>)
 8000ce2:	f002 f9f3 	bl	80030cc <HAL_TIMEx_MasterConfigSynchronization>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000cec:	f000 f898 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cf0:	bf00      	nop
 8000cf2:	3718      	adds	r7, #24
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	2000016c 	.word	0x2000016c

08000cfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b088      	sub	sp, #32
 8000d00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d02:	f107 0310 	add.w	r3, r7, #16
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
 8000d0e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d10:	4b37      	ldr	r3, [pc, #220]	; (8000df0 <MX_GPIO_Init+0xf4>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	4a36      	ldr	r2, [pc, #216]	; (8000df0 <MX_GPIO_Init+0xf4>)
 8000d16:	f043 0310 	orr.w	r3, r3, #16
 8000d1a:	6193      	str	r3, [r2, #24]
 8000d1c:	4b34      	ldr	r3, [pc, #208]	; (8000df0 <MX_GPIO_Init+0xf4>)
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	f003 0310 	and.w	r3, r3, #16
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d28:	4b31      	ldr	r3, [pc, #196]	; (8000df0 <MX_GPIO_Init+0xf4>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	4a30      	ldr	r2, [pc, #192]	; (8000df0 <MX_GPIO_Init+0xf4>)
 8000d2e:	f043 0304 	orr.w	r3, r3, #4
 8000d32:	6193      	str	r3, [r2, #24]
 8000d34:	4b2e      	ldr	r3, [pc, #184]	; (8000df0 <MX_GPIO_Init+0xf4>)
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	f003 0304 	and.w	r3, r3, #4
 8000d3c:	60bb      	str	r3, [r7, #8]
 8000d3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d40:	4b2b      	ldr	r3, [pc, #172]	; (8000df0 <MX_GPIO_Init+0xf4>)
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	4a2a      	ldr	r2, [pc, #168]	; (8000df0 <MX_GPIO_Init+0xf4>)
 8000d46:	f043 0308 	orr.w	r3, r3, #8
 8000d4a:	6193      	str	r3, [r2, #24]
 8000d4c:	4b28      	ldr	r3, [pc, #160]	; (8000df0 <MX_GPIO_Init+0xf4>)
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	f003 0308 	and.w	r3, r3, #8
 8000d54:	607b      	str	r3, [r7, #4]
 8000d56:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_A2_GPIO_Port, EN_A2_Pin, GPIO_PIN_RESET);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	2180      	movs	r1, #128	; 0x80
 8000d5c:	4825      	ldr	r0, [pc, #148]	; (8000df4 <MX_GPIO_Init+0xf8>)
 8000d5e:	f000 fd6c 	bl	800183a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN_A1_Pin|EN_B1_Pin, GPIO_PIN_RESET);
 8000d62:	2200      	movs	r2, #0
 8000d64:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000d68:	4823      	ldr	r0, [pc, #140]	; (8000df8 <MX_GPIO_Init+0xfc>)
 8000d6a:	f000 fd66 	bl	800183a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_B2_GPIO_Port, EN_B2_Pin, GPIO_PIN_RESET);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2140      	movs	r1, #64	; 0x40
 8000d72:	4822      	ldr	r0, [pc, #136]	; (8000dfc <MX_GPIO_Init+0x100>)
 8000d74:	f000 fd61 	bl	800183a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : EN_A2_Pin */
  GPIO_InitStruct.Pin = EN_A2_Pin;
 8000d78:	2380      	movs	r3, #128	; 0x80
 8000d7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d84:	2302      	movs	r3, #2
 8000d86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EN_A2_GPIO_Port, &GPIO_InitStruct);
 8000d88:	f107 0310 	add.w	r3, r7, #16
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4819      	ldr	r0, [pc, #100]	; (8000df4 <MX_GPIO_Init+0xf8>)
 8000d90:	f000 fbb8 	bl	8001504 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_A1_Pin EN_B1_Pin */
  GPIO_InitStruct.Pin = EN_A1_Pin|EN_B1_Pin;
 8000d94:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da2:	2302      	movs	r3, #2
 8000da4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da6:	f107 0310 	add.w	r3, r7, #16
 8000daa:	4619      	mov	r1, r3
 8000dac:	4812      	ldr	r0, [pc, #72]	; (8000df8 <MX_GPIO_Init+0xfc>)
 8000dae:	f000 fba9 	bl	8001504 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin B3_Pin B2_Pin */
  GPIO_InitStruct.Pin = B1_Pin|B3_Pin|B2_Pin;
 8000db2:	2338      	movs	r3, #56	; 0x38
 8000db4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000db6:	2300      	movs	r3, #0
 8000db8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dbe:	f107 0310 	add.w	r3, r7, #16
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	480d      	ldr	r0, [pc, #52]	; (8000dfc <MX_GPIO_Init+0x100>)
 8000dc6:	f000 fb9d 	bl	8001504 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_B2_Pin */
  GPIO_InitStruct.Pin = EN_B2_Pin;
 8000dca:	2340      	movs	r3, #64	; 0x40
 8000dcc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EN_B2_GPIO_Port, &GPIO_InitStruct);
 8000dda:	f107 0310 	add.w	r3, r7, #16
 8000dde:	4619      	mov	r1, r3
 8000de0:	4806      	ldr	r0, [pc, #24]	; (8000dfc <MX_GPIO_Init+0x100>)
 8000de2:	f000 fb8f 	bl	8001504 <HAL_GPIO_Init>

}
 8000de6:	bf00      	nop
 8000de8:	3720      	adds	r7, #32
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40021000 	.word	0x40021000
 8000df4:	40011000 	.word	0x40011000
 8000df8:	40010800 	.word	0x40010800
 8000dfc:	40010c00 	.word	0x40010c00

08000e00 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
    timer_run();       // Chạy timer cho đư�?ng giữa
 8000e08:	f000 f85e 	bl	8000ec8 <timer_run>
    getKeyInput1();
 8000e0c:	f7ff fa20 	bl	8000250 <getKeyInput1>
    getKeyInput2();
 8000e10:	f7ff fab2 	bl	8000378 <getKeyInput2>
    getKeyInput3();
 8000e14:	f7ff fb66 	bl	80004e4 <getKeyInput3>
}
 8000e18:	bf00      	nop
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e24:	b672      	cpsid	i
}
 8000e26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e28:	e7fe      	b.n	8000e28 <Error_Handler+0x8>
	...

08000e2c <setTimer>:
int timer_counter_side = 0, timer_flag_side = 0;
int display_timer_counter = 0, display_timer_flag = 0;

int idx = 0;

void setTimer(int duration) {
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
    timer_counter = duration / TIMER_CYCLE;
 8000e34:	4b07      	ldr	r3, [pc, #28]	; (8000e54 <setTimer+0x28>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	687a      	ldr	r2, [r7, #4]
 8000e3a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e3e:	4a06      	ldr	r2, [pc, #24]	; (8000e58 <setTimer+0x2c>)
 8000e40:	6013      	str	r3, [r2, #0]
    timer_flag = 0;
 8000e42:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <setTimer+0x30>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
}
 8000e48:	bf00      	nop
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bc80      	pop	{r7}
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	20000058 	.word	0x20000058
 8000e58:	200000f0 	.word	0x200000f0
 8000e5c:	200000f4 	.word	0x200000f4

08000e60 <setTimerSide>:
void setTimerSide(int duration) {
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
    timer_counter_side = duration / TIMER_CYCLE;
 8000e68:	4b07      	ldr	r3, [pc, #28]	; (8000e88 <setTimerSide+0x28>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	687a      	ldr	r2, [r7, #4]
 8000e6e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e72:	4a06      	ldr	r2, [pc, #24]	; (8000e8c <setTimerSide+0x2c>)
 8000e74:	6013      	str	r3, [r2, #0]
    timer_flag_side = 0;
 8000e76:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <setTimerSide+0x30>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
}
 8000e7c:	bf00      	nop
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bc80      	pop	{r7}
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	20000058 	.word	0x20000058
 8000e8c:	200000f8 	.word	0x200000f8
 8000e90:	200000fc 	.word	0x200000fc

08000e94 <setDisplayTimer>:
void setDisplayTimer(int duration) {
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
    display_timer_counter = duration / TIMER_CYCLE;
 8000e9c:	4b07      	ldr	r3, [pc, #28]	; (8000ebc <setDisplayTimer+0x28>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	687a      	ldr	r2, [r7, #4]
 8000ea2:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ea6:	4a06      	ldr	r2, [pc, #24]	; (8000ec0 <setDisplayTimer+0x2c>)
 8000ea8:	6013      	str	r3, [r2, #0]
    display_timer_flag = 0;
 8000eaa:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <setDisplayTimer+0x30>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
}
 8000eb0:	bf00      	nop
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bc80      	pop	{r7}
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	20000058 	.word	0x20000058
 8000ec0:	20000100 	.word	0x20000100
 8000ec4:	20000104 	.word	0x20000104

08000ec8 <timer_run>:

void timer_run() {
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
    if (timer_counter > 0) {
 8000ecc:	4b1f      	ldr	r3, [pc, #124]	; (8000f4c <timer_run+0x84>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	dd0b      	ble.n	8000eec <timer_run+0x24>
        timer_counter--;
 8000ed4:	4b1d      	ldr	r3, [pc, #116]	; (8000f4c <timer_run+0x84>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	3b01      	subs	r3, #1
 8000eda:	4a1c      	ldr	r2, [pc, #112]	; (8000f4c <timer_run+0x84>)
 8000edc:	6013      	str	r3, [r2, #0]
        if (timer_counter == 0) {
 8000ede:	4b1b      	ldr	r3, [pc, #108]	; (8000f4c <timer_run+0x84>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d102      	bne.n	8000eec <timer_run+0x24>
            timer_flag = 1;
 8000ee6:	4b1a      	ldr	r3, [pc, #104]	; (8000f50 <timer_run+0x88>)
 8000ee8:	2201      	movs	r2, #1
 8000eea:	601a      	str	r2, [r3, #0]
        }
    }
    if (timer_counter_side > 0) {
 8000eec:	4b19      	ldr	r3, [pc, #100]	; (8000f54 <timer_run+0x8c>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	dd0b      	ble.n	8000f0c <timer_run+0x44>
		timer_counter_side--;
 8000ef4:	4b17      	ldr	r3, [pc, #92]	; (8000f54 <timer_run+0x8c>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	3b01      	subs	r3, #1
 8000efa:	4a16      	ldr	r2, [pc, #88]	; (8000f54 <timer_run+0x8c>)
 8000efc:	6013      	str	r3, [r2, #0]
		if (timer_counter_side == 0) {
 8000efe:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <timer_run+0x8c>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d102      	bne.n	8000f0c <timer_run+0x44>
			timer_flag_side = 1;
 8000f06:	4b14      	ldr	r3, [pc, #80]	; (8000f58 <timer_run+0x90>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	601a      	str	r2, [r3, #0]
		}
	}
    if (display_timer_counter > 0) {
 8000f0c:	4b13      	ldr	r3, [pc, #76]	; (8000f5c <timer_run+0x94>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	dd17      	ble.n	8000f44 <timer_run+0x7c>
		display_timer_counter--;
 8000f14:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <timer_run+0x94>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	3b01      	subs	r3, #1
 8000f1a:	4a10      	ldr	r2, [pc, #64]	; (8000f5c <timer_run+0x94>)
 8000f1c:	6013      	str	r3, [r2, #0]
		if (display_timer_counter == 0) {
 8000f1e:	4b0f      	ldr	r3, [pc, #60]	; (8000f5c <timer_run+0x94>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d10e      	bne.n	8000f44 <timer_run+0x7c>
			display_timer_flag = 1;
 8000f26:	4b0e      	ldr	r3, [pc, #56]	; (8000f60 <timer_run+0x98>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	601a      	str	r2, [r3, #0]
			idx = (idx + 1) % 4;
 8000f2c:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <timer_run+0x9c>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	3301      	adds	r3, #1
 8000f32:	425a      	negs	r2, r3
 8000f34:	f003 0303 	and.w	r3, r3, #3
 8000f38:	f002 0203 	and.w	r2, r2, #3
 8000f3c:	bf58      	it	pl
 8000f3e:	4253      	negpl	r3, r2
 8000f40:	4a08      	ldr	r2, [pc, #32]	; (8000f64 <timer_run+0x9c>)
 8000f42:	6013      	str	r3, [r2, #0]
		}
	}
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bc80      	pop	{r7}
 8000f4a:	4770      	bx	lr
 8000f4c:	200000f0 	.word	0x200000f0
 8000f50:	200000f4 	.word	0x200000f4
 8000f54:	200000f8 	.word	0x200000f8
 8000f58:	200000fc 	.word	0x200000fc
 8000f5c:	20000100 	.word	0x20000100
 8000f60:	20000104 	.word	0x20000104
 8000f64:	20000108 	.word	0x20000108

08000f68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f6e:	4b15      	ldr	r3, [pc, #84]	; (8000fc4 <HAL_MspInit+0x5c>)
 8000f70:	699b      	ldr	r3, [r3, #24]
 8000f72:	4a14      	ldr	r2, [pc, #80]	; (8000fc4 <HAL_MspInit+0x5c>)
 8000f74:	f043 0301 	orr.w	r3, r3, #1
 8000f78:	6193      	str	r3, [r2, #24]
 8000f7a:	4b12      	ldr	r3, [pc, #72]	; (8000fc4 <HAL_MspInit+0x5c>)
 8000f7c:	699b      	ldr	r3, [r3, #24]
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	60bb      	str	r3, [r7, #8]
 8000f84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f86:	4b0f      	ldr	r3, [pc, #60]	; (8000fc4 <HAL_MspInit+0x5c>)
 8000f88:	69db      	ldr	r3, [r3, #28]
 8000f8a:	4a0e      	ldr	r2, [pc, #56]	; (8000fc4 <HAL_MspInit+0x5c>)
 8000f8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f90:	61d3      	str	r3, [r2, #28]
 8000f92:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <HAL_MspInit+0x5c>)
 8000f94:	69db      	ldr	r3, [r3, #28]
 8000f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f9a:	607b      	str	r3, [r7, #4]
 8000f9c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f9e:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <HAL_MspInit+0x60>)
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	4a04      	ldr	r2, [pc, #16]	; (8000fc8 <HAL_MspInit+0x60>)
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	3714      	adds	r7, #20
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bc80      	pop	{r7}
 8000fc2:	4770      	bx	lr
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	40010000 	.word	0x40010000

08000fcc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08a      	sub	sp, #40	; 0x28
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd4:	f107 0314 	add.w	r3, r7, #20
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a1d      	ldr	r2, [pc, #116]	; (800105c <HAL_I2C_MspInit+0x90>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d132      	bne.n	8001052 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fec:	4b1c      	ldr	r3, [pc, #112]	; (8001060 <HAL_I2C_MspInit+0x94>)
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	4a1b      	ldr	r2, [pc, #108]	; (8001060 <HAL_I2C_MspInit+0x94>)
 8000ff2:	f043 0308 	orr.w	r3, r3, #8
 8000ff6:	6193      	str	r3, [r2, #24]
 8000ff8:	4b19      	ldr	r3, [pc, #100]	; (8001060 <HAL_I2C_MspInit+0x94>)
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	f003 0308 	and.w	r3, r3, #8
 8001000:	613b      	str	r3, [r7, #16]
 8001002:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001004:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001008:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800100a:	2312      	movs	r3, #18
 800100c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800100e:	2303      	movs	r3, #3
 8001010:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001012:	f107 0314 	add.w	r3, r7, #20
 8001016:	4619      	mov	r1, r3
 8001018:	4812      	ldr	r0, [pc, #72]	; (8001064 <HAL_I2C_MspInit+0x98>)
 800101a:	f000 fa73 	bl	8001504 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800101e:	4b12      	ldr	r3, [pc, #72]	; (8001068 <HAL_I2C_MspInit+0x9c>)
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	627b      	str	r3, [r7, #36]	; 0x24
 8001024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001026:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800102a:	627b      	str	r3, [r7, #36]	; 0x24
 800102c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102e:	f043 0302 	orr.w	r3, r3, #2
 8001032:	627b      	str	r3, [r7, #36]	; 0x24
 8001034:	4a0c      	ldr	r2, [pc, #48]	; (8001068 <HAL_I2C_MspInit+0x9c>)
 8001036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001038:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800103a:	4b09      	ldr	r3, [pc, #36]	; (8001060 <HAL_I2C_MspInit+0x94>)
 800103c:	69db      	ldr	r3, [r3, #28]
 800103e:	4a08      	ldr	r2, [pc, #32]	; (8001060 <HAL_I2C_MspInit+0x94>)
 8001040:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001044:	61d3      	str	r3, [r2, #28]
 8001046:	4b06      	ldr	r3, [pc, #24]	; (8001060 <HAL_I2C_MspInit+0x94>)
 8001048:	69db      	ldr	r3, [r3, #28]
 800104a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001052:	bf00      	nop
 8001054:	3728      	adds	r7, #40	; 0x28
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40005400 	.word	0x40005400
 8001060:	40021000 	.word	0x40021000
 8001064:	40010c00 	.word	0x40010c00
 8001068:	40010000 	.word	0x40010000

0800106c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800107c:	d113      	bne.n	80010a6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800107e:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <HAL_TIM_Base_MspInit+0x44>)
 8001080:	69db      	ldr	r3, [r3, #28]
 8001082:	4a0b      	ldr	r2, [pc, #44]	; (80010b0 <HAL_TIM_Base_MspInit+0x44>)
 8001084:	f043 0301 	orr.w	r3, r3, #1
 8001088:	61d3      	str	r3, [r2, #28]
 800108a:	4b09      	ldr	r3, [pc, #36]	; (80010b0 <HAL_TIM_Base_MspInit+0x44>)
 800108c:	69db      	ldr	r3, [r3, #28]
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001096:	2200      	movs	r2, #0
 8001098:	2100      	movs	r1, #0
 800109a:	201c      	movs	r0, #28
 800109c:	f000 f9fb 	bl	8001496 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010a0:	201c      	movs	r0, #28
 80010a2:	f000 fa14 	bl	80014ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80010a6:	bf00      	nop
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40021000 	.word	0x40021000

080010b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010b8:	e7fe      	b.n	80010b8 <NMI_Handler+0x4>

080010ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ba:	b480      	push	{r7}
 80010bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010be:	e7fe      	b.n	80010be <HardFault_Handler+0x4>

080010c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010c4:	e7fe      	b.n	80010c4 <MemManage_Handler+0x4>

080010c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010c6:	b480      	push	{r7}
 80010c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ca:	e7fe      	b.n	80010ca <BusFault_Handler+0x4>

080010cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010d0:	e7fe      	b.n	80010d0 <UsageFault_Handler+0x4>

080010d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010d2:	b480      	push	{r7}
 80010d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	46bd      	mov	sp, r7
 80010da:	bc80      	pop	{r7}
 80010dc:	4770      	bx	lr

080010de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010de:	b480      	push	{r7}
 80010e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010e2:	bf00      	nop
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bc80      	pop	{r7}
 80010e8:	4770      	bx	lr

080010ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ee:	bf00      	nop
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bc80      	pop	{r7}
 80010f4:	4770      	bx	lr

080010f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010fa:	f000 f8b5 	bl	8001268 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
	...

08001104 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001108:	4802      	ldr	r0, [pc, #8]	; (8001114 <TIM2_IRQHandler+0x10>)
 800110a:	f001 fcff 	bl	8002b0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	2000016c 	.word	0x2000016c

08001118 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001120:	4a14      	ldr	r2, [pc, #80]	; (8001174 <_sbrk+0x5c>)
 8001122:	4b15      	ldr	r3, [pc, #84]	; (8001178 <_sbrk+0x60>)
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800112c:	4b13      	ldr	r3, [pc, #76]	; (800117c <_sbrk+0x64>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d102      	bne.n	800113a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001134:	4b11      	ldr	r3, [pc, #68]	; (800117c <_sbrk+0x64>)
 8001136:	4a12      	ldr	r2, [pc, #72]	; (8001180 <_sbrk+0x68>)
 8001138:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800113a:	4b10      	ldr	r3, [pc, #64]	; (800117c <_sbrk+0x64>)
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4413      	add	r3, r2
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	429a      	cmp	r2, r3
 8001146:	d207      	bcs.n	8001158 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001148:	f002 f830 	bl	80031ac <__errno>
 800114c:	4603      	mov	r3, r0
 800114e:	220c      	movs	r2, #12
 8001150:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001152:	f04f 33ff 	mov.w	r3, #4294967295
 8001156:	e009      	b.n	800116c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001158:	4b08      	ldr	r3, [pc, #32]	; (800117c <_sbrk+0x64>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800115e:	4b07      	ldr	r3, [pc, #28]	; (800117c <_sbrk+0x64>)
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4413      	add	r3, r2
 8001166:	4a05      	ldr	r2, [pc, #20]	; (800117c <_sbrk+0x64>)
 8001168:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800116a:	68fb      	ldr	r3, [r7, #12]
}
 800116c:	4618      	mov	r0, r3
 800116e:	3718      	adds	r7, #24
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20005000 	.word	0x20005000
 8001178:	00000400 	.word	0x00000400
 800117c:	2000010c 	.word	0x2000010c
 8001180:	200001c8 	.word	0x200001c8

08001184 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	bc80      	pop	{r7}
 800118e:	4770      	bx	lr

08001190 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001190:	f7ff fff8 	bl	8001184 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001194:	480b      	ldr	r0, [pc, #44]	; (80011c4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001196:	490c      	ldr	r1, [pc, #48]	; (80011c8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001198:	4a0c      	ldr	r2, [pc, #48]	; (80011cc <LoopFillZerobss+0x16>)
  movs r3, #0
 800119a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800119c:	e002      	b.n	80011a4 <LoopCopyDataInit>

0800119e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800119e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011a2:	3304      	adds	r3, #4

080011a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011a8:	d3f9      	bcc.n	800119e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011aa:	4a09      	ldr	r2, [pc, #36]	; (80011d0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80011ac:	4c09      	ldr	r4, [pc, #36]	; (80011d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011b0:	e001      	b.n	80011b6 <LoopFillZerobss>

080011b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011b4:	3204      	adds	r2, #4

080011b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011b8:	d3fb      	bcc.n	80011b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011ba:	f001 fffd 	bl	80031b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011be:	f7ff fccf 	bl	8000b60 <main>
  bx lr
 80011c2:	4770      	bx	lr
  ldr r0, =_sdata
 80011c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011c8:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 80011cc:	08003b54 	.word	0x08003b54
  ldr r2, =_sbss
 80011d0:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 80011d4:	200001c8 	.word	0x200001c8

080011d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011d8:	e7fe      	b.n	80011d8 <ADC1_2_IRQHandler>
	...

080011dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011e0:	4b08      	ldr	r3, [pc, #32]	; (8001204 <HAL_Init+0x28>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a07      	ldr	r2, [pc, #28]	; (8001204 <HAL_Init+0x28>)
 80011e6:	f043 0310 	orr.w	r3, r3, #16
 80011ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ec:	2003      	movs	r0, #3
 80011ee:	f000 f947 	bl	8001480 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011f2:	200f      	movs	r0, #15
 80011f4:	f000 f808 	bl	8001208 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011f8:	f7ff feb6 	bl	8000f68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40022000 	.word	0x40022000

08001208 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001210:	4b12      	ldr	r3, [pc, #72]	; (800125c <HAL_InitTick+0x54>)
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	4b12      	ldr	r3, [pc, #72]	; (8001260 <HAL_InitTick+0x58>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	4619      	mov	r1, r3
 800121a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800121e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001222:	fbb2 f3f3 	udiv	r3, r2, r3
 8001226:	4618      	mov	r0, r3
 8001228:	f000 f95f 	bl	80014ea <HAL_SYSTICK_Config>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e00e      	b.n	8001254 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2b0f      	cmp	r3, #15
 800123a:	d80a      	bhi.n	8001252 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800123c:	2200      	movs	r2, #0
 800123e:	6879      	ldr	r1, [r7, #4]
 8001240:	f04f 30ff 	mov.w	r0, #4294967295
 8001244:	f000 f927 	bl	8001496 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001248:	4a06      	ldr	r2, [pc, #24]	; (8001264 <HAL_InitTick+0x5c>)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800124e:	2300      	movs	r3, #0
 8001250:	e000      	b.n	8001254 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
}
 8001254:	4618      	mov	r0, r3
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	2000005c 	.word	0x2000005c
 8001260:	20000064 	.word	0x20000064
 8001264:	20000060 	.word	0x20000060

08001268 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800126c:	4b05      	ldr	r3, [pc, #20]	; (8001284 <HAL_IncTick+0x1c>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	461a      	mov	r2, r3
 8001272:	4b05      	ldr	r3, [pc, #20]	; (8001288 <HAL_IncTick+0x20>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4413      	add	r3, r2
 8001278:	4a03      	ldr	r2, [pc, #12]	; (8001288 <HAL_IncTick+0x20>)
 800127a:	6013      	str	r3, [r2, #0]
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	bc80      	pop	{r7}
 8001282:	4770      	bx	lr
 8001284:	20000064 	.word	0x20000064
 8001288:	200001b4 	.word	0x200001b4

0800128c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  return uwTick;
 8001290:	4b02      	ldr	r3, [pc, #8]	; (800129c <HAL_GetTick+0x10>)
 8001292:	681b      	ldr	r3, [r3, #0]
}
 8001294:	4618      	mov	r0, r3
 8001296:	46bd      	mov	sp, r7
 8001298:	bc80      	pop	{r7}
 800129a:	4770      	bx	lr
 800129c:	200001b4 	.word	0x200001b4

080012a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012a8:	f7ff fff0 	bl	800128c <HAL_GetTick>
 80012ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012b8:	d005      	beq.n	80012c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ba:	4b0a      	ldr	r3, [pc, #40]	; (80012e4 <HAL_Delay+0x44>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	461a      	mov	r2, r3
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	4413      	add	r3, r2
 80012c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012c6:	bf00      	nop
 80012c8:	f7ff ffe0 	bl	800128c <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	68fa      	ldr	r2, [r7, #12]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d8f7      	bhi.n	80012c8 <HAL_Delay+0x28>
  {
  }
}
 80012d8:	bf00      	nop
 80012da:	bf00      	nop
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20000064 	.word	0x20000064

080012e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f003 0307 	and.w	r3, r3, #7
 80012f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012f8:	4b0c      	ldr	r3, [pc, #48]	; (800132c <__NVIC_SetPriorityGrouping+0x44>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012fe:	68ba      	ldr	r2, [r7, #8]
 8001300:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001304:	4013      	ands	r3, r2
 8001306:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001310:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001318:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800131a:	4a04      	ldr	r2, [pc, #16]	; (800132c <__NVIC_SetPriorityGrouping+0x44>)
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	60d3      	str	r3, [r2, #12]
}
 8001320:	bf00      	nop
 8001322:	3714      	adds	r7, #20
 8001324:	46bd      	mov	sp, r7
 8001326:	bc80      	pop	{r7}
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001334:	4b04      	ldr	r3, [pc, #16]	; (8001348 <__NVIC_GetPriorityGrouping+0x18>)
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	0a1b      	lsrs	r3, r3, #8
 800133a:	f003 0307 	and.w	r3, r3, #7
}
 800133e:	4618      	mov	r0, r3
 8001340:	46bd      	mov	sp, r7
 8001342:	bc80      	pop	{r7}
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	e000ed00 	.word	0xe000ed00

0800134c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135a:	2b00      	cmp	r3, #0
 800135c:	db0b      	blt.n	8001376 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800135e:	79fb      	ldrb	r3, [r7, #7]
 8001360:	f003 021f 	and.w	r2, r3, #31
 8001364:	4906      	ldr	r1, [pc, #24]	; (8001380 <__NVIC_EnableIRQ+0x34>)
 8001366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136a:	095b      	lsrs	r3, r3, #5
 800136c:	2001      	movs	r0, #1
 800136e:	fa00 f202 	lsl.w	r2, r0, r2
 8001372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr
 8001380:	e000e100 	.word	0xe000e100

08001384 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	6039      	str	r1, [r7, #0]
 800138e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001394:	2b00      	cmp	r3, #0
 8001396:	db0a      	blt.n	80013ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	b2da      	uxtb	r2, r3
 800139c:	490c      	ldr	r1, [pc, #48]	; (80013d0 <__NVIC_SetPriority+0x4c>)
 800139e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a2:	0112      	lsls	r2, r2, #4
 80013a4:	b2d2      	uxtb	r2, r2
 80013a6:	440b      	add	r3, r1
 80013a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013ac:	e00a      	b.n	80013c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	4908      	ldr	r1, [pc, #32]	; (80013d4 <__NVIC_SetPriority+0x50>)
 80013b4:	79fb      	ldrb	r3, [r7, #7]
 80013b6:	f003 030f 	and.w	r3, r3, #15
 80013ba:	3b04      	subs	r3, #4
 80013bc:	0112      	lsls	r2, r2, #4
 80013be:	b2d2      	uxtb	r2, r2
 80013c0:	440b      	add	r3, r1
 80013c2:	761a      	strb	r2, [r3, #24]
}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bc80      	pop	{r7}
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	e000e100 	.word	0xe000e100
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013d8:	b480      	push	{r7}
 80013da:	b089      	sub	sp, #36	; 0x24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f003 0307 	and.w	r3, r3, #7
 80013ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	f1c3 0307 	rsb	r3, r3, #7
 80013f2:	2b04      	cmp	r3, #4
 80013f4:	bf28      	it	cs
 80013f6:	2304      	movcs	r3, #4
 80013f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	3304      	adds	r3, #4
 80013fe:	2b06      	cmp	r3, #6
 8001400:	d902      	bls.n	8001408 <NVIC_EncodePriority+0x30>
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	3b03      	subs	r3, #3
 8001406:	e000      	b.n	800140a <NVIC_EncodePriority+0x32>
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800140c:	f04f 32ff 	mov.w	r2, #4294967295
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	43da      	mvns	r2, r3
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	401a      	ands	r2, r3
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001420:	f04f 31ff 	mov.w	r1, #4294967295
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	fa01 f303 	lsl.w	r3, r1, r3
 800142a:	43d9      	mvns	r1, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001430:	4313      	orrs	r3, r2
         );
}
 8001432:	4618      	mov	r0, r3
 8001434:	3724      	adds	r7, #36	; 0x24
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr

0800143c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	3b01      	subs	r3, #1
 8001448:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800144c:	d301      	bcc.n	8001452 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800144e:	2301      	movs	r3, #1
 8001450:	e00f      	b.n	8001472 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001452:	4a0a      	ldr	r2, [pc, #40]	; (800147c <SysTick_Config+0x40>)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	3b01      	subs	r3, #1
 8001458:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800145a:	210f      	movs	r1, #15
 800145c:	f04f 30ff 	mov.w	r0, #4294967295
 8001460:	f7ff ff90 	bl	8001384 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001464:	4b05      	ldr	r3, [pc, #20]	; (800147c <SysTick_Config+0x40>)
 8001466:	2200      	movs	r2, #0
 8001468:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800146a:	4b04      	ldr	r3, [pc, #16]	; (800147c <SysTick_Config+0x40>)
 800146c:	2207      	movs	r2, #7
 800146e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	e000e010 	.word	0xe000e010

08001480 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f7ff ff2d 	bl	80012e8 <__NVIC_SetPriorityGrouping>
}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001496:	b580      	push	{r7, lr}
 8001498:	b086      	sub	sp, #24
 800149a:	af00      	add	r7, sp, #0
 800149c:	4603      	mov	r3, r0
 800149e:	60b9      	str	r1, [r7, #8]
 80014a0:	607a      	str	r2, [r7, #4]
 80014a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014a8:	f7ff ff42 	bl	8001330 <__NVIC_GetPriorityGrouping>
 80014ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	68b9      	ldr	r1, [r7, #8]
 80014b2:	6978      	ldr	r0, [r7, #20]
 80014b4:	f7ff ff90 	bl	80013d8 <NVIC_EncodePriority>
 80014b8:	4602      	mov	r2, r0
 80014ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014be:	4611      	mov	r1, r2
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff ff5f 	bl	8001384 <__NVIC_SetPriority>
}
 80014c6:	bf00      	nop
 80014c8:	3718      	adds	r7, #24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b082      	sub	sp, #8
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	4603      	mov	r3, r0
 80014d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff ff35 	bl	800134c <__NVIC_EnableIRQ>
}
 80014e2:	bf00      	nop
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b082      	sub	sp, #8
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f7ff ffa2 	bl	800143c <SysTick_Config>
 80014f8:	4603      	mov	r3, r0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
	...

08001504 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001504:	b480      	push	{r7}
 8001506:	b08b      	sub	sp, #44	; 0x2c
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800150e:	2300      	movs	r3, #0
 8001510:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001512:	2300      	movs	r3, #0
 8001514:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001516:	e169      	b.n	80017ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001518:	2201      	movs	r2, #1
 800151a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	69fa      	ldr	r2, [r7, #28]
 8001528:	4013      	ands	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	429a      	cmp	r2, r3
 8001532:	f040 8158 	bne.w	80017e6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	4a9a      	ldr	r2, [pc, #616]	; (80017a4 <HAL_GPIO_Init+0x2a0>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d05e      	beq.n	80015fe <HAL_GPIO_Init+0xfa>
 8001540:	4a98      	ldr	r2, [pc, #608]	; (80017a4 <HAL_GPIO_Init+0x2a0>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d875      	bhi.n	8001632 <HAL_GPIO_Init+0x12e>
 8001546:	4a98      	ldr	r2, [pc, #608]	; (80017a8 <HAL_GPIO_Init+0x2a4>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d058      	beq.n	80015fe <HAL_GPIO_Init+0xfa>
 800154c:	4a96      	ldr	r2, [pc, #600]	; (80017a8 <HAL_GPIO_Init+0x2a4>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d86f      	bhi.n	8001632 <HAL_GPIO_Init+0x12e>
 8001552:	4a96      	ldr	r2, [pc, #600]	; (80017ac <HAL_GPIO_Init+0x2a8>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d052      	beq.n	80015fe <HAL_GPIO_Init+0xfa>
 8001558:	4a94      	ldr	r2, [pc, #592]	; (80017ac <HAL_GPIO_Init+0x2a8>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d869      	bhi.n	8001632 <HAL_GPIO_Init+0x12e>
 800155e:	4a94      	ldr	r2, [pc, #592]	; (80017b0 <HAL_GPIO_Init+0x2ac>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d04c      	beq.n	80015fe <HAL_GPIO_Init+0xfa>
 8001564:	4a92      	ldr	r2, [pc, #584]	; (80017b0 <HAL_GPIO_Init+0x2ac>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d863      	bhi.n	8001632 <HAL_GPIO_Init+0x12e>
 800156a:	4a92      	ldr	r2, [pc, #584]	; (80017b4 <HAL_GPIO_Init+0x2b0>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d046      	beq.n	80015fe <HAL_GPIO_Init+0xfa>
 8001570:	4a90      	ldr	r2, [pc, #576]	; (80017b4 <HAL_GPIO_Init+0x2b0>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d85d      	bhi.n	8001632 <HAL_GPIO_Init+0x12e>
 8001576:	2b12      	cmp	r3, #18
 8001578:	d82a      	bhi.n	80015d0 <HAL_GPIO_Init+0xcc>
 800157a:	2b12      	cmp	r3, #18
 800157c:	d859      	bhi.n	8001632 <HAL_GPIO_Init+0x12e>
 800157e:	a201      	add	r2, pc, #4	; (adr r2, 8001584 <HAL_GPIO_Init+0x80>)
 8001580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001584:	080015ff 	.word	0x080015ff
 8001588:	080015d9 	.word	0x080015d9
 800158c:	080015eb 	.word	0x080015eb
 8001590:	0800162d 	.word	0x0800162d
 8001594:	08001633 	.word	0x08001633
 8001598:	08001633 	.word	0x08001633
 800159c:	08001633 	.word	0x08001633
 80015a0:	08001633 	.word	0x08001633
 80015a4:	08001633 	.word	0x08001633
 80015a8:	08001633 	.word	0x08001633
 80015ac:	08001633 	.word	0x08001633
 80015b0:	08001633 	.word	0x08001633
 80015b4:	08001633 	.word	0x08001633
 80015b8:	08001633 	.word	0x08001633
 80015bc:	08001633 	.word	0x08001633
 80015c0:	08001633 	.word	0x08001633
 80015c4:	08001633 	.word	0x08001633
 80015c8:	080015e1 	.word	0x080015e1
 80015cc:	080015f5 	.word	0x080015f5
 80015d0:	4a79      	ldr	r2, [pc, #484]	; (80017b8 <HAL_GPIO_Init+0x2b4>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d013      	beq.n	80015fe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015d6:	e02c      	b.n	8001632 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	623b      	str	r3, [r7, #32]
          break;
 80015de:	e029      	b.n	8001634 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	3304      	adds	r3, #4
 80015e6:	623b      	str	r3, [r7, #32]
          break;
 80015e8:	e024      	b.n	8001634 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	68db      	ldr	r3, [r3, #12]
 80015ee:	3308      	adds	r3, #8
 80015f0:	623b      	str	r3, [r7, #32]
          break;
 80015f2:	e01f      	b.n	8001634 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	330c      	adds	r3, #12
 80015fa:	623b      	str	r3, [r7, #32]
          break;
 80015fc:	e01a      	b.n	8001634 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d102      	bne.n	800160c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001606:	2304      	movs	r3, #4
 8001608:	623b      	str	r3, [r7, #32]
          break;
 800160a:	e013      	b.n	8001634 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	2b01      	cmp	r3, #1
 8001612:	d105      	bne.n	8001620 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001614:	2308      	movs	r3, #8
 8001616:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	69fa      	ldr	r2, [r7, #28]
 800161c:	611a      	str	r2, [r3, #16]
          break;
 800161e:	e009      	b.n	8001634 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001620:	2308      	movs	r3, #8
 8001622:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	69fa      	ldr	r2, [r7, #28]
 8001628:	615a      	str	r2, [r3, #20]
          break;
 800162a:	e003      	b.n	8001634 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800162c:	2300      	movs	r3, #0
 800162e:	623b      	str	r3, [r7, #32]
          break;
 8001630:	e000      	b.n	8001634 <HAL_GPIO_Init+0x130>
          break;
 8001632:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	2bff      	cmp	r3, #255	; 0xff
 8001638:	d801      	bhi.n	800163e <HAL_GPIO_Init+0x13a>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	e001      	b.n	8001642 <HAL_GPIO_Init+0x13e>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	3304      	adds	r3, #4
 8001642:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	2bff      	cmp	r3, #255	; 0xff
 8001648:	d802      	bhi.n	8001650 <HAL_GPIO_Init+0x14c>
 800164a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	e002      	b.n	8001656 <HAL_GPIO_Init+0x152>
 8001650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001652:	3b08      	subs	r3, #8
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	210f      	movs	r1, #15
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	fa01 f303 	lsl.w	r3, r1, r3
 8001664:	43db      	mvns	r3, r3
 8001666:	401a      	ands	r2, r3
 8001668:	6a39      	ldr	r1, [r7, #32]
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	fa01 f303 	lsl.w	r3, r1, r3
 8001670:	431a      	orrs	r2, r3
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800167e:	2b00      	cmp	r3, #0
 8001680:	f000 80b1 	beq.w	80017e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001684:	4b4d      	ldr	r3, [pc, #308]	; (80017bc <HAL_GPIO_Init+0x2b8>)
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	4a4c      	ldr	r2, [pc, #304]	; (80017bc <HAL_GPIO_Init+0x2b8>)
 800168a:	f043 0301 	orr.w	r3, r3, #1
 800168e:	6193      	str	r3, [r2, #24]
 8001690:	4b4a      	ldr	r3, [pc, #296]	; (80017bc <HAL_GPIO_Init+0x2b8>)
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	f003 0301 	and.w	r3, r3, #1
 8001698:	60bb      	str	r3, [r7, #8]
 800169a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800169c:	4a48      	ldr	r2, [pc, #288]	; (80017c0 <HAL_GPIO_Init+0x2bc>)
 800169e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a0:	089b      	lsrs	r3, r3, #2
 80016a2:	3302      	adds	r3, #2
 80016a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ac:	f003 0303 	and.w	r3, r3, #3
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	220f      	movs	r2, #15
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	43db      	mvns	r3, r3
 80016ba:	68fa      	ldr	r2, [r7, #12]
 80016bc:	4013      	ands	r3, r2
 80016be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	4a40      	ldr	r2, [pc, #256]	; (80017c4 <HAL_GPIO_Init+0x2c0>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d013      	beq.n	80016f0 <HAL_GPIO_Init+0x1ec>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4a3f      	ldr	r2, [pc, #252]	; (80017c8 <HAL_GPIO_Init+0x2c4>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d00d      	beq.n	80016ec <HAL_GPIO_Init+0x1e8>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	4a3e      	ldr	r2, [pc, #248]	; (80017cc <HAL_GPIO_Init+0x2c8>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d007      	beq.n	80016e8 <HAL_GPIO_Init+0x1e4>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	4a3d      	ldr	r2, [pc, #244]	; (80017d0 <HAL_GPIO_Init+0x2cc>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d101      	bne.n	80016e4 <HAL_GPIO_Init+0x1e0>
 80016e0:	2303      	movs	r3, #3
 80016e2:	e006      	b.n	80016f2 <HAL_GPIO_Init+0x1ee>
 80016e4:	2304      	movs	r3, #4
 80016e6:	e004      	b.n	80016f2 <HAL_GPIO_Init+0x1ee>
 80016e8:	2302      	movs	r3, #2
 80016ea:	e002      	b.n	80016f2 <HAL_GPIO_Init+0x1ee>
 80016ec:	2301      	movs	r3, #1
 80016ee:	e000      	b.n	80016f2 <HAL_GPIO_Init+0x1ee>
 80016f0:	2300      	movs	r3, #0
 80016f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016f4:	f002 0203 	and.w	r2, r2, #3
 80016f8:	0092      	lsls	r2, r2, #2
 80016fa:	4093      	lsls	r3, r2
 80016fc:	68fa      	ldr	r2, [r7, #12]
 80016fe:	4313      	orrs	r3, r2
 8001700:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001702:	492f      	ldr	r1, [pc, #188]	; (80017c0 <HAL_GPIO_Init+0x2bc>)
 8001704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001706:	089b      	lsrs	r3, r3, #2
 8001708:	3302      	adds	r3, #2
 800170a:	68fa      	ldr	r2, [r7, #12]
 800170c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d006      	beq.n	800172a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800171c:	4b2d      	ldr	r3, [pc, #180]	; (80017d4 <HAL_GPIO_Init+0x2d0>)
 800171e:	689a      	ldr	r2, [r3, #8]
 8001720:	492c      	ldr	r1, [pc, #176]	; (80017d4 <HAL_GPIO_Init+0x2d0>)
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	4313      	orrs	r3, r2
 8001726:	608b      	str	r3, [r1, #8]
 8001728:	e006      	b.n	8001738 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800172a:	4b2a      	ldr	r3, [pc, #168]	; (80017d4 <HAL_GPIO_Init+0x2d0>)
 800172c:	689a      	ldr	r2, [r3, #8]
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	43db      	mvns	r3, r3
 8001732:	4928      	ldr	r1, [pc, #160]	; (80017d4 <HAL_GPIO_Init+0x2d0>)
 8001734:	4013      	ands	r3, r2
 8001736:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d006      	beq.n	8001752 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001744:	4b23      	ldr	r3, [pc, #140]	; (80017d4 <HAL_GPIO_Init+0x2d0>)
 8001746:	68da      	ldr	r2, [r3, #12]
 8001748:	4922      	ldr	r1, [pc, #136]	; (80017d4 <HAL_GPIO_Init+0x2d0>)
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	4313      	orrs	r3, r2
 800174e:	60cb      	str	r3, [r1, #12]
 8001750:	e006      	b.n	8001760 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001752:	4b20      	ldr	r3, [pc, #128]	; (80017d4 <HAL_GPIO_Init+0x2d0>)
 8001754:	68da      	ldr	r2, [r3, #12]
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	43db      	mvns	r3, r3
 800175a:	491e      	ldr	r1, [pc, #120]	; (80017d4 <HAL_GPIO_Init+0x2d0>)
 800175c:	4013      	ands	r3, r2
 800175e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d006      	beq.n	800177a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800176c:	4b19      	ldr	r3, [pc, #100]	; (80017d4 <HAL_GPIO_Init+0x2d0>)
 800176e:	685a      	ldr	r2, [r3, #4]
 8001770:	4918      	ldr	r1, [pc, #96]	; (80017d4 <HAL_GPIO_Init+0x2d0>)
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	4313      	orrs	r3, r2
 8001776:	604b      	str	r3, [r1, #4]
 8001778:	e006      	b.n	8001788 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800177a:	4b16      	ldr	r3, [pc, #88]	; (80017d4 <HAL_GPIO_Init+0x2d0>)
 800177c:	685a      	ldr	r2, [r3, #4]
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	43db      	mvns	r3, r3
 8001782:	4914      	ldr	r1, [pc, #80]	; (80017d4 <HAL_GPIO_Init+0x2d0>)
 8001784:	4013      	ands	r3, r2
 8001786:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d021      	beq.n	80017d8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001794:	4b0f      	ldr	r3, [pc, #60]	; (80017d4 <HAL_GPIO_Init+0x2d0>)
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	490e      	ldr	r1, [pc, #56]	; (80017d4 <HAL_GPIO_Init+0x2d0>)
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	4313      	orrs	r3, r2
 800179e:	600b      	str	r3, [r1, #0]
 80017a0:	e021      	b.n	80017e6 <HAL_GPIO_Init+0x2e2>
 80017a2:	bf00      	nop
 80017a4:	10320000 	.word	0x10320000
 80017a8:	10310000 	.word	0x10310000
 80017ac:	10220000 	.word	0x10220000
 80017b0:	10210000 	.word	0x10210000
 80017b4:	10120000 	.word	0x10120000
 80017b8:	10110000 	.word	0x10110000
 80017bc:	40021000 	.word	0x40021000
 80017c0:	40010000 	.word	0x40010000
 80017c4:	40010800 	.word	0x40010800
 80017c8:	40010c00 	.word	0x40010c00
 80017cc:	40011000 	.word	0x40011000
 80017d0:	40011400 	.word	0x40011400
 80017d4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017d8:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <HAL_GPIO_Init+0x304>)
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	43db      	mvns	r3, r3
 80017e0:	4909      	ldr	r1, [pc, #36]	; (8001808 <HAL_GPIO_Init+0x304>)
 80017e2:	4013      	ands	r3, r2
 80017e4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80017e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e8:	3301      	adds	r3, #1
 80017ea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f2:	fa22 f303 	lsr.w	r3, r2, r3
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	f47f ae8e 	bne.w	8001518 <HAL_GPIO_Init+0x14>
  }
}
 80017fc:	bf00      	nop
 80017fe:	bf00      	nop
 8001800:	372c      	adds	r7, #44	; 0x2c
 8001802:	46bd      	mov	sp, r7
 8001804:	bc80      	pop	{r7}
 8001806:	4770      	bx	lr
 8001808:	40010400 	.word	0x40010400

0800180c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	460b      	mov	r3, r1
 8001816:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689a      	ldr	r2, [r3, #8]
 800181c:	887b      	ldrh	r3, [r7, #2]
 800181e:	4013      	ands	r3, r2
 8001820:	2b00      	cmp	r3, #0
 8001822:	d002      	beq.n	800182a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001824:	2301      	movs	r3, #1
 8001826:	73fb      	strb	r3, [r7, #15]
 8001828:	e001      	b.n	800182e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800182a:	2300      	movs	r3, #0
 800182c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800182e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001830:	4618      	mov	r0, r3
 8001832:	3714      	adds	r7, #20
 8001834:	46bd      	mov	sp, r7
 8001836:	bc80      	pop	{r7}
 8001838:	4770      	bx	lr

0800183a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800183a:	b480      	push	{r7}
 800183c:	b083      	sub	sp, #12
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
 8001842:	460b      	mov	r3, r1
 8001844:	807b      	strh	r3, [r7, #2]
 8001846:	4613      	mov	r3, r2
 8001848:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800184a:	787b      	ldrb	r3, [r7, #1]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d003      	beq.n	8001858 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001850:	887a      	ldrh	r2, [r7, #2]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001856:	e003      	b.n	8001860 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001858:	887b      	ldrh	r3, [r7, #2]
 800185a:	041a      	lsls	r2, r3, #16
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	611a      	str	r2, [r3, #16]
}
 8001860:	bf00      	nop
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	bc80      	pop	{r7}
 8001868:	4770      	bx	lr

0800186a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800186a:	b480      	push	{r7}
 800186c:	b085      	sub	sp, #20
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
 8001872:	460b      	mov	r3, r1
 8001874:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800187c:	887a      	ldrh	r2, [r7, #2]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	4013      	ands	r3, r2
 8001882:	041a      	lsls	r2, r3, #16
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	43d9      	mvns	r1, r3
 8001888:	887b      	ldrh	r3, [r7, #2]
 800188a:	400b      	ands	r3, r1
 800188c:	431a      	orrs	r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	611a      	str	r2, [r3, #16]
}
 8001892:	bf00      	nop
 8001894:	3714      	adds	r7, #20
 8001896:	46bd      	mov	sp, r7
 8001898:	bc80      	pop	{r7}
 800189a:	4770      	bx	lr

0800189c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d101      	bne.n	80018ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e12b      	b.n	8001b06 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d106      	bne.n	80018c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f7ff fb82 	bl	8000fcc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2224      	movs	r2, #36	; 0x24
 80018cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f022 0201 	bic.w	r2, r2, #1
 80018de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001900:	f001 f830 	bl	8002964 <HAL_RCC_GetPCLK1Freq>
 8001904:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	4a81      	ldr	r2, [pc, #516]	; (8001b10 <HAL_I2C_Init+0x274>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d807      	bhi.n	8001920 <HAL_I2C_Init+0x84>
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	4a80      	ldr	r2, [pc, #512]	; (8001b14 <HAL_I2C_Init+0x278>)
 8001914:	4293      	cmp	r3, r2
 8001916:	bf94      	ite	ls
 8001918:	2301      	movls	r3, #1
 800191a:	2300      	movhi	r3, #0
 800191c:	b2db      	uxtb	r3, r3
 800191e:	e006      	b.n	800192e <HAL_I2C_Init+0x92>
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	4a7d      	ldr	r2, [pc, #500]	; (8001b18 <HAL_I2C_Init+0x27c>)
 8001924:	4293      	cmp	r3, r2
 8001926:	bf94      	ite	ls
 8001928:	2301      	movls	r3, #1
 800192a:	2300      	movhi	r3, #0
 800192c:	b2db      	uxtb	r3, r3
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e0e7      	b.n	8001b06 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	4a78      	ldr	r2, [pc, #480]	; (8001b1c <HAL_I2C_Init+0x280>)
 800193a:	fba2 2303 	umull	r2, r3, r2, r3
 800193e:	0c9b      	lsrs	r3, r3, #18
 8001940:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	68ba      	ldr	r2, [r7, #8]
 8001952:	430a      	orrs	r2, r1
 8001954:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	6a1b      	ldr	r3, [r3, #32]
 800195c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	4a6a      	ldr	r2, [pc, #424]	; (8001b10 <HAL_I2C_Init+0x274>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d802      	bhi.n	8001970 <HAL_I2C_Init+0xd4>
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	3301      	adds	r3, #1
 800196e:	e009      	b.n	8001984 <HAL_I2C_Init+0xe8>
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001976:	fb02 f303 	mul.w	r3, r2, r3
 800197a:	4a69      	ldr	r2, [pc, #420]	; (8001b20 <HAL_I2C_Init+0x284>)
 800197c:	fba2 2303 	umull	r2, r3, r2, r3
 8001980:	099b      	lsrs	r3, r3, #6
 8001982:	3301      	adds	r3, #1
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	6812      	ldr	r2, [r2, #0]
 8001988:	430b      	orrs	r3, r1
 800198a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	69db      	ldr	r3, [r3, #28]
 8001992:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001996:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	495c      	ldr	r1, [pc, #368]	; (8001b10 <HAL_I2C_Init+0x274>)
 80019a0:	428b      	cmp	r3, r1
 80019a2:	d819      	bhi.n	80019d8 <HAL_I2C_Init+0x13c>
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	1e59      	subs	r1, r3, #1
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80019b2:	1c59      	adds	r1, r3, #1
 80019b4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80019b8:	400b      	ands	r3, r1
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d00a      	beq.n	80019d4 <HAL_I2C_Init+0x138>
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	1e59      	subs	r1, r3, #1
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80019cc:	3301      	adds	r3, #1
 80019ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019d2:	e051      	b.n	8001a78 <HAL_I2C_Init+0x1dc>
 80019d4:	2304      	movs	r3, #4
 80019d6:	e04f      	b.n	8001a78 <HAL_I2C_Init+0x1dc>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d111      	bne.n	8001a04 <HAL_I2C_Init+0x168>
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	1e58      	subs	r0, r3, #1
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6859      	ldr	r1, [r3, #4]
 80019e8:	460b      	mov	r3, r1
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	440b      	add	r3, r1
 80019ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80019f2:	3301      	adds	r3, #1
 80019f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	bf0c      	ite	eq
 80019fc:	2301      	moveq	r3, #1
 80019fe:	2300      	movne	r3, #0
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	e012      	b.n	8001a2a <HAL_I2C_Init+0x18e>
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	1e58      	subs	r0, r3, #1
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6859      	ldr	r1, [r3, #4]
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	440b      	add	r3, r1
 8001a12:	0099      	lsls	r1, r3, #2
 8001a14:	440b      	add	r3, r1
 8001a16:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	bf0c      	ite	eq
 8001a24:	2301      	moveq	r3, #1
 8001a26:	2300      	movne	r3, #0
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <HAL_I2C_Init+0x196>
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e022      	b.n	8001a78 <HAL_I2C_Init+0x1dc>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d10e      	bne.n	8001a58 <HAL_I2C_Init+0x1bc>
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	1e58      	subs	r0, r3, #1
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6859      	ldr	r1, [r3, #4]
 8001a42:	460b      	mov	r3, r1
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	440b      	add	r3, r1
 8001a48:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a56:	e00f      	b.n	8001a78 <HAL_I2C_Init+0x1dc>
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	1e58      	subs	r0, r3, #1
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6859      	ldr	r1, [r3, #4]
 8001a60:	460b      	mov	r3, r1
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	440b      	add	r3, r1
 8001a66:	0099      	lsls	r1, r3, #2
 8001a68:	440b      	add	r3, r1
 8001a6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a6e:	3301      	adds	r3, #1
 8001a70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a78:	6879      	ldr	r1, [r7, #4]
 8001a7a:	6809      	ldr	r1, [r1, #0]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	69da      	ldr	r2, [r3, #28]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a1b      	ldr	r3, [r3, #32]
 8001a92:	431a      	orrs	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001aa6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	6911      	ldr	r1, [r2, #16]
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	68d2      	ldr	r2, [r2, #12]
 8001ab2:	4311      	orrs	r1, r2
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	6812      	ldr	r2, [r2, #0]
 8001ab8:	430b      	orrs	r3, r1
 8001aba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	695a      	ldr	r2, [r3, #20]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	699b      	ldr	r3, [r3, #24]
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f042 0201 	orr.w	r2, r2, #1
 8001ae6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2220      	movs	r2, #32
 8001af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3710      	adds	r7, #16
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	000186a0 	.word	0x000186a0
 8001b14:	001e847f 	.word	0x001e847f
 8001b18:	003d08ff 	.word	0x003d08ff
 8001b1c:	431bde83 	.word	0x431bde83
 8001b20:	10624dd3 	.word	0x10624dd3

08001b24 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b088      	sub	sp, #32
 8001b28:	af02      	add	r7, sp, #8
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	607a      	str	r2, [r7, #4]
 8001b2e:	461a      	mov	r2, r3
 8001b30:	460b      	mov	r3, r1
 8001b32:	817b      	strh	r3, [r7, #10]
 8001b34:	4613      	mov	r3, r2
 8001b36:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b38:	f7ff fba8 	bl	800128c <HAL_GetTick>
 8001b3c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	2b20      	cmp	r3, #32
 8001b48:	f040 80e0 	bne.w	8001d0c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	9300      	str	r3, [sp, #0]
 8001b50:	2319      	movs	r3, #25
 8001b52:	2201      	movs	r2, #1
 8001b54:	4970      	ldr	r1, [pc, #448]	; (8001d18 <HAL_I2C_Master_Transmit+0x1f4>)
 8001b56:	68f8      	ldr	r0, [r7, #12]
 8001b58:	f000 f964 	bl	8001e24 <I2C_WaitOnFlagUntilTimeout>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001b62:	2302      	movs	r3, #2
 8001b64:	e0d3      	b.n	8001d0e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d101      	bne.n	8001b74 <HAL_I2C_Master_Transmit+0x50>
 8001b70:	2302      	movs	r3, #2
 8001b72:	e0cc      	b.n	8001d0e <HAL_I2C_Master_Transmit+0x1ea>
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d007      	beq.n	8001b9a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f042 0201 	orr.w	r2, r2, #1
 8001b98:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ba8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2221      	movs	r2, #33	; 0x21
 8001bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2210      	movs	r2, #16
 8001bb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	893a      	ldrh	r2, [r7, #8]
 8001bca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bd0:	b29a      	uxth	r2, r3
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	4a50      	ldr	r2, [pc, #320]	; (8001d1c <HAL_I2C_Master_Transmit+0x1f8>)
 8001bda:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001bdc:	8979      	ldrh	r1, [r7, #10]
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	6a3a      	ldr	r2, [r7, #32]
 8001be2:	68f8      	ldr	r0, [r7, #12]
 8001be4:	f000 f89c 	bl	8001d20 <I2C_MasterRequestWrite>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e08d      	b.n	8001d0e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	613b      	str	r3, [r7, #16]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	695b      	ldr	r3, [r3, #20]
 8001bfc:	613b      	str	r3, [r7, #16]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	613b      	str	r3, [r7, #16]
 8001c06:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001c08:	e066      	b.n	8001cd8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c0a:	697a      	ldr	r2, [r7, #20]
 8001c0c:	6a39      	ldr	r1, [r7, #32]
 8001c0e:	68f8      	ldr	r0, [r7, #12]
 8001c10:	f000 fa22 	bl	8002058 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d00d      	beq.n	8001c36 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	2b04      	cmp	r3, #4
 8001c20:	d107      	bne.n	8001c32 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c30:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e06b      	b.n	8001d0e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3a:	781a      	ldrb	r2, [r3, #0]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c46:	1c5a      	adds	r2, r3, #1
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	3b01      	subs	r3, #1
 8001c54:	b29a      	uxth	r2, r3
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	695b      	ldr	r3, [r3, #20]
 8001c6c:	f003 0304 	and.w	r3, r3, #4
 8001c70:	2b04      	cmp	r3, #4
 8001c72:	d11b      	bne.n	8001cac <HAL_I2C_Master_Transmit+0x188>
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d017      	beq.n	8001cac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c80:	781a      	ldrb	r2, [r3, #0]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8c:	1c5a      	adds	r2, r3, #1
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ca4:	3b01      	subs	r3, #1
 8001ca6:	b29a      	uxth	r2, r3
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cac:	697a      	ldr	r2, [r7, #20]
 8001cae:	6a39      	ldr	r1, [r7, #32]
 8001cb0:	68f8      	ldr	r0, [r7, #12]
 8001cb2:	f000 fa19 	bl	80020e8 <I2C_WaitOnBTFFlagUntilTimeout>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d00d      	beq.n	8001cd8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc0:	2b04      	cmp	r3, #4
 8001cc2:	d107      	bne.n	8001cd4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cd2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e01a      	b.n	8001d0e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d194      	bne.n	8001c0a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2220      	movs	r2, #32
 8001cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2200      	movs	r2, #0
 8001d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	e000      	b.n	8001d0e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001d0c:	2302      	movs	r3, #2
  }
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3718      	adds	r7, #24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	00100002 	.word	0x00100002
 8001d1c:	ffff0000 	.word	0xffff0000

08001d20 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b088      	sub	sp, #32
 8001d24:	af02      	add	r7, sp, #8
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	607a      	str	r2, [r7, #4]
 8001d2a:	603b      	str	r3, [r7, #0]
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d34:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	2b08      	cmp	r3, #8
 8001d3a:	d006      	beq.n	8001d4a <I2C_MasterRequestWrite+0x2a>
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d003      	beq.n	8001d4a <I2C_MasterRequestWrite+0x2a>
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001d48:	d108      	bne.n	8001d5c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	e00b      	b.n	8001d74 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d60:	2b12      	cmp	r3, #18
 8001d62:	d107      	bne.n	8001d74 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d72:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	9300      	str	r3, [sp, #0]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001d80:	68f8      	ldr	r0, [r7, #12]
 8001d82:	f000 f84f 	bl	8001e24 <I2C_WaitOnFlagUntilTimeout>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d00d      	beq.n	8001da8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d9a:	d103      	bne.n	8001da4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001da2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e035      	b.n	8001e14 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	691b      	ldr	r3, [r3, #16]
 8001dac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001db0:	d108      	bne.n	8001dc4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001db2:	897b      	ldrh	r3, [r7, #10]
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	461a      	mov	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001dc0:	611a      	str	r2, [r3, #16]
 8001dc2:	e01b      	b.n	8001dfc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001dc4:	897b      	ldrh	r3, [r7, #10]
 8001dc6:	11db      	asrs	r3, r3, #7
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	f003 0306 	and.w	r3, r3, #6
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	f063 030f 	orn	r3, r3, #15
 8001dd4:	b2da      	uxtb	r2, r3
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	490e      	ldr	r1, [pc, #56]	; (8001e1c <I2C_MasterRequestWrite+0xfc>)
 8001de2:	68f8      	ldr	r0, [r7, #12]
 8001de4:	f000 f898 	bl	8001f18 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e010      	b.n	8001e14 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001df2:	897b      	ldrh	r3, [r7, #10]
 8001df4:	b2da      	uxtb	r2, r3
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	4907      	ldr	r1, [pc, #28]	; (8001e20 <I2C_MasterRequestWrite+0x100>)
 8001e02:	68f8      	ldr	r0, [r7, #12]
 8001e04:	f000 f888 	bl	8001f18 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e000      	b.n	8001e14 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3718      	adds	r7, #24
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	00010008 	.word	0x00010008
 8001e20:	00010002 	.word	0x00010002

08001e24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	603b      	str	r3, [r7, #0]
 8001e30:	4613      	mov	r3, r2
 8001e32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e34:	e048      	b.n	8001ec8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e3c:	d044      	beq.n	8001ec8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e3e:	f7ff fa25 	bl	800128c <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	683a      	ldr	r2, [r7, #0]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d302      	bcc.n	8001e54 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d139      	bne.n	8001ec8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	0c1b      	lsrs	r3, r3, #16
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d10d      	bne.n	8001e7a <I2C_WaitOnFlagUntilTimeout+0x56>
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	695b      	ldr	r3, [r3, #20]
 8001e64:	43da      	mvns	r2, r3
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	bf0c      	ite	eq
 8001e70:	2301      	moveq	r3, #1
 8001e72:	2300      	movne	r3, #0
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	461a      	mov	r2, r3
 8001e78:	e00c      	b.n	8001e94 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	43da      	mvns	r2, r3
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	4013      	ands	r3, r2
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	bf0c      	ite	eq
 8001e8c:	2301      	moveq	r3, #1
 8001e8e:	2300      	movne	r3, #0
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	461a      	mov	r2, r3
 8001e94:	79fb      	ldrb	r3, [r7, #7]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d116      	bne.n	8001ec8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2220      	movs	r2, #32
 8001ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb4:	f043 0220 	orr.w	r2, r3, #32
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e023      	b.n	8001f10 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	0c1b      	lsrs	r3, r3, #16
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d10d      	bne.n	8001eee <I2C_WaitOnFlagUntilTimeout+0xca>
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	695b      	ldr	r3, [r3, #20]
 8001ed8:	43da      	mvns	r2, r3
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	4013      	ands	r3, r2
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	bf0c      	ite	eq
 8001ee4:	2301      	moveq	r3, #1
 8001ee6:	2300      	movne	r3, #0
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	461a      	mov	r2, r3
 8001eec:	e00c      	b.n	8001f08 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	43da      	mvns	r2, r3
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	bf0c      	ite	eq
 8001f00:	2301      	moveq	r3, #1
 8001f02:	2300      	movne	r3, #0
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	461a      	mov	r2, r3
 8001f08:	79fb      	ldrb	r3, [r7, #7]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d093      	beq.n	8001e36 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3710      	adds	r7, #16
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	607a      	str	r2, [r7, #4]
 8001f24:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f26:	e071      	b.n	800200c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	695b      	ldr	r3, [r3, #20]
 8001f2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f36:	d123      	bne.n	8001f80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f46:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001f50:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2200      	movs	r2, #0
 8001f56:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2220      	movs	r2, #32
 8001f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6c:	f043 0204 	orr.w	r2, r3, #4
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2200      	movs	r2, #0
 8001f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e067      	b.n	8002050 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f86:	d041      	beq.n	800200c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f88:	f7ff f980 	bl	800128c <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d302      	bcc.n	8001f9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d136      	bne.n	800200c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	0c1b      	lsrs	r3, r3, #16
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d10c      	bne.n	8001fc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	43da      	mvns	r2, r3
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	bf14      	ite	ne
 8001fba:	2301      	movne	r3, #1
 8001fbc:	2300      	moveq	r3, #0
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	e00b      	b.n	8001fda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	43da      	mvns	r2, r3
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	bf14      	ite	ne
 8001fd4:	2301      	movne	r3, #1
 8001fd6:	2300      	moveq	r3, #0
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d016      	beq.n	800200c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2220      	movs	r2, #32
 8001fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff8:	f043 0220 	orr.w	r2, r3, #32
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2200      	movs	r2, #0
 8002004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e021      	b.n	8002050 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	0c1b      	lsrs	r3, r3, #16
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b01      	cmp	r3, #1
 8002014:	d10c      	bne.n	8002030 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	695b      	ldr	r3, [r3, #20]
 800201c:	43da      	mvns	r2, r3
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	4013      	ands	r3, r2
 8002022:	b29b      	uxth	r3, r3
 8002024:	2b00      	cmp	r3, #0
 8002026:	bf14      	ite	ne
 8002028:	2301      	movne	r3, #1
 800202a:	2300      	moveq	r3, #0
 800202c:	b2db      	uxtb	r3, r3
 800202e:	e00b      	b.n	8002048 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	43da      	mvns	r2, r3
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	4013      	ands	r3, r2
 800203c:	b29b      	uxth	r3, r3
 800203e:	2b00      	cmp	r3, #0
 8002040:	bf14      	ite	ne
 8002042:	2301      	movne	r3, #1
 8002044:	2300      	moveq	r3, #0
 8002046:	b2db      	uxtb	r3, r3
 8002048:	2b00      	cmp	r3, #0
 800204a:	f47f af6d 	bne.w	8001f28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	3710      	adds	r7, #16
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002064:	e034      	b.n	80020d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002066:	68f8      	ldr	r0, [r7, #12]
 8002068:	f000 f886 	bl	8002178 <I2C_IsAcknowledgeFailed>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e034      	b.n	80020e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800207c:	d028      	beq.n	80020d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800207e:	f7ff f905 	bl	800128c <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	68ba      	ldr	r2, [r7, #8]
 800208a:	429a      	cmp	r2, r3
 800208c:	d302      	bcc.n	8002094 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d11d      	bne.n	80020d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	695b      	ldr	r3, [r3, #20]
 800209a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800209e:	2b80      	cmp	r3, #128	; 0x80
 80020a0:	d016      	beq.n	80020d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2200      	movs	r2, #0
 80020a6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2220      	movs	r2, #32
 80020ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020bc:	f043 0220 	orr.w	r2, r3, #32
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e007      	b.n	80020e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020da:	2b80      	cmp	r3, #128	; 0x80
 80020dc:	d1c3      	bne.n	8002066 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3710      	adds	r7, #16
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80020f4:	e034      	b.n	8002160 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80020f6:	68f8      	ldr	r0, [r7, #12]
 80020f8:	f000 f83e 	bl	8002178 <I2C_IsAcknowledgeFailed>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e034      	b.n	8002170 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800210c:	d028      	beq.n	8002160 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800210e:	f7ff f8bd 	bl	800128c <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	68ba      	ldr	r2, [r7, #8]
 800211a:	429a      	cmp	r2, r3
 800211c:	d302      	bcc.n	8002124 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d11d      	bne.n	8002160 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	695b      	ldr	r3, [r3, #20]
 800212a:	f003 0304 	and.w	r3, r3, #4
 800212e:	2b04      	cmp	r3, #4
 8002130:	d016      	beq.n	8002160 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2200      	movs	r2, #0
 8002136:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2220      	movs	r2, #32
 800213c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2200      	movs	r2, #0
 8002144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214c:	f043 0220 	orr.w	r2, r3, #32
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2200      	movs	r2, #0
 8002158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e007      	b.n	8002170 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	f003 0304 	and.w	r3, r3, #4
 800216a:	2b04      	cmp	r3, #4
 800216c:	d1c3      	bne.n	80020f6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800216e:	2300      	movs	r3, #0
}
 8002170:	4618      	mov	r0, r3
 8002172:	3710      	adds	r7, #16
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	695b      	ldr	r3, [r3, #20]
 8002186:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800218a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800218e:	d11b      	bne.n	80021c8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002198:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2220      	movs	r2, #32
 80021a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b4:	f043 0204 	orr.w	r2, r3, #4
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e000      	b.n	80021ca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bc80      	pop	{r7}
 80021d2:	4770      	bx	lr

080021d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e26c      	b.n	80026c0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	f000 8087 	beq.w	8002302 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021f4:	4b92      	ldr	r3, [pc, #584]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f003 030c 	and.w	r3, r3, #12
 80021fc:	2b04      	cmp	r3, #4
 80021fe:	d00c      	beq.n	800221a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002200:	4b8f      	ldr	r3, [pc, #572]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f003 030c 	and.w	r3, r3, #12
 8002208:	2b08      	cmp	r3, #8
 800220a:	d112      	bne.n	8002232 <HAL_RCC_OscConfig+0x5e>
 800220c:	4b8c      	ldr	r3, [pc, #560]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002214:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002218:	d10b      	bne.n	8002232 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800221a:	4b89      	ldr	r3, [pc, #548]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d06c      	beq.n	8002300 <HAL_RCC_OscConfig+0x12c>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d168      	bne.n	8002300 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e246      	b.n	80026c0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800223a:	d106      	bne.n	800224a <HAL_RCC_OscConfig+0x76>
 800223c:	4b80      	ldr	r3, [pc, #512]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a7f      	ldr	r2, [pc, #508]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 8002242:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002246:	6013      	str	r3, [r2, #0]
 8002248:	e02e      	b.n	80022a8 <HAL_RCC_OscConfig+0xd4>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d10c      	bne.n	800226c <HAL_RCC_OscConfig+0x98>
 8002252:	4b7b      	ldr	r3, [pc, #492]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a7a      	ldr	r2, [pc, #488]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 8002258:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800225c:	6013      	str	r3, [r2, #0]
 800225e:	4b78      	ldr	r3, [pc, #480]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a77      	ldr	r2, [pc, #476]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 8002264:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002268:	6013      	str	r3, [r2, #0]
 800226a:	e01d      	b.n	80022a8 <HAL_RCC_OscConfig+0xd4>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002274:	d10c      	bne.n	8002290 <HAL_RCC_OscConfig+0xbc>
 8002276:	4b72      	ldr	r3, [pc, #456]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a71      	ldr	r2, [pc, #452]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 800227c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002280:	6013      	str	r3, [r2, #0]
 8002282:	4b6f      	ldr	r3, [pc, #444]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a6e      	ldr	r2, [pc, #440]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 8002288:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800228c:	6013      	str	r3, [r2, #0]
 800228e:	e00b      	b.n	80022a8 <HAL_RCC_OscConfig+0xd4>
 8002290:	4b6b      	ldr	r3, [pc, #428]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a6a      	ldr	r2, [pc, #424]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 8002296:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800229a:	6013      	str	r3, [r2, #0]
 800229c:	4b68      	ldr	r3, [pc, #416]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a67      	ldr	r2, [pc, #412]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 80022a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d013      	beq.n	80022d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b0:	f7fe ffec 	bl	800128c <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022b6:	e008      	b.n	80022ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022b8:	f7fe ffe8 	bl	800128c <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b64      	cmp	r3, #100	; 0x64
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e1fa      	b.n	80026c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ca:	4b5d      	ldr	r3, [pc, #372]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d0f0      	beq.n	80022b8 <HAL_RCC_OscConfig+0xe4>
 80022d6:	e014      	b.n	8002302 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d8:	f7fe ffd8 	bl	800128c <HAL_GetTick>
 80022dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022de:	e008      	b.n	80022f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022e0:	f7fe ffd4 	bl	800128c <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b64      	cmp	r3, #100	; 0x64
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e1e6      	b.n	80026c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022f2:	4b53      	ldr	r3, [pc, #332]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1f0      	bne.n	80022e0 <HAL_RCC_OscConfig+0x10c>
 80022fe:	e000      	b.n	8002302 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002300:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d063      	beq.n	80023d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800230e:	4b4c      	ldr	r3, [pc, #304]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f003 030c 	and.w	r3, r3, #12
 8002316:	2b00      	cmp	r3, #0
 8002318:	d00b      	beq.n	8002332 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800231a:	4b49      	ldr	r3, [pc, #292]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f003 030c 	and.w	r3, r3, #12
 8002322:	2b08      	cmp	r3, #8
 8002324:	d11c      	bne.n	8002360 <HAL_RCC_OscConfig+0x18c>
 8002326:	4b46      	ldr	r3, [pc, #280]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d116      	bne.n	8002360 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002332:	4b43      	ldr	r3, [pc, #268]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d005      	beq.n	800234a <HAL_RCC_OscConfig+0x176>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d001      	beq.n	800234a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e1ba      	b.n	80026c0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800234a:	4b3d      	ldr	r3, [pc, #244]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	695b      	ldr	r3, [r3, #20]
 8002356:	00db      	lsls	r3, r3, #3
 8002358:	4939      	ldr	r1, [pc, #228]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 800235a:	4313      	orrs	r3, r2
 800235c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800235e:	e03a      	b.n	80023d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d020      	beq.n	80023aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002368:	4b36      	ldr	r3, [pc, #216]	; (8002444 <HAL_RCC_OscConfig+0x270>)
 800236a:	2201      	movs	r2, #1
 800236c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800236e:	f7fe ff8d 	bl	800128c <HAL_GetTick>
 8002372:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002374:	e008      	b.n	8002388 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002376:	f7fe ff89 	bl	800128c <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	2b02      	cmp	r3, #2
 8002382:	d901      	bls.n	8002388 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e19b      	b.n	80026c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002388:	4b2d      	ldr	r3, [pc, #180]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d0f0      	beq.n	8002376 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002394:	4b2a      	ldr	r3, [pc, #168]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	695b      	ldr	r3, [r3, #20]
 80023a0:	00db      	lsls	r3, r3, #3
 80023a2:	4927      	ldr	r1, [pc, #156]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	600b      	str	r3, [r1, #0]
 80023a8:	e015      	b.n	80023d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023aa:	4b26      	ldr	r3, [pc, #152]	; (8002444 <HAL_RCC_OscConfig+0x270>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b0:	f7fe ff6c 	bl	800128c <HAL_GetTick>
 80023b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023b6:	e008      	b.n	80023ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023b8:	f7fe ff68 	bl	800128c <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e17a      	b.n	80026c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ca:	4b1d      	ldr	r3, [pc, #116]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d1f0      	bne.n	80023b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0308 	and.w	r3, r3, #8
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d03a      	beq.n	8002458 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d019      	beq.n	800241e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023ea:	4b17      	ldr	r3, [pc, #92]	; (8002448 <HAL_RCC_OscConfig+0x274>)
 80023ec:	2201      	movs	r2, #1
 80023ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023f0:	f7fe ff4c 	bl	800128c <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023f6:	e008      	b.n	800240a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023f8:	f7fe ff48 	bl	800128c <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b02      	cmp	r3, #2
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e15a      	b.n	80026c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800240a:	4b0d      	ldr	r3, [pc, #52]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 800240c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d0f0      	beq.n	80023f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002416:	2001      	movs	r0, #1
 8002418:	f000 fab8 	bl	800298c <RCC_Delay>
 800241c:	e01c      	b.n	8002458 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800241e:	4b0a      	ldr	r3, [pc, #40]	; (8002448 <HAL_RCC_OscConfig+0x274>)
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002424:	f7fe ff32 	bl	800128c <HAL_GetTick>
 8002428:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800242a:	e00f      	b.n	800244c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800242c:	f7fe ff2e 	bl	800128c <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d908      	bls.n	800244c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e140      	b.n	80026c0 <HAL_RCC_OscConfig+0x4ec>
 800243e:	bf00      	nop
 8002440:	40021000 	.word	0x40021000
 8002444:	42420000 	.word	0x42420000
 8002448:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800244c:	4b9e      	ldr	r3, [pc, #632]	; (80026c8 <HAL_RCC_OscConfig+0x4f4>)
 800244e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d1e9      	bne.n	800242c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0304 	and.w	r3, r3, #4
 8002460:	2b00      	cmp	r3, #0
 8002462:	f000 80a6 	beq.w	80025b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002466:	2300      	movs	r3, #0
 8002468:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800246a:	4b97      	ldr	r3, [pc, #604]	; (80026c8 <HAL_RCC_OscConfig+0x4f4>)
 800246c:	69db      	ldr	r3, [r3, #28]
 800246e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d10d      	bne.n	8002492 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002476:	4b94      	ldr	r3, [pc, #592]	; (80026c8 <HAL_RCC_OscConfig+0x4f4>)
 8002478:	69db      	ldr	r3, [r3, #28]
 800247a:	4a93      	ldr	r2, [pc, #588]	; (80026c8 <HAL_RCC_OscConfig+0x4f4>)
 800247c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002480:	61d3      	str	r3, [r2, #28]
 8002482:	4b91      	ldr	r3, [pc, #580]	; (80026c8 <HAL_RCC_OscConfig+0x4f4>)
 8002484:	69db      	ldr	r3, [r3, #28]
 8002486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800248a:	60bb      	str	r3, [r7, #8]
 800248c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800248e:	2301      	movs	r3, #1
 8002490:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002492:	4b8e      	ldr	r3, [pc, #568]	; (80026cc <HAL_RCC_OscConfig+0x4f8>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800249a:	2b00      	cmp	r3, #0
 800249c:	d118      	bne.n	80024d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800249e:	4b8b      	ldr	r3, [pc, #556]	; (80026cc <HAL_RCC_OscConfig+0x4f8>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a8a      	ldr	r2, [pc, #552]	; (80026cc <HAL_RCC_OscConfig+0x4f8>)
 80024a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024aa:	f7fe feef 	bl	800128c <HAL_GetTick>
 80024ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b0:	e008      	b.n	80024c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024b2:	f7fe feeb 	bl	800128c <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	2b64      	cmp	r3, #100	; 0x64
 80024be:	d901      	bls.n	80024c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e0fd      	b.n	80026c0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c4:	4b81      	ldr	r3, [pc, #516]	; (80026cc <HAL_RCC_OscConfig+0x4f8>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d0f0      	beq.n	80024b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d106      	bne.n	80024e6 <HAL_RCC_OscConfig+0x312>
 80024d8:	4b7b      	ldr	r3, [pc, #492]	; (80026c8 <HAL_RCC_OscConfig+0x4f4>)
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	4a7a      	ldr	r2, [pc, #488]	; (80026c8 <HAL_RCC_OscConfig+0x4f4>)
 80024de:	f043 0301 	orr.w	r3, r3, #1
 80024e2:	6213      	str	r3, [r2, #32]
 80024e4:	e02d      	b.n	8002542 <HAL_RCC_OscConfig+0x36e>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d10c      	bne.n	8002508 <HAL_RCC_OscConfig+0x334>
 80024ee:	4b76      	ldr	r3, [pc, #472]	; (80026c8 <HAL_RCC_OscConfig+0x4f4>)
 80024f0:	6a1b      	ldr	r3, [r3, #32]
 80024f2:	4a75      	ldr	r2, [pc, #468]	; (80026c8 <HAL_RCC_OscConfig+0x4f4>)
 80024f4:	f023 0301 	bic.w	r3, r3, #1
 80024f8:	6213      	str	r3, [r2, #32]
 80024fa:	4b73      	ldr	r3, [pc, #460]	; (80026c8 <HAL_RCC_OscConfig+0x4f4>)
 80024fc:	6a1b      	ldr	r3, [r3, #32]
 80024fe:	4a72      	ldr	r2, [pc, #456]	; (80026c8 <HAL_RCC_OscConfig+0x4f4>)
 8002500:	f023 0304 	bic.w	r3, r3, #4
 8002504:	6213      	str	r3, [r2, #32]
 8002506:	e01c      	b.n	8002542 <HAL_RCC_OscConfig+0x36e>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	2b05      	cmp	r3, #5
 800250e:	d10c      	bne.n	800252a <HAL_RCC_OscConfig+0x356>
 8002510:	4b6d      	ldr	r3, [pc, #436]	; (80026c8 <HAL_RCC_OscConfig+0x4f4>)
 8002512:	6a1b      	ldr	r3, [r3, #32]
 8002514:	4a6c      	ldr	r2, [pc, #432]	; (80026c8 <HAL_RCC_OscConfig+0x4f4>)
 8002516:	f043 0304 	orr.w	r3, r3, #4
 800251a:	6213      	str	r3, [r2, #32]
 800251c:	4b6a      	ldr	r3, [pc, #424]	; (80026c8 <HAL_RCC_OscConfig+0x4f4>)
 800251e:	6a1b      	ldr	r3, [r3, #32]
 8002520:	4a69      	ldr	r2, [pc, #420]	; (80026c8 <HAL_RCC_OscConfig+0x4f4>)
 8002522:	f043 0301 	orr.w	r3, r3, #1
 8002526:	6213      	str	r3, [r2, #32]
 8002528:	e00b      	b.n	8002542 <HAL_RCC_OscConfig+0x36e>
 800252a:	4b67      	ldr	r3, [pc, #412]	; (80026c8 <HAL_RCC_OscConfig+0x4f4>)
 800252c:	6a1b      	ldr	r3, [r3, #32]
 800252e:	4a66      	ldr	r2, [pc, #408]	; (80026c8 <HAL_RCC_OscConfig+0x4f4>)
 8002530:	f023 0301 	bic.w	r3, r3, #1
 8002534:	6213      	str	r3, [r2, #32]
 8002536:	4b64      	ldr	r3, [pc, #400]	; (80026c8 <HAL_RCC_OscConfig+0x4f4>)
 8002538:	6a1b      	ldr	r3, [r3, #32]
 800253a:	4a63      	ldr	r2, [pc, #396]	; (80026c8 <HAL_RCC_OscConfig+0x4f4>)
 800253c:	f023 0304 	bic.w	r3, r3, #4
 8002540:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d015      	beq.n	8002576 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800254a:	f7fe fe9f 	bl	800128c <HAL_GetTick>
 800254e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002550:	e00a      	b.n	8002568 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002552:	f7fe fe9b 	bl	800128c <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002560:	4293      	cmp	r3, r2
 8002562:	d901      	bls.n	8002568 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e0ab      	b.n	80026c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002568:	4b57      	ldr	r3, [pc, #348]	; (80026c8 <HAL_RCC_OscConfig+0x4f4>)
 800256a:	6a1b      	ldr	r3, [r3, #32]
 800256c:	f003 0302 	and.w	r3, r3, #2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d0ee      	beq.n	8002552 <HAL_RCC_OscConfig+0x37e>
 8002574:	e014      	b.n	80025a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002576:	f7fe fe89 	bl	800128c <HAL_GetTick>
 800257a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800257c:	e00a      	b.n	8002594 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800257e:	f7fe fe85 	bl	800128c <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	f241 3288 	movw	r2, #5000	; 0x1388
 800258c:	4293      	cmp	r3, r2
 800258e:	d901      	bls.n	8002594 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e095      	b.n	80026c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002594:	4b4c      	ldr	r3, [pc, #304]	; (80026c8 <HAL_RCC_OscConfig+0x4f4>)
 8002596:	6a1b      	ldr	r3, [r3, #32]
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1ee      	bne.n	800257e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025a0:	7dfb      	ldrb	r3, [r7, #23]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d105      	bne.n	80025b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025a6:	4b48      	ldr	r3, [pc, #288]	; (80026c8 <HAL_RCC_OscConfig+0x4f4>)
 80025a8:	69db      	ldr	r3, [r3, #28]
 80025aa:	4a47      	ldr	r2, [pc, #284]	; (80026c8 <HAL_RCC_OscConfig+0x4f4>)
 80025ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	69db      	ldr	r3, [r3, #28]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	f000 8081 	beq.w	80026be <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025bc:	4b42      	ldr	r3, [pc, #264]	; (80026c8 <HAL_RCC_OscConfig+0x4f4>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f003 030c 	and.w	r3, r3, #12
 80025c4:	2b08      	cmp	r3, #8
 80025c6:	d061      	beq.n	800268c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	69db      	ldr	r3, [r3, #28]
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d146      	bne.n	800265e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025d0:	4b3f      	ldr	r3, [pc, #252]	; (80026d0 <HAL_RCC_OscConfig+0x4fc>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d6:	f7fe fe59 	bl	800128c <HAL_GetTick>
 80025da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025dc:	e008      	b.n	80025f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025de:	f7fe fe55 	bl	800128c <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d901      	bls.n	80025f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e067      	b.n	80026c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025f0:	4b35      	ldr	r3, [pc, #212]	; (80026c8 <HAL_RCC_OscConfig+0x4f4>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d1f0      	bne.n	80025de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a1b      	ldr	r3, [r3, #32]
 8002600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002604:	d108      	bne.n	8002618 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002606:	4b30      	ldr	r3, [pc, #192]	; (80026c8 <HAL_RCC_OscConfig+0x4f4>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	492d      	ldr	r1, [pc, #180]	; (80026c8 <HAL_RCC_OscConfig+0x4f4>)
 8002614:	4313      	orrs	r3, r2
 8002616:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002618:	4b2b      	ldr	r3, [pc, #172]	; (80026c8 <HAL_RCC_OscConfig+0x4f4>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a19      	ldr	r1, [r3, #32]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002628:	430b      	orrs	r3, r1
 800262a:	4927      	ldr	r1, [pc, #156]	; (80026c8 <HAL_RCC_OscConfig+0x4f4>)
 800262c:	4313      	orrs	r3, r2
 800262e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002630:	4b27      	ldr	r3, [pc, #156]	; (80026d0 <HAL_RCC_OscConfig+0x4fc>)
 8002632:	2201      	movs	r2, #1
 8002634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002636:	f7fe fe29 	bl	800128c <HAL_GetTick>
 800263a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800263c:	e008      	b.n	8002650 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800263e:	f7fe fe25 	bl	800128c <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d901      	bls.n	8002650 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e037      	b.n	80026c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002650:	4b1d      	ldr	r3, [pc, #116]	; (80026c8 <HAL_RCC_OscConfig+0x4f4>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d0f0      	beq.n	800263e <HAL_RCC_OscConfig+0x46a>
 800265c:	e02f      	b.n	80026be <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800265e:	4b1c      	ldr	r3, [pc, #112]	; (80026d0 <HAL_RCC_OscConfig+0x4fc>)
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002664:	f7fe fe12 	bl	800128c <HAL_GetTick>
 8002668:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800266a:	e008      	b.n	800267e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800266c:	f7fe fe0e 	bl	800128c <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b02      	cmp	r3, #2
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e020      	b.n	80026c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800267e:	4b12      	ldr	r3, [pc, #72]	; (80026c8 <HAL_RCC_OscConfig+0x4f4>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d1f0      	bne.n	800266c <HAL_RCC_OscConfig+0x498>
 800268a:	e018      	b.n	80026be <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	69db      	ldr	r3, [r3, #28]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d101      	bne.n	8002698 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e013      	b.n	80026c0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002698:	4b0b      	ldr	r3, [pc, #44]	; (80026c8 <HAL_RCC_OscConfig+0x4f4>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6a1b      	ldr	r3, [r3, #32]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d106      	bne.n	80026ba <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d001      	beq.n	80026be <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e000      	b.n	80026c0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80026be:	2300      	movs	r3, #0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3718      	adds	r7, #24
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40021000 	.word	0x40021000
 80026cc:	40007000 	.word	0x40007000
 80026d0:	42420060 	.word	0x42420060

080026d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d101      	bne.n	80026e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e0d0      	b.n	800288a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026e8:	4b6a      	ldr	r3, [pc, #424]	; (8002894 <HAL_RCC_ClockConfig+0x1c0>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0307 	and.w	r3, r3, #7
 80026f0:	683a      	ldr	r2, [r7, #0]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d910      	bls.n	8002718 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026f6:	4b67      	ldr	r3, [pc, #412]	; (8002894 <HAL_RCC_ClockConfig+0x1c0>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f023 0207 	bic.w	r2, r3, #7
 80026fe:	4965      	ldr	r1, [pc, #404]	; (8002894 <HAL_RCC_ClockConfig+0x1c0>)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	4313      	orrs	r3, r2
 8002704:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002706:	4b63      	ldr	r3, [pc, #396]	; (8002894 <HAL_RCC_ClockConfig+0x1c0>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0307 	and.w	r3, r3, #7
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	429a      	cmp	r2, r3
 8002712:	d001      	beq.n	8002718 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e0b8      	b.n	800288a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0302 	and.w	r3, r3, #2
 8002720:	2b00      	cmp	r3, #0
 8002722:	d020      	beq.n	8002766 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0304 	and.w	r3, r3, #4
 800272c:	2b00      	cmp	r3, #0
 800272e:	d005      	beq.n	800273c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002730:	4b59      	ldr	r3, [pc, #356]	; (8002898 <HAL_RCC_ClockConfig+0x1c4>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	4a58      	ldr	r2, [pc, #352]	; (8002898 <HAL_RCC_ClockConfig+0x1c4>)
 8002736:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800273a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0308 	and.w	r3, r3, #8
 8002744:	2b00      	cmp	r3, #0
 8002746:	d005      	beq.n	8002754 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002748:	4b53      	ldr	r3, [pc, #332]	; (8002898 <HAL_RCC_ClockConfig+0x1c4>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	4a52      	ldr	r2, [pc, #328]	; (8002898 <HAL_RCC_ClockConfig+0x1c4>)
 800274e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002752:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002754:	4b50      	ldr	r3, [pc, #320]	; (8002898 <HAL_RCC_ClockConfig+0x1c4>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	494d      	ldr	r1, [pc, #308]	; (8002898 <HAL_RCC_ClockConfig+0x1c4>)
 8002762:	4313      	orrs	r3, r2
 8002764:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	2b00      	cmp	r3, #0
 8002770:	d040      	beq.n	80027f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d107      	bne.n	800278a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800277a:	4b47      	ldr	r3, [pc, #284]	; (8002898 <HAL_RCC_ClockConfig+0x1c4>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d115      	bne.n	80027b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e07f      	b.n	800288a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	2b02      	cmp	r3, #2
 8002790:	d107      	bne.n	80027a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002792:	4b41      	ldr	r3, [pc, #260]	; (8002898 <HAL_RCC_ClockConfig+0x1c4>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d109      	bne.n	80027b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e073      	b.n	800288a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027a2:	4b3d      	ldr	r3, [pc, #244]	; (8002898 <HAL_RCC_ClockConfig+0x1c4>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e06b      	b.n	800288a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027b2:	4b39      	ldr	r3, [pc, #228]	; (8002898 <HAL_RCC_ClockConfig+0x1c4>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f023 0203 	bic.w	r2, r3, #3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	4936      	ldr	r1, [pc, #216]	; (8002898 <HAL_RCC_ClockConfig+0x1c4>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027c4:	f7fe fd62 	bl	800128c <HAL_GetTick>
 80027c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ca:	e00a      	b.n	80027e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027cc:	f7fe fd5e 	bl	800128c <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027da:	4293      	cmp	r3, r2
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e053      	b.n	800288a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027e2:	4b2d      	ldr	r3, [pc, #180]	; (8002898 <HAL_RCC_ClockConfig+0x1c4>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f003 020c 	and.w	r2, r3, #12
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d1eb      	bne.n	80027cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027f4:	4b27      	ldr	r3, [pc, #156]	; (8002894 <HAL_RCC_ClockConfig+0x1c0>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0307 	and.w	r3, r3, #7
 80027fc:	683a      	ldr	r2, [r7, #0]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d210      	bcs.n	8002824 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002802:	4b24      	ldr	r3, [pc, #144]	; (8002894 <HAL_RCC_ClockConfig+0x1c0>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f023 0207 	bic.w	r2, r3, #7
 800280a:	4922      	ldr	r1, [pc, #136]	; (8002894 <HAL_RCC_ClockConfig+0x1c0>)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	4313      	orrs	r3, r2
 8002810:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002812:	4b20      	ldr	r3, [pc, #128]	; (8002894 <HAL_RCC_ClockConfig+0x1c0>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0307 	and.w	r3, r3, #7
 800281a:	683a      	ldr	r2, [r7, #0]
 800281c:	429a      	cmp	r2, r3
 800281e:	d001      	beq.n	8002824 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e032      	b.n	800288a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0304 	and.w	r3, r3, #4
 800282c:	2b00      	cmp	r3, #0
 800282e:	d008      	beq.n	8002842 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002830:	4b19      	ldr	r3, [pc, #100]	; (8002898 <HAL_RCC_ClockConfig+0x1c4>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	4916      	ldr	r1, [pc, #88]	; (8002898 <HAL_RCC_ClockConfig+0x1c4>)
 800283e:	4313      	orrs	r3, r2
 8002840:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0308 	and.w	r3, r3, #8
 800284a:	2b00      	cmp	r3, #0
 800284c:	d009      	beq.n	8002862 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800284e:	4b12      	ldr	r3, [pc, #72]	; (8002898 <HAL_RCC_ClockConfig+0x1c4>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	00db      	lsls	r3, r3, #3
 800285c:	490e      	ldr	r1, [pc, #56]	; (8002898 <HAL_RCC_ClockConfig+0x1c4>)
 800285e:	4313      	orrs	r3, r2
 8002860:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002862:	f000 f821 	bl	80028a8 <HAL_RCC_GetSysClockFreq>
 8002866:	4602      	mov	r2, r0
 8002868:	4b0b      	ldr	r3, [pc, #44]	; (8002898 <HAL_RCC_ClockConfig+0x1c4>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	091b      	lsrs	r3, r3, #4
 800286e:	f003 030f 	and.w	r3, r3, #15
 8002872:	490a      	ldr	r1, [pc, #40]	; (800289c <HAL_RCC_ClockConfig+0x1c8>)
 8002874:	5ccb      	ldrb	r3, [r1, r3]
 8002876:	fa22 f303 	lsr.w	r3, r2, r3
 800287a:	4a09      	ldr	r2, [pc, #36]	; (80028a0 <HAL_RCC_ClockConfig+0x1cc>)
 800287c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800287e:	4b09      	ldr	r3, [pc, #36]	; (80028a4 <HAL_RCC_ClockConfig+0x1d0>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	f7fe fcc0 	bl	8001208 <HAL_InitTick>

  return HAL_OK;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3710      	adds	r7, #16
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	40022000 	.word	0x40022000
 8002898:	40021000 	.word	0x40021000
 800289c:	08003aec 	.word	0x08003aec
 80028a0:	2000005c 	.word	0x2000005c
 80028a4:	20000060 	.word	0x20000060

080028a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b087      	sub	sp, #28
 80028ac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028ae:	2300      	movs	r3, #0
 80028b0:	60fb      	str	r3, [r7, #12]
 80028b2:	2300      	movs	r3, #0
 80028b4:	60bb      	str	r3, [r7, #8]
 80028b6:	2300      	movs	r3, #0
 80028b8:	617b      	str	r3, [r7, #20]
 80028ba:	2300      	movs	r3, #0
 80028bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80028be:	2300      	movs	r3, #0
 80028c0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028c2:	4b1e      	ldr	r3, [pc, #120]	; (800293c <HAL_RCC_GetSysClockFreq+0x94>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f003 030c 	and.w	r3, r3, #12
 80028ce:	2b04      	cmp	r3, #4
 80028d0:	d002      	beq.n	80028d8 <HAL_RCC_GetSysClockFreq+0x30>
 80028d2:	2b08      	cmp	r3, #8
 80028d4:	d003      	beq.n	80028de <HAL_RCC_GetSysClockFreq+0x36>
 80028d6:	e027      	b.n	8002928 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028d8:	4b19      	ldr	r3, [pc, #100]	; (8002940 <HAL_RCC_GetSysClockFreq+0x98>)
 80028da:	613b      	str	r3, [r7, #16]
      break;
 80028dc:	e027      	b.n	800292e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	0c9b      	lsrs	r3, r3, #18
 80028e2:	f003 030f 	and.w	r3, r3, #15
 80028e6:	4a17      	ldr	r2, [pc, #92]	; (8002944 <HAL_RCC_GetSysClockFreq+0x9c>)
 80028e8:	5cd3      	ldrb	r3, [r2, r3]
 80028ea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d010      	beq.n	8002918 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028f6:	4b11      	ldr	r3, [pc, #68]	; (800293c <HAL_RCC_GetSysClockFreq+0x94>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	0c5b      	lsrs	r3, r3, #17
 80028fc:	f003 0301 	and.w	r3, r3, #1
 8002900:	4a11      	ldr	r2, [pc, #68]	; (8002948 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002902:	5cd3      	ldrb	r3, [r2, r3]
 8002904:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a0d      	ldr	r2, [pc, #52]	; (8002940 <HAL_RCC_GetSysClockFreq+0x98>)
 800290a:	fb02 f203 	mul.w	r2, r2, r3
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	fbb2 f3f3 	udiv	r3, r2, r3
 8002914:	617b      	str	r3, [r7, #20]
 8002916:	e004      	b.n	8002922 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a0c      	ldr	r2, [pc, #48]	; (800294c <HAL_RCC_GetSysClockFreq+0xa4>)
 800291c:	fb02 f303 	mul.w	r3, r2, r3
 8002920:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	613b      	str	r3, [r7, #16]
      break;
 8002926:	e002      	b.n	800292e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002928:	4b05      	ldr	r3, [pc, #20]	; (8002940 <HAL_RCC_GetSysClockFreq+0x98>)
 800292a:	613b      	str	r3, [r7, #16]
      break;
 800292c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800292e:	693b      	ldr	r3, [r7, #16]
}
 8002930:	4618      	mov	r0, r3
 8002932:	371c      	adds	r7, #28
 8002934:	46bd      	mov	sp, r7
 8002936:	bc80      	pop	{r7}
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	40021000 	.word	0x40021000
 8002940:	007a1200 	.word	0x007a1200
 8002944:	08003b04 	.word	0x08003b04
 8002948:	08003b14 	.word	0x08003b14
 800294c:	003d0900 	.word	0x003d0900

08002950 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002954:	4b02      	ldr	r3, [pc, #8]	; (8002960 <HAL_RCC_GetHCLKFreq+0x10>)
 8002956:	681b      	ldr	r3, [r3, #0]
}
 8002958:	4618      	mov	r0, r3
 800295a:	46bd      	mov	sp, r7
 800295c:	bc80      	pop	{r7}
 800295e:	4770      	bx	lr
 8002960:	2000005c 	.word	0x2000005c

08002964 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002968:	f7ff fff2 	bl	8002950 <HAL_RCC_GetHCLKFreq>
 800296c:	4602      	mov	r2, r0
 800296e:	4b05      	ldr	r3, [pc, #20]	; (8002984 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	0a1b      	lsrs	r3, r3, #8
 8002974:	f003 0307 	and.w	r3, r3, #7
 8002978:	4903      	ldr	r1, [pc, #12]	; (8002988 <HAL_RCC_GetPCLK1Freq+0x24>)
 800297a:	5ccb      	ldrb	r3, [r1, r3]
 800297c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002980:	4618      	mov	r0, r3
 8002982:	bd80      	pop	{r7, pc}
 8002984:	40021000 	.word	0x40021000
 8002988:	08003afc 	.word	0x08003afc

0800298c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800298c:	b480      	push	{r7}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002994:	4b0a      	ldr	r3, [pc, #40]	; (80029c0 <RCC_Delay+0x34>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a0a      	ldr	r2, [pc, #40]	; (80029c4 <RCC_Delay+0x38>)
 800299a:	fba2 2303 	umull	r2, r3, r2, r3
 800299e:	0a5b      	lsrs	r3, r3, #9
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	fb02 f303 	mul.w	r3, r2, r3
 80029a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80029a8:	bf00      	nop
  }
  while (Delay --);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	1e5a      	subs	r2, r3, #1
 80029ae:	60fa      	str	r2, [r7, #12]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d1f9      	bne.n	80029a8 <RCC_Delay+0x1c>
}
 80029b4:	bf00      	nop
 80029b6:	bf00      	nop
 80029b8:	3714      	adds	r7, #20
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bc80      	pop	{r7}
 80029be:	4770      	bx	lr
 80029c0:	2000005c 	.word	0x2000005c
 80029c4:	10624dd3 	.word	0x10624dd3

080029c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e041      	b.n	8002a5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d106      	bne.n	80029f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f7fe fb3c 	bl	800106c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2202      	movs	r2, #2
 80029f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	3304      	adds	r3, #4
 8002a04:	4619      	mov	r1, r3
 8002a06:	4610      	mov	r0, r2
 8002a08:	f000 fa5c 	bl	8002ec4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
	...

08002a68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d001      	beq.n	8002a80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e03a      	b.n	8002af6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2202      	movs	r2, #2
 8002a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	68da      	ldr	r2, [r3, #12]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f042 0201 	orr.w	r2, r2, #1
 8002a96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a18      	ldr	r2, [pc, #96]	; (8002b00 <HAL_TIM_Base_Start_IT+0x98>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d00e      	beq.n	8002ac0 <HAL_TIM_Base_Start_IT+0x58>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aaa:	d009      	beq.n	8002ac0 <HAL_TIM_Base_Start_IT+0x58>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a14      	ldr	r2, [pc, #80]	; (8002b04 <HAL_TIM_Base_Start_IT+0x9c>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d004      	beq.n	8002ac0 <HAL_TIM_Base_Start_IT+0x58>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a13      	ldr	r2, [pc, #76]	; (8002b08 <HAL_TIM_Base_Start_IT+0xa0>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d111      	bne.n	8002ae4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f003 0307 	and.w	r3, r3, #7
 8002aca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2b06      	cmp	r3, #6
 8002ad0:	d010      	beq.n	8002af4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f042 0201 	orr.w	r2, r2, #1
 8002ae0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ae2:	e007      	b.n	8002af4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f042 0201 	orr.w	r2, r2, #1
 8002af2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3714      	adds	r7, #20
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bc80      	pop	{r7}
 8002afe:	4770      	bx	lr
 8002b00:	40012c00 	.word	0x40012c00
 8002b04:	40000400 	.word	0x40000400
 8002b08:	40000800 	.word	0x40000800

08002b0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d020      	beq.n	8002b70 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f003 0302 	and.w	r3, r3, #2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d01b      	beq.n	8002b70 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f06f 0202 	mvn.w	r2, #2
 8002b40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2201      	movs	r2, #1
 8002b46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	f003 0303 	and.w	r3, r3, #3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d003      	beq.n	8002b5e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 f998 	bl	8002e8c <HAL_TIM_IC_CaptureCallback>
 8002b5c:	e005      	b.n	8002b6a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 f98b 	bl	8002e7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f000 f99a 	bl	8002e9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	f003 0304 	and.w	r3, r3, #4
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d020      	beq.n	8002bbc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f003 0304 	and.w	r3, r3, #4
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d01b      	beq.n	8002bbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f06f 0204 	mvn.w	r2, #4
 8002b8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2202      	movs	r2, #2
 8002b92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d003      	beq.n	8002baa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 f972 	bl	8002e8c <HAL_TIM_IC_CaptureCallback>
 8002ba8:	e005      	b.n	8002bb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 f965 	bl	8002e7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 f974 	bl	8002e9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	f003 0308 	and.w	r3, r3, #8
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d020      	beq.n	8002c08 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f003 0308 	and.w	r3, r3, #8
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d01b      	beq.n	8002c08 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f06f 0208 	mvn.w	r2, #8
 8002bd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2204      	movs	r2, #4
 8002bde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	69db      	ldr	r3, [r3, #28]
 8002be6:	f003 0303 	and.w	r3, r3, #3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d003      	beq.n	8002bf6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 f94c 	bl	8002e8c <HAL_TIM_IC_CaptureCallback>
 8002bf4:	e005      	b.n	8002c02 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 f93f 	bl	8002e7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 f94e 	bl	8002e9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	f003 0310 	and.w	r3, r3, #16
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d020      	beq.n	8002c54 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f003 0310 	and.w	r3, r3, #16
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d01b      	beq.n	8002c54 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f06f 0210 	mvn.w	r2, #16
 8002c24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2208      	movs	r2, #8
 8002c2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	69db      	ldr	r3, [r3, #28]
 8002c32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 f926 	bl	8002e8c <HAL_TIM_IC_CaptureCallback>
 8002c40:	e005      	b.n	8002c4e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 f919 	bl	8002e7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f000 f928 	bl	8002e9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00c      	beq.n	8002c78 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d007      	beq.n	8002c78 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f06f 0201 	mvn.w	r2, #1
 8002c70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f7fe f8c4 	bl	8000e00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00c      	beq.n	8002c9c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d007      	beq.n	8002c9c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 fa7f 	bl	800319a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00c      	beq.n	8002cc0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d007      	beq.n	8002cc0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 f8f8 	bl	8002eb0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	f003 0320 	and.w	r3, r3, #32
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d00c      	beq.n	8002ce4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f003 0320 	and.w	r3, r3, #32
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d007      	beq.n	8002ce4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f06f 0220 	mvn.w	r2, #32
 8002cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f000 fa52 	bl	8003188 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ce4:	bf00      	nop
 8002ce6:	3710      	adds	r7, #16
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d101      	bne.n	8002d08 <HAL_TIM_ConfigClockSource+0x1c>
 8002d04:	2302      	movs	r3, #2
 8002d06:	e0b4      	b.n	8002e72 <HAL_TIM_ConfigClockSource+0x186>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2202      	movs	r2, #2
 8002d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	68ba      	ldr	r2, [r7, #8]
 8002d36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d40:	d03e      	beq.n	8002dc0 <HAL_TIM_ConfigClockSource+0xd4>
 8002d42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d46:	f200 8087 	bhi.w	8002e58 <HAL_TIM_ConfigClockSource+0x16c>
 8002d4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d4e:	f000 8086 	beq.w	8002e5e <HAL_TIM_ConfigClockSource+0x172>
 8002d52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d56:	d87f      	bhi.n	8002e58 <HAL_TIM_ConfigClockSource+0x16c>
 8002d58:	2b70      	cmp	r3, #112	; 0x70
 8002d5a:	d01a      	beq.n	8002d92 <HAL_TIM_ConfigClockSource+0xa6>
 8002d5c:	2b70      	cmp	r3, #112	; 0x70
 8002d5e:	d87b      	bhi.n	8002e58 <HAL_TIM_ConfigClockSource+0x16c>
 8002d60:	2b60      	cmp	r3, #96	; 0x60
 8002d62:	d050      	beq.n	8002e06 <HAL_TIM_ConfigClockSource+0x11a>
 8002d64:	2b60      	cmp	r3, #96	; 0x60
 8002d66:	d877      	bhi.n	8002e58 <HAL_TIM_ConfigClockSource+0x16c>
 8002d68:	2b50      	cmp	r3, #80	; 0x50
 8002d6a:	d03c      	beq.n	8002de6 <HAL_TIM_ConfigClockSource+0xfa>
 8002d6c:	2b50      	cmp	r3, #80	; 0x50
 8002d6e:	d873      	bhi.n	8002e58 <HAL_TIM_ConfigClockSource+0x16c>
 8002d70:	2b40      	cmp	r3, #64	; 0x40
 8002d72:	d058      	beq.n	8002e26 <HAL_TIM_ConfigClockSource+0x13a>
 8002d74:	2b40      	cmp	r3, #64	; 0x40
 8002d76:	d86f      	bhi.n	8002e58 <HAL_TIM_ConfigClockSource+0x16c>
 8002d78:	2b30      	cmp	r3, #48	; 0x30
 8002d7a:	d064      	beq.n	8002e46 <HAL_TIM_ConfigClockSource+0x15a>
 8002d7c:	2b30      	cmp	r3, #48	; 0x30
 8002d7e:	d86b      	bhi.n	8002e58 <HAL_TIM_ConfigClockSource+0x16c>
 8002d80:	2b20      	cmp	r3, #32
 8002d82:	d060      	beq.n	8002e46 <HAL_TIM_ConfigClockSource+0x15a>
 8002d84:	2b20      	cmp	r3, #32
 8002d86:	d867      	bhi.n	8002e58 <HAL_TIM_ConfigClockSource+0x16c>
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d05c      	beq.n	8002e46 <HAL_TIM_ConfigClockSource+0x15a>
 8002d8c:	2b10      	cmp	r3, #16
 8002d8e:	d05a      	beq.n	8002e46 <HAL_TIM_ConfigClockSource+0x15a>
 8002d90:	e062      	b.n	8002e58 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6818      	ldr	r0, [r3, #0]
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	6899      	ldr	r1, [r3, #8]
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	685a      	ldr	r2, [r3, #4]
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	f000 f974 	bl	800308e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002db4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68ba      	ldr	r2, [r7, #8]
 8002dbc:	609a      	str	r2, [r3, #8]
      break;
 8002dbe:	e04f      	b.n	8002e60 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6818      	ldr	r0, [r3, #0]
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	6899      	ldr	r1, [r3, #8]
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685a      	ldr	r2, [r3, #4]
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	f000 f95d 	bl	800308e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	689a      	ldr	r2, [r3, #8]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002de2:	609a      	str	r2, [r3, #8]
      break;
 8002de4:	e03c      	b.n	8002e60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6818      	ldr	r0, [r3, #0]
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	6859      	ldr	r1, [r3, #4]
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	461a      	mov	r2, r3
 8002df4:	f000 f8d4 	bl	8002fa0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2150      	movs	r1, #80	; 0x50
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f000 f92b 	bl	800305a <TIM_ITRx_SetConfig>
      break;
 8002e04:	e02c      	b.n	8002e60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6818      	ldr	r0, [r3, #0]
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	6859      	ldr	r1, [r3, #4]
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	461a      	mov	r2, r3
 8002e14:	f000 f8f2 	bl	8002ffc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2160      	movs	r1, #96	; 0x60
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f000 f91b 	bl	800305a <TIM_ITRx_SetConfig>
      break;
 8002e24:	e01c      	b.n	8002e60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6818      	ldr	r0, [r3, #0]
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	6859      	ldr	r1, [r3, #4]
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	461a      	mov	r2, r3
 8002e34:	f000 f8b4 	bl	8002fa0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2140      	movs	r1, #64	; 0x40
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f000 f90b 	bl	800305a <TIM_ITRx_SetConfig>
      break;
 8002e44:	e00c      	b.n	8002e60 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4619      	mov	r1, r3
 8002e50:	4610      	mov	r0, r2
 8002e52:	f000 f902 	bl	800305a <TIM_ITRx_SetConfig>
      break;
 8002e56:	e003      	b.n	8002e60 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e5c:	e000      	b.n	8002e60 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002e5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3710      	adds	r7, #16
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	b083      	sub	sp, #12
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e82:	bf00      	nop
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bc80      	pop	{r7}
 8002e8a:	4770      	bx	lr

08002e8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bc80      	pop	{r7}
 8002e9c:	4770      	bx	lr

08002e9e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	b083      	sub	sp, #12
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ea6:	bf00      	nop
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bc80      	pop	{r7}
 8002eae:	4770      	bx	lr

08002eb0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002eb8:	bf00      	nop
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bc80      	pop	{r7}
 8002ec0:	4770      	bx	lr
	...

08002ec4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a2f      	ldr	r2, [pc, #188]	; (8002f94 <TIM_Base_SetConfig+0xd0>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d00b      	beq.n	8002ef4 <TIM_Base_SetConfig+0x30>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee2:	d007      	beq.n	8002ef4 <TIM_Base_SetConfig+0x30>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4a2c      	ldr	r2, [pc, #176]	; (8002f98 <TIM_Base_SetConfig+0xd4>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d003      	beq.n	8002ef4 <TIM_Base_SetConfig+0x30>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4a2b      	ldr	r2, [pc, #172]	; (8002f9c <TIM_Base_SetConfig+0xd8>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d108      	bne.n	8002f06 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002efa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	68fa      	ldr	r2, [r7, #12]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a22      	ldr	r2, [pc, #136]	; (8002f94 <TIM_Base_SetConfig+0xd0>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d00b      	beq.n	8002f26 <TIM_Base_SetConfig+0x62>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f14:	d007      	beq.n	8002f26 <TIM_Base_SetConfig+0x62>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a1f      	ldr	r2, [pc, #124]	; (8002f98 <TIM_Base_SetConfig+0xd4>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d003      	beq.n	8002f26 <TIM_Base_SetConfig+0x62>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a1e      	ldr	r2, [pc, #120]	; (8002f9c <TIM_Base_SetConfig+0xd8>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d108      	bne.n	8002f38 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	68fa      	ldr	r2, [r7, #12]
 8002f4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	689a      	ldr	r2, [r3, #8]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4a0d      	ldr	r2, [pc, #52]	; (8002f94 <TIM_Base_SetConfig+0xd0>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d103      	bne.n	8002f6c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	691a      	ldr	r2, [r3, #16]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d005      	beq.n	8002f8a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	f023 0201 	bic.w	r2, r3, #1
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	611a      	str	r2, [r3, #16]
  }
}
 8002f8a:	bf00      	nop
 8002f8c:	3714      	adds	r7, #20
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bc80      	pop	{r7}
 8002f92:	4770      	bx	lr
 8002f94:	40012c00 	.word	0x40012c00
 8002f98:	40000400 	.word	0x40000400
 8002f9c:	40000800 	.word	0x40000800

08002fa0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b087      	sub	sp, #28
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6a1b      	ldr	r3, [r3, #32]
 8002fb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6a1b      	ldr	r3, [r3, #32]
 8002fb6:	f023 0201 	bic.w	r2, r3, #1
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	011b      	lsls	r3, r3, #4
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	f023 030a 	bic.w	r3, r3, #10
 8002fdc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002fde:	697a      	ldr	r2, [r7, #20]
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	697a      	ldr	r2, [r7, #20]
 8002ff0:	621a      	str	r2, [r3, #32]
}
 8002ff2:	bf00      	nop
 8002ff4:	371c      	adds	r7, #28
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bc80      	pop	{r7}
 8002ffa:	4770      	bx	lr

08002ffc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b087      	sub	sp, #28
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6a1b      	ldr	r3, [r3, #32]
 800300c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6a1b      	ldr	r3, [r3, #32]
 8003012:	f023 0210 	bic.w	r2, r3, #16
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003026:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	031b      	lsls	r3, r3, #12
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	4313      	orrs	r3, r2
 8003030:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003038:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	011b      	lsls	r3, r3, #4
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	4313      	orrs	r3, r2
 8003042:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	697a      	ldr	r2, [r7, #20]
 800304e:	621a      	str	r2, [r3, #32]
}
 8003050:	bf00      	nop
 8003052:	371c      	adds	r7, #28
 8003054:	46bd      	mov	sp, r7
 8003056:	bc80      	pop	{r7}
 8003058:	4770      	bx	lr

0800305a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800305a:	b480      	push	{r7}
 800305c:	b085      	sub	sp, #20
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
 8003062:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003070:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003072:	683a      	ldr	r2, [r7, #0]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	4313      	orrs	r3, r2
 8003078:	f043 0307 	orr.w	r3, r3, #7
 800307c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	68fa      	ldr	r2, [r7, #12]
 8003082:	609a      	str	r2, [r3, #8]
}
 8003084:	bf00      	nop
 8003086:	3714      	adds	r7, #20
 8003088:	46bd      	mov	sp, r7
 800308a:	bc80      	pop	{r7}
 800308c:	4770      	bx	lr

0800308e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800308e:	b480      	push	{r7}
 8003090:	b087      	sub	sp, #28
 8003092:	af00      	add	r7, sp, #0
 8003094:	60f8      	str	r0, [r7, #12]
 8003096:	60b9      	str	r1, [r7, #8]
 8003098:	607a      	str	r2, [r7, #4]
 800309a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030a8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	021a      	lsls	r2, r3, #8
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	431a      	orrs	r2, r3
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	697a      	ldr	r2, [r7, #20]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	697a      	ldr	r2, [r7, #20]
 80030c0:	609a      	str	r2, [r3, #8]
}
 80030c2:	bf00      	nop
 80030c4:	371c      	adds	r7, #28
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bc80      	pop	{r7}
 80030ca:	4770      	bx	lr

080030cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b085      	sub	sp, #20
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d101      	bne.n	80030e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030e0:	2302      	movs	r3, #2
 80030e2:	e046      	b.n	8003172 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2202      	movs	r2, #2
 80030f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800310a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68fa      	ldr	r2, [r7, #12]
 8003112:	4313      	orrs	r3, r2
 8003114:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a16      	ldr	r2, [pc, #88]	; (800317c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d00e      	beq.n	8003146 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003130:	d009      	beq.n	8003146 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a12      	ldr	r2, [pc, #72]	; (8003180 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d004      	beq.n	8003146 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a10      	ldr	r2, [pc, #64]	; (8003184 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d10c      	bne.n	8003160 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800314c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	68ba      	ldr	r2, [r7, #8]
 8003154:	4313      	orrs	r3, r2
 8003156:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	68ba      	ldr	r2, [r7, #8]
 800315e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3714      	adds	r7, #20
 8003176:	46bd      	mov	sp, r7
 8003178:	bc80      	pop	{r7}
 800317a:	4770      	bx	lr
 800317c:	40012c00 	.word	0x40012c00
 8003180:	40000400 	.word	0x40000400
 8003184:	40000800 	.word	0x40000800

08003188 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	bc80      	pop	{r7}
 8003198:	4770      	bx	lr

0800319a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800319a:	b480      	push	{r7}
 800319c:	b083      	sub	sp, #12
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031a2:	bf00      	nop
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bc80      	pop	{r7}
 80031aa:	4770      	bx	lr

080031ac <__errno>:
 80031ac:	4b01      	ldr	r3, [pc, #4]	; (80031b4 <__errno+0x8>)
 80031ae:	6818      	ldr	r0, [r3, #0]
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	20000068 	.word	0x20000068

080031b8 <__libc_init_array>:
 80031b8:	b570      	push	{r4, r5, r6, lr}
 80031ba:	2600      	movs	r6, #0
 80031bc:	4d0c      	ldr	r5, [pc, #48]	; (80031f0 <__libc_init_array+0x38>)
 80031be:	4c0d      	ldr	r4, [pc, #52]	; (80031f4 <__libc_init_array+0x3c>)
 80031c0:	1b64      	subs	r4, r4, r5
 80031c2:	10a4      	asrs	r4, r4, #2
 80031c4:	42a6      	cmp	r6, r4
 80031c6:	d109      	bne.n	80031dc <__libc_init_array+0x24>
 80031c8:	f000 fc70 	bl	8003aac <_init>
 80031cc:	2600      	movs	r6, #0
 80031ce:	4d0a      	ldr	r5, [pc, #40]	; (80031f8 <__libc_init_array+0x40>)
 80031d0:	4c0a      	ldr	r4, [pc, #40]	; (80031fc <__libc_init_array+0x44>)
 80031d2:	1b64      	subs	r4, r4, r5
 80031d4:	10a4      	asrs	r4, r4, #2
 80031d6:	42a6      	cmp	r6, r4
 80031d8:	d105      	bne.n	80031e6 <__libc_init_array+0x2e>
 80031da:	bd70      	pop	{r4, r5, r6, pc}
 80031dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80031e0:	4798      	blx	r3
 80031e2:	3601      	adds	r6, #1
 80031e4:	e7ee      	b.n	80031c4 <__libc_init_array+0xc>
 80031e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80031ea:	4798      	blx	r3
 80031ec:	3601      	adds	r6, #1
 80031ee:	e7f2      	b.n	80031d6 <__libc_init_array+0x1e>
 80031f0:	08003b4c 	.word	0x08003b4c
 80031f4:	08003b4c 	.word	0x08003b4c
 80031f8:	08003b4c 	.word	0x08003b4c
 80031fc:	08003b50 	.word	0x08003b50

08003200 <memset>:
 8003200:	4603      	mov	r3, r0
 8003202:	4402      	add	r2, r0
 8003204:	4293      	cmp	r3, r2
 8003206:	d100      	bne.n	800320a <memset+0xa>
 8003208:	4770      	bx	lr
 800320a:	f803 1b01 	strb.w	r1, [r3], #1
 800320e:	e7f9      	b.n	8003204 <memset+0x4>

08003210 <sniprintf>:
 8003210:	b40c      	push	{r2, r3}
 8003212:	b530      	push	{r4, r5, lr}
 8003214:	4b17      	ldr	r3, [pc, #92]	; (8003274 <sniprintf+0x64>)
 8003216:	1e0c      	subs	r4, r1, #0
 8003218:	681d      	ldr	r5, [r3, #0]
 800321a:	b09d      	sub	sp, #116	; 0x74
 800321c:	da08      	bge.n	8003230 <sniprintf+0x20>
 800321e:	238b      	movs	r3, #139	; 0x8b
 8003220:	f04f 30ff 	mov.w	r0, #4294967295
 8003224:	602b      	str	r3, [r5, #0]
 8003226:	b01d      	add	sp, #116	; 0x74
 8003228:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800322c:	b002      	add	sp, #8
 800322e:	4770      	bx	lr
 8003230:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003234:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003238:	bf0c      	ite	eq
 800323a:	4623      	moveq	r3, r4
 800323c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003240:	9304      	str	r3, [sp, #16]
 8003242:	9307      	str	r3, [sp, #28]
 8003244:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003248:	9002      	str	r0, [sp, #8]
 800324a:	9006      	str	r0, [sp, #24]
 800324c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003250:	4628      	mov	r0, r5
 8003252:	ab21      	add	r3, sp, #132	; 0x84
 8003254:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003256:	a902      	add	r1, sp, #8
 8003258:	9301      	str	r3, [sp, #4]
 800325a:	f000 f869 	bl	8003330 <_svfiprintf_r>
 800325e:	1c43      	adds	r3, r0, #1
 8003260:	bfbc      	itt	lt
 8003262:	238b      	movlt	r3, #139	; 0x8b
 8003264:	602b      	strlt	r3, [r5, #0]
 8003266:	2c00      	cmp	r4, #0
 8003268:	d0dd      	beq.n	8003226 <sniprintf+0x16>
 800326a:	2200      	movs	r2, #0
 800326c:	9b02      	ldr	r3, [sp, #8]
 800326e:	701a      	strb	r2, [r3, #0]
 8003270:	e7d9      	b.n	8003226 <sniprintf+0x16>
 8003272:	bf00      	nop
 8003274:	20000068 	.word	0x20000068

08003278 <__ssputs_r>:
 8003278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800327c:	688e      	ldr	r6, [r1, #8]
 800327e:	4682      	mov	sl, r0
 8003280:	429e      	cmp	r6, r3
 8003282:	460c      	mov	r4, r1
 8003284:	4690      	mov	r8, r2
 8003286:	461f      	mov	r7, r3
 8003288:	d838      	bhi.n	80032fc <__ssputs_r+0x84>
 800328a:	898a      	ldrh	r2, [r1, #12]
 800328c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003290:	d032      	beq.n	80032f8 <__ssputs_r+0x80>
 8003292:	6825      	ldr	r5, [r4, #0]
 8003294:	6909      	ldr	r1, [r1, #16]
 8003296:	3301      	adds	r3, #1
 8003298:	eba5 0901 	sub.w	r9, r5, r1
 800329c:	6965      	ldr	r5, [r4, #20]
 800329e:	444b      	add	r3, r9
 80032a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80032a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80032a8:	106d      	asrs	r5, r5, #1
 80032aa:	429d      	cmp	r5, r3
 80032ac:	bf38      	it	cc
 80032ae:	461d      	movcc	r5, r3
 80032b0:	0553      	lsls	r3, r2, #21
 80032b2:	d531      	bpl.n	8003318 <__ssputs_r+0xa0>
 80032b4:	4629      	mov	r1, r5
 80032b6:	f000 fb53 	bl	8003960 <_malloc_r>
 80032ba:	4606      	mov	r6, r0
 80032bc:	b950      	cbnz	r0, 80032d4 <__ssputs_r+0x5c>
 80032be:	230c      	movs	r3, #12
 80032c0:	f04f 30ff 	mov.w	r0, #4294967295
 80032c4:	f8ca 3000 	str.w	r3, [sl]
 80032c8:	89a3      	ldrh	r3, [r4, #12]
 80032ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032ce:	81a3      	strh	r3, [r4, #12]
 80032d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032d4:	464a      	mov	r2, r9
 80032d6:	6921      	ldr	r1, [r4, #16]
 80032d8:	f000 face 	bl	8003878 <memcpy>
 80032dc:	89a3      	ldrh	r3, [r4, #12]
 80032de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80032e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032e6:	81a3      	strh	r3, [r4, #12]
 80032e8:	6126      	str	r6, [r4, #16]
 80032ea:	444e      	add	r6, r9
 80032ec:	6026      	str	r6, [r4, #0]
 80032ee:	463e      	mov	r6, r7
 80032f0:	6165      	str	r5, [r4, #20]
 80032f2:	eba5 0509 	sub.w	r5, r5, r9
 80032f6:	60a5      	str	r5, [r4, #8]
 80032f8:	42be      	cmp	r6, r7
 80032fa:	d900      	bls.n	80032fe <__ssputs_r+0x86>
 80032fc:	463e      	mov	r6, r7
 80032fe:	4632      	mov	r2, r6
 8003300:	4641      	mov	r1, r8
 8003302:	6820      	ldr	r0, [r4, #0]
 8003304:	f000 fac6 	bl	8003894 <memmove>
 8003308:	68a3      	ldr	r3, [r4, #8]
 800330a:	6822      	ldr	r2, [r4, #0]
 800330c:	1b9b      	subs	r3, r3, r6
 800330e:	4432      	add	r2, r6
 8003310:	2000      	movs	r0, #0
 8003312:	60a3      	str	r3, [r4, #8]
 8003314:	6022      	str	r2, [r4, #0]
 8003316:	e7db      	b.n	80032d0 <__ssputs_r+0x58>
 8003318:	462a      	mov	r2, r5
 800331a:	f000 fb7b 	bl	8003a14 <_realloc_r>
 800331e:	4606      	mov	r6, r0
 8003320:	2800      	cmp	r0, #0
 8003322:	d1e1      	bne.n	80032e8 <__ssputs_r+0x70>
 8003324:	4650      	mov	r0, sl
 8003326:	6921      	ldr	r1, [r4, #16]
 8003328:	f000 face 	bl	80038c8 <_free_r>
 800332c:	e7c7      	b.n	80032be <__ssputs_r+0x46>
	...

08003330 <_svfiprintf_r>:
 8003330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003334:	4698      	mov	r8, r3
 8003336:	898b      	ldrh	r3, [r1, #12]
 8003338:	4607      	mov	r7, r0
 800333a:	061b      	lsls	r3, r3, #24
 800333c:	460d      	mov	r5, r1
 800333e:	4614      	mov	r4, r2
 8003340:	b09d      	sub	sp, #116	; 0x74
 8003342:	d50e      	bpl.n	8003362 <_svfiprintf_r+0x32>
 8003344:	690b      	ldr	r3, [r1, #16]
 8003346:	b963      	cbnz	r3, 8003362 <_svfiprintf_r+0x32>
 8003348:	2140      	movs	r1, #64	; 0x40
 800334a:	f000 fb09 	bl	8003960 <_malloc_r>
 800334e:	6028      	str	r0, [r5, #0]
 8003350:	6128      	str	r0, [r5, #16]
 8003352:	b920      	cbnz	r0, 800335e <_svfiprintf_r+0x2e>
 8003354:	230c      	movs	r3, #12
 8003356:	603b      	str	r3, [r7, #0]
 8003358:	f04f 30ff 	mov.w	r0, #4294967295
 800335c:	e0d1      	b.n	8003502 <_svfiprintf_r+0x1d2>
 800335e:	2340      	movs	r3, #64	; 0x40
 8003360:	616b      	str	r3, [r5, #20]
 8003362:	2300      	movs	r3, #0
 8003364:	9309      	str	r3, [sp, #36]	; 0x24
 8003366:	2320      	movs	r3, #32
 8003368:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800336c:	2330      	movs	r3, #48	; 0x30
 800336e:	f04f 0901 	mov.w	r9, #1
 8003372:	f8cd 800c 	str.w	r8, [sp, #12]
 8003376:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800351c <_svfiprintf_r+0x1ec>
 800337a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800337e:	4623      	mov	r3, r4
 8003380:	469a      	mov	sl, r3
 8003382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003386:	b10a      	cbz	r2, 800338c <_svfiprintf_r+0x5c>
 8003388:	2a25      	cmp	r2, #37	; 0x25
 800338a:	d1f9      	bne.n	8003380 <_svfiprintf_r+0x50>
 800338c:	ebba 0b04 	subs.w	fp, sl, r4
 8003390:	d00b      	beq.n	80033aa <_svfiprintf_r+0x7a>
 8003392:	465b      	mov	r3, fp
 8003394:	4622      	mov	r2, r4
 8003396:	4629      	mov	r1, r5
 8003398:	4638      	mov	r0, r7
 800339a:	f7ff ff6d 	bl	8003278 <__ssputs_r>
 800339e:	3001      	adds	r0, #1
 80033a0:	f000 80aa 	beq.w	80034f8 <_svfiprintf_r+0x1c8>
 80033a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80033a6:	445a      	add	r2, fp
 80033a8:	9209      	str	r2, [sp, #36]	; 0x24
 80033aa:	f89a 3000 	ldrb.w	r3, [sl]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	f000 80a2 	beq.w	80034f8 <_svfiprintf_r+0x1c8>
 80033b4:	2300      	movs	r3, #0
 80033b6:	f04f 32ff 	mov.w	r2, #4294967295
 80033ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80033be:	f10a 0a01 	add.w	sl, sl, #1
 80033c2:	9304      	str	r3, [sp, #16]
 80033c4:	9307      	str	r3, [sp, #28]
 80033c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80033ca:	931a      	str	r3, [sp, #104]	; 0x68
 80033cc:	4654      	mov	r4, sl
 80033ce:	2205      	movs	r2, #5
 80033d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033d4:	4851      	ldr	r0, [pc, #324]	; (800351c <_svfiprintf_r+0x1ec>)
 80033d6:	f000 fa41 	bl	800385c <memchr>
 80033da:	9a04      	ldr	r2, [sp, #16]
 80033dc:	b9d8      	cbnz	r0, 8003416 <_svfiprintf_r+0xe6>
 80033de:	06d0      	lsls	r0, r2, #27
 80033e0:	bf44      	itt	mi
 80033e2:	2320      	movmi	r3, #32
 80033e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80033e8:	0711      	lsls	r1, r2, #28
 80033ea:	bf44      	itt	mi
 80033ec:	232b      	movmi	r3, #43	; 0x2b
 80033ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80033f2:	f89a 3000 	ldrb.w	r3, [sl]
 80033f6:	2b2a      	cmp	r3, #42	; 0x2a
 80033f8:	d015      	beq.n	8003426 <_svfiprintf_r+0xf6>
 80033fa:	4654      	mov	r4, sl
 80033fc:	2000      	movs	r0, #0
 80033fe:	f04f 0c0a 	mov.w	ip, #10
 8003402:	9a07      	ldr	r2, [sp, #28]
 8003404:	4621      	mov	r1, r4
 8003406:	f811 3b01 	ldrb.w	r3, [r1], #1
 800340a:	3b30      	subs	r3, #48	; 0x30
 800340c:	2b09      	cmp	r3, #9
 800340e:	d94e      	bls.n	80034ae <_svfiprintf_r+0x17e>
 8003410:	b1b0      	cbz	r0, 8003440 <_svfiprintf_r+0x110>
 8003412:	9207      	str	r2, [sp, #28]
 8003414:	e014      	b.n	8003440 <_svfiprintf_r+0x110>
 8003416:	eba0 0308 	sub.w	r3, r0, r8
 800341a:	fa09 f303 	lsl.w	r3, r9, r3
 800341e:	4313      	orrs	r3, r2
 8003420:	46a2      	mov	sl, r4
 8003422:	9304      	str	r3, [sp, #16]
 8003424:	e7d2      	b.n	80033cc <_svfiprintf_r+0x9c>
 8003426:	9b03      	ldr	r3, [sp, #12]
 8003428:	1d19      	adds	r1, r3, #4
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	9103      	str	r1, [sp, #12]
 800342e:	2b00      	cmp	r3, #0
 8003430:	bfbb      	ittet	lt
 8003432:	425b      	neglt	r3, r3
 8003434:	f042 0202 	orrlt.w	r2, r2, #2
 8003438:	9307      	strge	r3, [sp, #28]
 800343a:	9307      	strlt	r3, [sp, #28]
 800343c:	bfb8      	it	lt
 800343e:	9204      	strlt	r2, [sp, #16]
 8003440:	7823      	ldrb	r3, [r4, #0]
 8003442:	2b2e      	cmp	r3, #46	; 0x2e
 8003444:	d10c      	bne.n	8003460 <_svfiprintf_r+0x130>
 8003446:	7863      	ldrb	r3, [r4, #1]
 8003448:	2b2a      	cmp	r3, #42	; 0x2a
 800344a:	d135      	bne.n	80034b8 <_svfiprintf_r+0x188>
 800344c:	9b03      	ldr	r3, [sp, #12]
 800344e:	3402      	adds	r4, #2
 8003450:	1d1a      	adds	r2, r3, #4
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	9203      	str	r2, [sp, #12]
 8003456:	2b00      	cmp	r3, #0
 8003458:	bfb8      	it	lt
 800345a:	f04f 33ff 	movlt.w	r3, #4294967295
 800345e:	9305      	str	r3, [sp, #20]
 8003460:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800352c <_svfiprintf_r+0x1fc>
 8003464:	2203      	movs	r2, #3
 8003466:	4650      	mov	r0, sl
 8003468:	7821      	ldrb	r1, [r4, #0]
 800346a:	f000 f9f7 	bl	800385c <memchr>
 800346e:	b140      	cbz	r0, 8003482 <_svfiprintf_r+0x152>
 8003470:	2340      	movs	r3, #64	; 0x40
 8003472:	eba0 000a 	sub.w	r0, r0, sl
 8003476:	fa03 f000 	lsl.w	r0, r3, r0
 800347a:	9b04      	ldr	r3, [sp, #16]
 800347c:	3401      	adds	r4, #1
 800347e:	4303      	orrs	r3, r0
 8003480:	9304      	str	r3, [sp, #16]
 8003482:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003486:	2206      	movs	r2, #6
 8003488:	4825      	ldr	r0, [pc, #148]	; (8003520 <_svfiprintf_r+0x1f0>)
 800348a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800348e:	f000 f9e5 	bl	800385c <memchr>
 8003492:	2800      	cmp	r0, #0
 8003494:	d038      	beq.n	8003508 <_svfiprintf_r+0x1d8>
 8003496:	4b23      	ldr	r3, [pc, #140]	; (8003524 <_svfiprintf_r+0x1f4>)
 8003498:	bb1b      	cbnz	r3, 80034e2 <_svfiprintf_r+0x1b2>
 800349a:	9b03      	ldr	r3, [sp, #12]
 800349c:	3307      	adds	r3, #7
 800349e:	f023 0307 	bic.w	r3, r3, #7
 80034a2:	3308      	adds	r3, #8
 80034a4:	9303      	str	r3, [sp, #12]
 80034a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034a8:	4433      	add	r3, r6
 80034aa:	9309      	str	r3, [sp, #36]	; 0x24
 80034ac:	e767      	b.n	800337e <_svfiprintf_r+0x4e>
 80034ae:	460c      	mov	r4, r1
 80034b0:	2001      	movs	r0, #1
 80034b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80034b6:	e7a5      	b.n	8003404 <_svfiprintf_r+0xd4>
 80034b8:	2300      	movs	r3, #0
 80034ba:	f04f 0c0a 	mov.w	ip, #10
 80034be:	4619      	mov	r1, r3
 80034c0:	3401      	adds	r4, #1
 80034c2:	9305      	str	r3, [sp, #20]
 80034c4:	4620      	mov	r0, r4
 80034c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80034ca:	3a30      	subs	r2, #48	; 0x30
 80034cc:	2a09      	cmp	r2, #9
 80034ce:	d903      	bls.n	80034d8 <_svfiprintf_r+0x1a8>
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d0c5      	beq.n	8003460 <_svfiprintf_r+0x130>
 80034d4:	9105      	str	r1, [sp, #20]
 80034d6:	e7c3      	b.n	8003460 <_svfiprintf_r+0x130>
 80034d8:	4604      	mov	r4, r0
 80034da:	2301      	movs	r3, #1
 80034dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80034e0:	e7f0      	b.n	80034c4 <_svfiprintf_r+0x194>
 80034e2:	ab03      	add	r3, sp, #12
 80034e4:	9300      	str	r3, [sp, #0]
 80034e6:	462a      	mov	r2, r5
 80034e8:	4638      	mov	r0, r7
 80034ea:	4b0f      	ldr	r3, [pc, #60]	; (8003528 <_svfiprintf_r+0x1f8>)
 80034ec:	a904      	add	r1, sp, #16
 80034ee:	f3af 8000 	nop.w
 80034f2:	1c42      	adds	r2, r0, #1
 80034f4:	4606      	mov	r6, r0
 80034f6:	d1d6      	bne.n	80034a6 <_svfiprintf_r+0x176>
 80034f8:	89ab      	ldrh	r3, [r5, #12]
 80034fa:	065b      	lsls	r3, r3, #25
 80034fc:	f53f af2c 	bmi.w	8003358 <_svfiprintf_r+0x28>
 8003500:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003502:	b01d      	add	sp, #116	; 0x74
 8003504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003508:	ab03      	add	r3, sp, #12
 800350a:	9300      	str	r3, [sp, #0]
 800350c:	462a      	mov	r2, r5
 800350e:	4638      	mov	r0, r7
 8003510:	4b05      	ldr	r3, [pc, #20]	; (8003528 <_svfiprintf_r+0x1f8>)
 8003512:	a904      	add	r1, sp, #16
 8003514:	f000 f87c 	bl	8003610 <_printf_i>
 8003518:	e7eb      	b.n	80034f2 <_svfiprintf_r+0x1c2>
 800351a:	bf00      	nop
 800351c:	08003b16 	.word	0x08003b16
 8003520:	08003b20 	.word	0x08003b20
 8003524:	00000000 	.word	0x00000000
 8003528:	08003279 	.word	0x08003279
 800352c:	08003b1c 	.word	0x08003b1c

08003530 <_printf_common>:
 8003530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003534:	4616      	mov	r6, r2
 8003536:	4699      	mov	r9, r3
 8003538:	688a      	ldr	r2, [r1, #8]
 800353a:	690b      	ldr	r3, [r1, #16]
 800353c:	4607      	mov	r7, r0
 800353e:	4293      	cmp	r3, r2
 8003540:	bfb8      	it	lt
 8003542:	4613      	movlt	r3, r2
 8003544:	6033      	str	r3, [r6, #0]
 8003546:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800354a:	460c      	mov	r4, r1
 800354c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003550:	b10a      	cbz	r2, 8003556 <_printf_common+0x26>
 8003552:	3301      	adds	r3, #1
 8003554:	6033      	str	r3, [r6, #0]
 8003556:	6823      	ldr	r3, [r4, #0]
 8003558:	0699      	lsls	r1, r3, #26
 800355a:	bf42      	ittt	mi
 800355c:	6833      	ldrmi	r3, [r6, #0]
 800355e:	3302      	addmi	r3, #2
 8003560:	6033      	strmi	r3, [r6, #0]
 8003562:	6825      	ldr	r5, [r4, #0]
 8003564:	f015 0506 	ands.w	r5, r5, #6
 8003568:	d106      	bne.n	8003578 <_printf_common+0x48>
 800356a:	f104 0a19 	add.w	sl, r4, #25
 800356e:	68e3      	ldr	r3, [r4, #12]
 8003570:	6832      	ldr	r2, [r6, #0]
 8003572:	1a9b      	subs	r3, r3, r2
 8003574:	42ab      	cmp	r3, r5
 8003576:	dc28      	bgt.n	80035ca <_printf_common+0x9a>
 8003578:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800357c:	1e13      	subs	r3, r2, #0
 800357e:	6822      	ldr	r2, [r4, #0]
 8003580:	bf18      	it	ne
 8003582:	2301      	movne	r3, #1
 8003584:	0692      	lsls	r2, r2, #26
 8003586:	d42d      	bmi.n	80035e4 <_printf_common+0xb4>
 8003588:	4649      	mov	r1, r9
 800358a:	4638      	mov	r0, r7
 800358c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003590:	47c0      	blx	r8
 8003592:	3001      	adds	r0, #1
 8003594:	d020      	beq.n	80035d8 <_printf_common+0xa8>
 8003596:	6823      	ldr	r3, [r4, #0]
 8003598:	68e5      	ldr	r5, [r4, #12]
 800359a:	f003 0306 	and.w	r3, r3, #6
 800359e:	2b04      	cmp	r3, #4
 80035a0:	bf18      	it	ne
 80035a2:	2500      	movne	r5, #0
 80035a4:	6832      	ldr	r2, [r6, #0]
 80035a6:	f04f 0600 	mov.w	r6, #0
 80035aa:	68a3      	ldr	r3, [r4, #8]
 80035ac:	bf08      	it	eq
 80035ae:	1aad      	subeq	r5, r5, r2
 80035b0:	6922      	ldr	r2, [r4, #16]
 80035b2:	bf08      	it	eq
 80035b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035b8:	4293      	cmp	r3, r2
 80035ba:	bfc4      	itt	gt
 80035bc:	1a9b      	subgt	r3, r3, r2
 80035be:	18ed      	addgt	r5, r5, r3
 80035c0:	341a      	adds	r4, #26
 80035c2:	42b5      	cmp	r5, r6
 80035c4:	d11a      	bne.n	80035fc <_printf_common+0xcc>
 80035c6:	2000      	movs	r0, #0
 80035c8:	e008      	b.n	80035dc <_printf_common+0xac>
 80035ca:	2301      	movs	r3, #1
 80035cc:	4652      	mov	r2, sl
 80035ce:	4649      	mov	r1, r9
 80035d0:	4638      	mov	r0, r7
 80035d2:	47c0      	blx	r8
 80035d4:	3001      	adds	r0, #1
 80035d6:	d103      	bne.n	80035e0 <_printf_common+0xb0>
 80035d8:	f04f 30ff 	mov.w	r0, #4294967295
 80035dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035e0:	3501      	adds	r5, #1
 80035e2:	e7c4      	b.n	800356e <_printf_common+0x3e>
 80035e4:	2030      	movs	r0, #48	; 0x30
 80035e6:	18e1      	adds	r1, r4, r3
 80035e8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80035ec:	1c5a      	adds	r2, r3, #1
 80035ee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80035f2:	4422      	add	r2, r4
 80035f4:	3302      	adds	r3, #2
 80035f6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80035fa:	e7c5      	b.n	8003588 <_printf_common+0x58>
 80035fc:	2301      	movs	r3, #1
 80035fe:	4622      	mov	r2, r4
 8003600:	4649      	mov	r1, r9
 8003602:	4638      	mov	r0, r7
 8003604:	47c0      	blx	r8
 8003606:	3001      	adds	r0, #1
 8003608:	d0e6      	beq.n	80035d8 <_printf_common+0xa8>
 800360a:	3601      	adds	r6, #1
 800360c:	e7d9      	b.n	80035c2 <_printf_common+0x92>
	...

08003610 <_printf_i>:
 8003610:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003614:	460c      	mov	r4, r1
 8003616:	7e27      	ldrb	r7, [r4, #24]
 8003618:	4691      	mov	r9, r2
 800361a:	2f78      	cmp	r7, #120	; 0x78
 800361c:	4680      	mov	r8, r0
 800361e:	469a      	mov	sl, r3
 8003620:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003622:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003626:	d807      	bhi.n	8003638 <_printf_i+0x28>
 8003628:	2f62      	cmp	r7, #98	; 0x62
 800362a:	d80a      	bhi.n	8003642 <_printf_i+0x32>
 800362c:	2f00      	cmp	r7, #0
 800362e:	f000 80d9 	beq.w	80037e4 <_printf_i+0x1d4>
 8003632:	2f58      	cmp	r7, #88	; 0x58
 8003634:	f000 80a4 	beq.w	8003780 <_printf_i+0x170>
 8003638:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800363c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003640:	e03a      	b.n	80036b8 <_printf_i+0xa8>
 8003642:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003646:	2b15      	cmp	r3, #21
 8003648:	d8f6      	bhi.n	8003638 <_printf_i+0x28>
 800364a:	a001      	add	r0, pc, #4	; (adr r0, 8003650 <_printf_i+0x40>)
 800364c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003650:	080036a9 	.word	0x080036a9
 8003654:	080036bd 	.word	0x080036bd
 8003658:	08003639 	.word	0x08003639
 800365c:	08003639 	.word	0x08003639
 8003660:	08003639 	.word	0x08003639
 8003664:	08003639 	.word	0x08003639
 8003668:	080036bd 	.word	0x080036bd
 800366c:	08003639 	.word	0x08003639
 8003670:	08003639 	.word	0x08003639
 8003674:	08003639 	.word	0x08003639
 8003678:	08003639 	.word	0x08003639
 800367c:	080037cb 	.word	0x080037cb
 8003680:	080036ed 	.word	0x080036ed
 8003684:	080037ad 	.word	0x080037ad
 8003688:	08003639 	.word	0x08003639
 800368c:	08003639 	.word	0x08003639
 8003690:	080037ed 	.word	0x080037ed
 8003694:	08003639 	.word	0x08003639
 8003698:	080036ed 	.word	0x080036ed
 800369c:	08003639 	.word	0x08003639
 80036a0:	08003639 	.word	0x08003639
 80036a4:	080037b5 	.word	0x080037b5
 80036a8:	680b      	ldr	r3, [r1, #0]
 80036aa:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80036ae:	1d1a      	adds	r2, r3, #4
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	600a      	str	r2, [r1, #0]
 80036b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80036b8:	2301      	movs	r3, #1
 80036ba:	e0a4      	b.n	8003806 <_printf_i+0x1f6>
 80036bc:	6825      	ldr	r5, [r4, #0]
 80036be:	6808      	ldr	r0, [r1, #0]
 80036c0:	062e      	lsls	r6, r5, #24
 80036c2:	f100 0304 	add.w	r3, r0, #4
 80036c6:	d50a      	bpl.n	80036de <_printf_i+0xce>
 80036c8:	6805      	ldr	r5, [r0, #0]
 80036ca:	600b      	str	r3, [r1, #0]
 80036cc:	2d00      	cmp	r5, #0
 80036ce:	da03      	bge.n	80036d8 <_printf_i+0xc8>
 80036d0:	232d      	movs	r3, #45	; 0x2d
 80036d2:	426d      	negs	r5, r5
 80036d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036d8:	230a      	movs	r3, #10
 80036da:	485e      	ldr	r0, [pc, #376]	; (8003854 <_printf_i+0x244>)
 80036dc:	e019      	b.n	8003712 <_printf_i+0x102>
 80036de:	f015 0f40 	tst.w	r5, #64	; 0x40
 80036e2:	6805      	ldr	r5, [r0, #0]
 80036e4:	600b      	str	r3, [r1, #0]
 80036e6:	bf18      	it	ne
 80036e8:	b22d      	sxthne	r5, r5
 80036ea:	e7ef      	b.n	80036cc <_printf_i+0xbc>
 80036ec:	680b      	ldr	r3, [r1, #0]
 80036ee:	6825      	ldr	r5, [r4, #0]
 80036f0:	1d18      	adds	r0, r3, #4
 80036f2:	6008      	str	r0, [r1, #0]
 80036f4:	0628      	lsls	r0, r5, #24
 80036f6:	d501      	bpl.n	80036fc <_printf_i+0xec>
 80036f8:	681d      	ldr	r5, [r3, #0]
 80036fa:	e002      	b.n	8003702 <_printf_i+0xf2>
 80036fc:	0669      	lsls	r1, r5, #25
 80036fe:	d5fb      	bpl.n	80036f8 <_printf_i+0xe8>
 8003700:	881d      	ldrh	r5, [r3, #0]
 8003702:	2f6f      	cmp	r7, #111	; 0x6f
 8003704:	bf0c      	ite	eq
 8003706:	2308      	moveq	r3, #8
 8003708:	230a      	movne	r3, #10
 800370a:	4852      	ldr	r0, [pc, #328]	; (8003854 <_printf_i+0x244>)
 800370c:	2100      	movs	r1, #0
 800370e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003712:	6866      	ldr	r6, [r4, #4]
 8003714:	2e00      	cmp	r6, #0
 8003716:	bfa8      	it	ge
 8003718:	6821      	ldrge	r1, [r4, #0]
 800371a:	60a6      	str	r6, [r4, #8]
 800371c:	bfa4      	itt	ge
 800371e:	f021 0104 	bicge.w	r1, r1, #4
 8003722:	6021      	strge	r1, [r4, #0]
 8003724:	b90d      	cbnz	r5, 800372a <_printf_i+0x11a>
 8003726:	2e00      	cmp	r6, #0
 8003728:	d04d      	beq.n	80037c6 <_printf_i+0x1b6>
 800372a:	4616      	mov	r6, r2
 800372c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003730:	fb03 5711 	mls	r7, r3, r1, r5
 8003734:	5dc7      	ldrb	r7, [r0, r7]
 8003736:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800373a:	462f      	mov	r7, r5
 800373c:	42bb      	cmp	r3, r7
 800373e:	460d      	mov	r5, r1
 8003740:	d9f4      	bls.n	800372c <_printf_i+0x11c>
 8003742:	2b08      	cmp	r3, #8
 8003744:	d10b      	bne.n	800375e <_printf_i+0x14e>
 8003746:	6823      	ldr	r3, [r4, #0]
 8003748:	07df      	lsls	r7, r3, #31
 800374a:	d508      	bpl.n	800375e <_printf_i+0x14e>
 800374c:	6923      	ldr	r3, [r4, #16]
 800374e:	6861      	ldr	r1, [r4, #4]
 8003750:	4299      	cmp	r1, r3
 8003752:	bfde      	ittt	le
 8003754:	2330      	movle	r3, #48	; 0x30
 8003756:	f806 3c01 	strble.w	r3, [r6, #-1]
 800375a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800375e:	1b92      	subs	r2, r2, r6
 8003760:	6122      	str	r2, [r4, #16]
 8003762:	464b      	mov	r3, r9
 8003764:	4621      	mov	r1, r4
 8003766:	4640      	mov	r0, r8
 8003768:	f8cd a000 	str.w	sl, [sp]
 800376c:	aa03      	add	r2, sp, #12
 800376e:	f7ff fedf 	bl	8003530 <_printf_common>
 8003772:	3001      	adds	r0, #1
 8003774:	d14c      	bne.n	8003810 <_printf_i+0x200>
 8003776:	f04f 30ff 	mov.w	r0, #4294967295
 800377a:	b004      	add	sp, #16
 800377c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003780:	4834      	ldr	r0, [pc, #208]	; (8003854 <_printf_i+0x244>)
 8003782:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003786:	680e      	ldr	r6, [r1, #0]
 8003788:	6823      	ldr	r3, [r4, #0]
 800378a:	f856 5b04 	ldr.w	r5, [r6], #4
 800378e:	061f      	lsls	r7, r3, #24
 8003790:	600e      	str	r6, [r1, #0]
 8003792:	d514      	bpl.n	80037be <_printf_i+0x1ae>
 8003794:	07d9      	lsls	r1, r3, #31
 8003796:	bf44      	itt	mi
 8003798:	f043 0320 	orrmi.w	r3, r3, #32
 800379c:	6023      	strmi	r3, [r4, #0]
 800379e:	b91d      	cbnz	r5, 80037a8 <_printf_i+0x198>
 80037a0:	6823      	ldr	r3, [r4, #0]
 80037a2:	f023 0320 	bic.w	r3, r3, #32
 80037a6:	6023      	str	r3, [r4, #0]
 80037a8:	2310      	movs	r3, #16
 80037aa:	e7af      	b.n	800370c <_printf_i+0xfc>
 80037ac:	6823      	ldr	r3, [r4, #0]
 80037ae:	f043 0320 	orr.w	r3, r3, #32
 80037b2:	6023      	str	r3, [r4, #0]
 80037b4:	2378      	movs	r3, #120	; 0x78
 80037b6:	4828      	ldr	r0, [pc, #160]	; (8003858 <_printf_i+0x248>)
 80037b8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80037bc:	e7e3      	b.n	8003786 <_printf_i+0x176>
 80037be:	065e      	lsls	r6, r3, #25
 80037c0:	bf48      	it	mi
 80037c2:	b2ad      	uxthmi	r5, r5
 80037c4:	e7e6      	b.n	8003794 <_printf_i+0x184>
 80037c6:	4616      	mov	r6, r2
 80037c8:	e7bb      	b.n	8003742 <_printf_i+0x132>
 80037ca:	680b      	ldr	r3, [r1, #0]
 80037cc:	6826      	ldr	r6, [r4, #0]
 80037ce:	1d1d      	adds	r5, r3, #4
 80037d0:	6960      	ldr	r0, [r4, #20]
 80037d2:	600d      	str	r5, [r1, #0]
 80037d4:	0635      	lsls	r5, r6, #24
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	d501      	bpl.n	80037de <_printf_i+0x1ce>
 80037da:	6018      	str	r0, [r3, #0]
 80037dc:	e002      	b.n	80037e4 <_printf_i+0x1d4>
 80037de:	0671      	lsls	r1, r6, #25
 80037e0:	d5fb      	bpl.n	80037da <_printf_i+0x1ca>
 80037e2:	8018      	strh	r0, [r3, #0]
 80037e4:	2300      	movs	r3, #0
 80037e6:	4616      	mov	r6, r2
 80037e8:	6123      	str	r3, [r4, #16]
 80037ea:	e7ba      	b.n	8003762 <_printf_i+0x152>
 80037ec:	680b      	ldr	r3, [r1, #0]
 80037ee:	1d1a      	adds	r2, r3, #4
 80037f0:	600a      	str	r2, [r1, #0]
 80037f2:	681e      	ldr	r6, [r3, #0]
 80037f4:	2100      	movs	r1, #0
 80037f6:	4630      	mov	r0, r6
 80037f8:	6862      	ldr	r2, [r4, #4]
 80037fa:	f000 f82f 	bl	800385c <memchr>
 80037fe:	b108      	cbz	r0, 8003804 <_printf_i+0x1f4>
 8003800:	1b80      	subs	r0, r0, r6
 8003802:	6060      	str	r0, [r4, #4]
 8003804:	6863      	ldr	r3, [r4, #4]
 8003806:	6123      	str	r3, [r4, #16]
 8003808:	2300      	movs	r3, #0
 800380a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800380e:	e7a8      	b.n	8003762 <_printf_i+0x152>
 8003810:	4632      	mov	r2, r6
 8003812:	4649      	mov	r1, r9
 8003814:	4640      	mov	r0, r8
 8003816:	6923      	ldr	r3, [r4, #16]
 8003818:	47d0      	blx	sl
 800381a:	3001      	adds	r0, #1
 800381c:	d0ab      	beq.n	8003776 <_printf_i+0x166>
 800381e:	6823      	ldr	r3, [r4, #0]
 8003820:	079b      	lsls	r3, r3, #30
 8003822:	d413      	bmi.n	800384c <_printf_i+0x23c>
 8003824:	68e0      	ldr	r0, [r4, #12]
 8003826:	9b03      	ldr	r3, [sp, #12]
 8003828:	4298      	cmp	r0, r3
 800382a:	bfb8      	it	lt
 800382c:	4618      	movlt	r0, r3
 800382e:	e7a4      	b.n	800377a <_printf_i+0x16a>
 8003830:	2301      	movs	r3, #1
 8003832:	4632      	mov	r2, r6
 8003834:	4649      	mov	r1, r9
 8003836:	4640      	mov	r0, r8
 8003838:	47d0      	blx	sl
 800383a:	3001      	adds	r0, #1
 800383c:	d09b      	beq.n	8003776 <_printf_i+0x166>
 800383e:	3501      	adds	r5, #1
 8003840:	68e3      	ldr	r3, [r4, #12]
 8003842:	9903      	ldr	r1, [sp, #12]
 8003844:	1a5b      	subs	r3, r3, r1
 8003846:	42ab      	cmp	r3, r5
 8003848:	dcf2      	bgt.n	8003830 <_printf_i+0x220>
 800384a:	e7eb      	b.n	8003824 <_printf_i+0x214>
 800384c:	2500      	movs	r5, #0
 800384e:	f104 0619 	add.w	r6, r4, #25
 8003852:	e7f5      	b.n	8003840 <_printf_i+0x230>
 8003854:	08003b27 	.word	0x08003b27
 8003858:	08003b38 	.word	0x08003b38

0800385c <memchr>:
 800385c:	4603      	mov	r3, r0
 800385e:	b510      	push	{r4, lr}
 8003860:	b2c9      	uxtb	r1, r1
 8003862:	4402      	add	r2, r0
 8003864:	4293      	cmp	r3, r2
 8003866:	4618      	mov	r0, r3
 8003868:	d101      	bne.n	800386e <memchr+0x12>
 800386a:	2000      	movs	r0, #0
 800386c:	e003      	b.n	8003876 <memchr+0x1a>
 800386e:	7804      	ldrb	r4, [r0, #0]
 8003870:	3301      	adds	r3, #1
 8003872:	428c      	cmp	r4, r1
 8003874:	d1f6      	bne.n	8003864 <memchr+0x8>
 8003876:	bd10      	pop	{r4, pc}

08003878 <memcpy>:
 8003878:	440a      	add	r2, r1
 800387a:	4291      	cmp	r1, r2
 800387c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003880:	d100      	bne.n	8003884 <memcpy+0xc>
 8003882:	4770      	bx	lr
 8003884:	b510      	push	{r4, lr}
 8003886:	f811 4b01 	ldrb.w	r4, [r1], #1
 800388a:	4291      	cmp	r1, r2
 800388c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003890:	d1f9      	bne.n	8003886 <memcpy+0xe>
 8003892:	bd10      	pop	{r4, pc}

08003894 <memmove>:
 8003894:	4288      	cmp	r0, r1
 8003896:	b510      	push	{r4, lr}
 8003898:	eb01 0402 	add.w	r4, r1, r2
 800389c:	d902      	bls.n	80038a4 <memmove+0x10>
 800389e:	4284      	cmp	r4, r0
 80038a0:	4623      	mov	r3, r4
 80038a2:	d807      	bhi.n	80038b4 <memmove+0x20>
 80038a4:	1e43      	subs	r3, r0, #1
 80038a6:	42a1      	cmp	r1, r4
 80038a8:	d008      	beq.n	80038bc <memmove+0x28>
 80038aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80038ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80038b2:	e7f8      	b.n	80038a6 <memmove+0x12>
 80038b4:	4601      	mov	r1, r0
 80038b6:	4402      	add	r2, r0
 80038b8:	428a      	cmp	r2, r1
 80038ba:	d100      	bne.n	80038be <memmove+0x2a>
 80038bc:	bd10      	pop	{r4, pc}
 80038be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80038c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80038c6:	e7f7      	b.n	80038b8 <memmove+0x24>

080038c8 <_free_r>:
 80038c8:	b538      	push	{r3, r4, r5, lr}
 80038ca:	4605      	mov	r5, r0
 80038cc:	2900      	cmp	r1, #0
 80038ce:	d043      	beq.n	8003958 <_free_r+0x90>
 80038d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038d4:	1f0c      	subs	r4, r1, #4
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	bfb8      	it	lt
 80038da:	18e4      	addlt	r4, r4, r3
 80038dc:	f000 f8d0 	bl	8003a80 <__malloc_lock>
 80038e0:	4a1e      	ldr	r2, [pc, #120]	; (800395c <_free_r+0x94>)
 80038e2:	6813      	ldr	r3, [r2, #0]
 80038e4:	4610      	mov	r0, r2
 80038e6:	b933      	cbnz	r3, 80038f6 <_free_r+0x2e>
 80038e8:	6063      	str	r3, [r4, #4]
 80038ea:	6014      	str	r4, [r2, #0]
 80038ec:	4628      	mov	r0, r5
 80038ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038f2:	f000 b8cb 	b.w	8003a8c <__malloc_unlock>
 80038f6:	42a3      	cmp	r3, r4
 80038f8:	d90a      	bls.n	8003910 <_free_r+0x48>
 80038fa:	6821      	ldr	r1, [r4, #0]
 80038fc:	1862      	adds	r2, r4, r1
 80038fe:	4293      	cmp	r3, r2
 8003900:	bf01      	itttt	eq
 8003902:	681a      	ldreq	r2, [r3, #0]
 8003904:	685b      	ldreq	r3, [r3, #4]
 8003906:	1852      	addeq	r2, r2, r1
 8003908:	6022      	streq	r2, [r4, #0]
 800390a:	6063      	str	r3, [r4, #4]
 800390c:	6004      	str	r4, [r0, #0]
 800390e:	e7ed      	b.n	80038ec <_free_r+0x24>
 8003910:	461a      	mov	r2, r3
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	b10b      	cbz	r3, 800391a <_free_r+0x52>
 8003916:	42a3      	cmp	r3, r4
 8003918:	d9fa      	bls.n	8003910 <_free_r+0x48>
 800391a:	6811      	ldr	r1, [r2, #0]
 800391c:	1850      	adds	r0, r2, r1
 800391e:	42a0      	cmp	r0, r4
 8003920:	d10b      	bne.n	800393a <_free_r+0x72>
 8003922:	6820      	ldr	r0, [r4, #0]
 8003924:	4401      	add	r1, r0
 8003926:	1850      	adds	r0, r2, r1
 8003928:	4283      	cmp	r3, r0
 800392a:	6011      	str	r1, [r2, #0]
 800392c:	d1de      	bne.n	80038ec <_free_r+0x24>
 800392e:	6818      	ldr	r0, [r3, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	4401      	add	r1, r0
 8003934:	6011      	str	r1, [r2, #0]
 8003936:	6053      	str	r3, [r2, #4]
 8003938:	e7d8      	b.n	80038ec <_free_r+0x24>
 800393a:	d902      	bls.n	8003942 <_free_r+0x7a>
 800393c:	230c      	movs	r3, #12
 800393e:	602b      	str	r3, [r5, #0]
 8003940:	e7d4      	b.n	80038ec <_free_r+0x24>
 8003942:	6820      	ldr	r0, [r4, #0]
 8003944:	1821      	adds	r1, r4, r0
 8003946:	428b      	cmp	r3, r1
 8003948:	bf01      	itttt	eq
 800394a:	6819      	ldreq	r1, [r3, #0]
 800394c:	685b      	ldreq	r3, [r3, #4]
 800394e:	1809      	addeq	r1, r1, r0
 8003950:	6021      	streq	r1, [r4, #0]
 8003952:	6063      	str	r3, [r4, #4]
 8003954:	6054      	str	r4, [r2, #4]
 8003956:	e7c9      	b.n	80038ec <_free_r+0x24>
 8003958:	bd38      	pop	{r3, r4, r5, pc}
 800395a:	bf00      	nop
 800395c:	20000110 	.word	0x20000110

08003960 <_malloc_r>:
 8003960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003962:	1ccd      	adds	r5, r1, #3
 8003964:	f025 0503 	bic.w	r5, r5, #3
 8003968:	3508      	adds	r5, #8
 800396a:	2d0c      	cmp	r5, #12
 800396c:	bf38      	it	cc
 800396e:	250c      	movcc	r5, #12
 8003970:	2d00      	cmp	r5, #0
 8003972:	4606      	mov	r6, r0
 8003974:	db01      	blt.n	800397a <_malloc_r+0x1a>
 8003976:	42a9      	cmp	r1, r5
 8003978:	d903      	bls.n	8003982 <_malloc_r+0x22>
 800397a:	230c      	movs	r3, #12
 800397c:	6033      	str	r3, [r6, #0]
 800397e:	2000      	movs	r0, #0
 8003980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003982:	f000 f87d 	bl	8003a80 <__malloc_lock>
 8003986:	4921      	ldr	r1, [pc, #132]	; (8003a0c <_malloc_r+0xac>)
 8003988:	680a      	ldr	r2, [r1, #0]
 800398a:	4614      	mov	r4, r2
 800398c:	b99c      	cbnz	r4, 80039b6 <_malloc_r+0x56>
 800398e:	4f20      	ldr	r7, [pc, #128]	; (8003a10 <_malloc_r+0xb0>)
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	b923      	cbnz	r3, 800399e <_malloc_r+0x3e>
 8003994:	4621      	mov	r1, r4
 8003996:	4630      	mov	r0, r6
 8003998:	f000 f862 	bl	8003a60 <_sbrk_r>
 800399c:	6038      	str	r0, [r7, #0]
 800399e:	4629      	mov	r1, r5
 80039a0:	4630      	mov	r0, r6
 80039a2:	f000 f85d 	bl	8003a60 <_sbrk_r>
 80039a6:	1c43      	adds	r3, r0, #1
 80039a8:	d123      	bne.n	80039f2 <_malloc_r+0x92>
 80039aa:	230c      	movs	r3, #12
 80039ac:	4630      	mov	r0, r6
 80039ae:	6033      	str	r3, [r6, #0]
 80039b0:	f000 f86c 	bl	8003a8c <__malloc_unlock>
 80039b4:	e7e3      	b.n	800397e <_malloc_r+0x1e>
 80039b6:	6823      	ldr	r3, [r4, #0]
 80039b8:	1b5b      	subs	r3, r3, r5
 80039ba:	d417      	bmi.n	80039ec <_malloc_r+0x8c>
 80039bc:	2b0b      	cmp	r3, #11
 80039be:	d903      	bls.n	80039c8 <_malloc_r+0x68>
 80039c0:	6023      	str	r3, [r4, #0]
 80039c2:	441c      	add	r4, r3
 80039c4:	6025      	str	r5, [r4, #0]
 80039c6:	e004      	b.n	80039d2 <_malloc_r+0x72>
 80039c8:	6863      	ldr	r3, [r4, #4]
 80039ca:	42a2      	cmp	r2, r4
 80039cc:	bf0c      	ite	eq
 80039ce:	600b      	streq	r3, [r1, #0]
 80039d0:	6053      	strne	r3, [r2, #4]
 80039d2:	4630      	mov	r0, r6
 80039d4:	f000 f85a 	bl	8003a8c <__malloc_unlock>
 80039d8:	f104 000b 	add.w	r0, r4, #11
 80039dc:	1d23      	adds	r3, r4, #4
 80039de:	f020 0007 	bic.w	r0, r0, #7
 80039e2:	1ac2      	subs	r2, r0, r3
 80039e4:	d0cc      	beq.n	8003980 <_malloc_r+0x20>
 80039e6:	1a1b      	subs	r3, r3, r0
 80039e8:	50a3      	str	r3, [r4, r2]
 80039ea:	e7c9      	b.n	8003980 <_malloc_r+0x20>
 80039ec:	4622      	mov	r2, r4
 80039ee:	6864      	ldr	r4, [r4, #4]
 80039f0:	e7cc      	b.n	800398c <_malloc_r+0x2c>
 80039f2:	1cc4      	adds	r4, r0, #3
 80039f4:	f024 0403 	bic.w	r4, r4, #3
 80039f8:	42a0      	cmp	r0, r4
 80039fa:	d0e3      	beq.n	80039c4 <_malloc_r+0x64>
 80039fc:	1a21      	subs	r1, r4, r0
 80039fe:	4630      	mov	r0, r6
 8003a00:	f000 f82e 	bl	8003a60 <_sbrk_r>
 8003a04:	3001      	adds	r0, #1
 8003a06:	d1dd      	bne.n	80039c4 <_malloc_r+0x64>
 8003a08:	e7cf      	b.n	80039aa <_malloc_r+0x4a>
 8003a0a:	bf00      	nop
 8003a0c:	20000110 	.word	0x20000110
 8003a10:	20000114 	.word	0x20000114

08003a14 <_realloc_r>:
 8003a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a16:	4607      	mov	r7, r0
 8003a18:	4614      	mov	r4, r2
 8003a1a:	460e      	mov	r6, r1
 8003a1c:	b921      	cbnz	r1, 8003a28 <_realloc_r+0x14>
 8003a1e:	4611      	mov	r1, r2
 8003a20:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003a24:	f7ff bf9c 	b.w	8003960 <_malloc_r>
 8003a28:	b922      	cbnz	r2, 8003a34 <_realloc_r+0x20>
 8003a2a:	f7ff ff4d 	bl	80038c8 <_free_r>
 8003a2e:	4625      	mov	r5, r4
 8003a30:	4628      	mov	r0, r5
 8003a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a34:	f000 f830 	bl	8003a98 <_malloc_usable_size_r>
 8003a38:	42a0      	cmp	r0, r4
 8003a3a:	d20f      	bcs.n	8003a5c <_realloc_r+0x48>
 8003a3c:	4621      	mov	r1, r4
 8003a3e:	4638      	mov	r0, r7
 8003a40:	f7ff ff8e 	bl	8003960 <_malloc_r>
 8003a44:	4605      	mov	r5, r0
 8003a46:	2800      	cmp	r0, #0
 8003a48:	d0f2      	beq.n	8003a30 <_realloc_r+0x1c>
 8003a4a:	4631      	mov	r1, r6
 8003a4c:	4622      	mov	r2, r4
 8003a4e:	f7ff ff13 	bl	8003878 <memcpy>
 8003a52:	4631      	mov	r1, r6
 8003a54:	4638      	mov	r0, r7
 8003a56:	f7ff ff37 	bl	80038c8 <_free_r>
 8003a5a:	e7e9      	b.n	8003a30 <_realloc_r+0x1c>
 8003a5c:	4635      	mov	r5, r6
 8003a5e:	e7e7      	b.n	8003a30 <_realloc_r+0x1c>

08003a60 <_sbrk_r>:
 8003a60:	b538      	push	{r3, r4, r5, lr}
 8003a62:	2300      	movs	r3, #0
 8003a64:	4d05      	ldr	r5, [pc, #20]	; (8003a7c <_sbrk_r+0x1c>)
 8003a66:	4604      	mov	r4, r0
 8003a68:	4608      	mov	r0, r1
 8003a6a:	602b      	str	r3, [r5, #0]
 8003a6c:	f7fd fb54 	bl	8001118 <_sbrk>
 8003a70:	1c43      	adds	r3, r0, #1
 8003a72:	d102      	bne.n	8003a7a <_sbrk_r+0x1a>
 8003a74:	682b      	ldr	r3, [r5, #0]
 8003a76:	b103      	cbz	r3, 8003a7a <_sbrk_r+0x1a>
 8003a78:	6023      	str	r3, [r4, #0]
 8003a7a:	bd38      	pop	{r3, r4, r5, pc}
 8003a7c:	200001b8 	.word	0x200001b8

08003a80 <__malloc_lock>:
 8003a80:	4801      	ldr	r0, [pc, #4]	; (8003a88 <__malloc_lock+0x8>)
 8003a82:	f000 b811 	b.w	8003aa8 <__retarget_lock_acquire_recursive>
 8003a86:	bf00      	nop
 8003a88:	200001c0 	.word	0x200001c0

08003a8c <__malloc_unlock>:
 8003a8c:	4801      	ldr	r0, [pc, #4]	; (8003a94 <__malloc_unlock+0x8>)
 8003a8e:	f000 b80c 	b.w	8003aaa <__retarget_lock_release_recursive>
 8003a92:	bf00      	nop
 8003a94:	200001c0 	.word	0x200001c0

08003a98 <_malloc_usable_size_r>:
 8003a98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a9c:	1f18      	subs	r0, r3, #4
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	bfbc      	itt	lt
 8003aa2:	580b      	ldrlt	r3, [r1, r0]
 8003aa4:	18c0      	addlt	r0, r0, r3
 8003aa6:	4770      	bx	lr

08003aa8 <__retarget_lock_acquire_recursive>:
 8003aa8:	4770      	bx	lr

08003aaa <__retarget_lock_release_recursive>:
 8003aaa:	4770      	bx	lr

08003aac <_init>:
 8003aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aae:	bf00      	nop
 8003ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ab2:	bc08      	pop	{r3}
 8003ab4:	469e      	mov	lr, r3
 8003ab6:	4770      	bx	lr

08003ab8 <_fini>:
 8003ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aba:	bf00      	nop
 8003abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003abe:	bc08      	pop	{r3}
 8003ac0:	469e      	mov	lr, r3
 8003ac2:	4770      	bx	lr
